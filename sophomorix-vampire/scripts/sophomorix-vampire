#!/usr/bin/perl -w
# This script (sophomorix-project) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  jeffbeck@linuxmuster.net



# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
#use Quota;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);
#use IMAP::Admin;
#use DBI;
use Net::LDAP;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 

use File::Basename qw( basename
                       dirname
                     );   
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 check_options
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_bind_admin
                                 AD_unbind_admin
                                 AD_group_list
                                 AD_object_search
                                    );

my @arguments = @ARGV;


# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;

# default
my $datadir="/root/linuxmuster6";

# --restore-config-files
my $restore_config_files=0;

# --analyze
my $analyze=0;
my $classes_map="/root/sophomorix-vampire-classes.map";


# --create-class-script
my $create_class_script=0;
my $class_script_input="/data/root/sophomorix-dump-viewdumps/classdata_view.sql";
my $class_script_output="/root/sophomorix-vampire-classes.sh";

# --create-add-file
my $create_add_file=0;
my $sophomorix_add_input_sql="/data/root/sophomorix-dump-viewdumps/userdata_view.sql";
my $sophomorix_add_output="/root/sophomorix.add";

# --import-user-passwords
my $import_user_passwords=0;
my $import_user_pwd_ldif_template="/usr/share/sophomorix-vampire/ldif-pwdload.ldif.template";
my $import_user_pwd_ldif="/root/sophomorix-vampire-import-pwd.ldif";

# --create-project-script
my $create_project_script=0;
my $project_script_input_sql="/data/root/sophomorix-dump-viewdumps/projectdata_view.sql";
my $project_script_input="/data/root/sophomorix-dump.projects";
my $project_script_output="/root/sophomorix-vampire-projects.sh";

# --create-class-adminadd-script
my $create_class_adminadd_script=0;
my $class_adminadd_script_input="/data/root/sophomorix-dump-viewdumps/memberdata_view.sql";
my $class_adminadd_script_output="/root/sophomorix-vampire-classes-adminadd.sh";

# --verify-uid-gid
my $verify_uid_gid=0;
my $verify_uid=0;
my $verify_gid=0;

my $missig_files_count=0;
my $overwriting_files_count=0;
# ===========================================================================
# config
# ==========================================================================
my $config="/usr/share/sophomorix-dump/migration-6-to-7.conf";

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "analyze" => \$analyze,
           "restore-config-files" => \$restore_config_files,
           "datadir=s" => \$datadir,
           "create-add-file" => \$create_add_file,
           "import-user-passwords" => \$import_user_passwords,
           "create-project-script" => \$create_project_script,
           "create-class-script" => \$create_class_script,
           "create-class-adminadd-script" => \$create_class_adminadd_script,
           "verify-uid-gid" => \$verify_uid_gid,
           "verify-uid" => \$verify_uid,
           "verify-gid" => \$verify_gid,
           "verbose|v+" => \$Conf::log_level,
         );

# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);

# modify paths
# --datadir
$sophomorix_add_input_sql=$datadir.$sophomorix_add_input_sql;
$project_script_input=$datadir.$project_script_input;
$project_script_input_sql=$datadir.$project_script_input_sql;
$class_script_input=$datadir.$class_script_input;
$class_adminadd_script_input=$datadir.$class_adminadd_script_input;

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print('
sophomorix-vampire imports users, classes, projects and devices from a linuxmuster.net 6.x server 

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose

Getting information:
  -i / --info
Configuring:
  --datadir /path/to/dir/sophomorix-dump

Dump data on old server V6:
1. Exporting user data on linuxmusternet6 server:
   sophomorix-dump
2. Save/Copy the following dir to new Server:
   /root/sophomorix-dump

Vampire data into the new server V7:
1.  Test if dump is complete, read INFO, ERRORS and WARNINGS:
    # sophomorix-vampire --datadir /path/to/dir/sophomorix-dump --analyze
2.  Create class script and run it:
    # sophomorix-vampire --datadir /path/to/dir/sophomorix-dump --create-class-script
    # /root/sophomorix-vampire-classes.sh
3.  Create file sophomorix.add and add these users:
    # sophomorix-vampire --datadir ../sophomorix4-migration-data --create-add-file
    # cp /root/sophomorix.add /var/lib/sophomorix/check-result/sophomorix.add
    # sophomorix-add -i (Read ERRORS and WARNINGS, fix them manually)
    # sophomorix-add (Add the users)
4.  Import the hashed passwords into AD (if you want users to keep their password) 
    # sophomorix-vampire --datadir /path/to/dir/sophomorix-dump --import-user-passwords
5.  Create script for adminclasses and run it:
    # sophomorix-vampire --datadir /path/to/dir/sophomorix-dump --create-class-adminadd-script
    # /root/sophomorix-vampire-classes-adminadd.sh
6.  Create project script and run it:
    # sophomorix-vampire --datadir /path/to/dir/sophomorix-dump --create-project-script
    # /root/sophomorix-vampire-projects.sh
7.  Verify uid and gid of created users ang groups
    # sophomorix-vampire --datadir /path/to/dir/sophomorix-dump --verify-uid
    # sophomorix-vampire --datadir /path/to/dir/sophomorix-dump --verify-gid
8.  Copy configuration files into new server:
    # sophomorix-vampire --datadir /path/to/dir/sophomorix-dump --restore-config-files
9.  Import the workstations (later use linuxmuster command)
    # sophomorix-device
10. Manually do the rest (will be automated):
    Copy files in /etc/sophomorix/user/mail/* to new server.

Getting information:
  -i / --info
Configuring:
  --datadir /path/to/migration/files
');
   print "\n";
   exit;
}

&log_script_start(@arguments);

##################################################
# Testing files in the dump
print "Testing files in ${datadir}:\n";
open(CONFIG,"<$config") || die "ERROR: $!";
while(<CONFIG>){
    if(/^\#/){ # # am Anfang bedeutet Kommentarzeile
	next;
    }
    chomp();
    my ($old_path,$new_path,$permissions)=split(/::/);
    my $old_path_dump=$datadir."/data".$old_path;
    if (not -f $old_path_dump){
        $missig_files_count++;
        print "ERROR: Missing file $old_path_dump\n"; 
    }
    if ($new_path eq "---"){
        # files that must exist
        print "   * Exists: $old_path_dump\n";
    } else {
        # files to install
        print "   * Exists: $old_path_dump\n";
        print "     Target: $new_path\n";
        if (-e $new_path){
            print "     Target Exists WARNING: $new_path\n";
            $overwriting_files_count++;
        }
        # --restore-config-files
        if ($restore_config_files==1){ 
            my $parent_dir = dirname($new_path);
            my $mkdir_command="mkdir -p $parent_dir";
            print "     $mkdir_command\n";
            system($mkdir_command);
            my $command="cp $old_path_dump $new_path";
            print "     $command\n";
            system($command);
            my $permission_command="chmod $permissions $new_path";
            print "     $permission_command\n";
            system($permission_command);
        }
    }

}
close(CONFIG);




##################################################
# print ERRORS and WARNINGS
print "\n";
if ($missig_files_count > 0){
    print "ERROR:    $missig_files_count file(s) is missing in the dump!\n";
}
if ($overwriting_files_count > 0){
    if ($restore_config_files==1){ 
        print "$overwriting_files_count file(s) were overwritten!\n";
    } else {
        print "WARNING:  $overwriting_files_count file(s) would be overwritten!\n";
    }
}
print "\n";


# --info
if ($info==1){
    
    exit;
}

# --analyze
if ($analyze==1){
    my %login=();
    my %groupnames=();
    print "Analyzing ...\n";
    {
    print "   * Fetching loginnames of users ...\n";
    my $line_number=0;
    open(USER,"<$sophomorix_add_input_sql") || die "ERROR: $!";
    while(<USER>){
        my $line=$_;
        $line_number++;
        my @attrs=split(/\|/,$line);
        my $count=0;
        #print "Line $line_number:\n";
        if ($line_number==1){
            # skip;
        } else {
            my $login=$attrs[2];
            $login=~s/^\s+//g;# remove leading whitespace
            $login=~s/\s+$//g;# remove trailing whitespace
            #print "<$login>\n";
            $login{$login}="user";
        }
    }
    }
    {
    print "   * Fetching classnames ...\n";
    my $line_number=0;

    open(MAP,">$classes_map") || die "ERROR: $!";
    open(USER,"<$class_script_input") || die "ERROR: $!";
    while(<USER>){
        my $line=$_;
        $line_number++;
        my @attrs=split(/\|/,$line);
        my $count=0;
        #print "Line $line_number:\n";
        if ($line_number==1){
            # skip;
        } else {
            my $group=$attrs[8];
            $group=~s/^\s+//g;# remove leading whitespace
            $group=~s/\s+$//g;# remove trailing whitespace
            #print "<$group>\n";
            $groupnames{$group}="group";
        }
    }
    }
    print "INFO: The following groupnames will be converted:\n";
    foreach my $key (keys %groupnames) {
        my $value = $groupnames{$key};
        if (exists $login{$key}){
            my $new_group=$key."-grp";
            #print "$key  ---> $new_group\n";
            printf "  %-20s --> %-26s\n",$key,$new_group;
            print MAP $key."::".$new_group."::\n";
        }
    }
    close(MAP);
    close(USER);
    exit;
}


##################################################
# --create-class-script
# creating /root/sophomorix-vampire-classes.sh
if ($create_class_script==1){
    my %classes_map=&read_classes_map();
    my @command_list_create=();
    my @command_list_modify=();
    my @skipped_lines=();
    my $line_number=0;
    my %line=();
    my %tags=();
    print "Creating $class_script_output\n";
    open(CLASS,"<$class_script_input") || die "ERROR: $!";
    open(CLASSSCRIPT,">$class_script_output") || die "ERROR: $!";
    while(<CLASS>){
        my $line=$_;
        chomp($line);
        $line_number++;
        my @attrs=split(/\|/,$line);
        my $count=0;
        if ($line_number==1){
            foreach my $attr (@attrs){
                $attr=~s/^\s+//g;# remove leading whitespace
                $attr=~s/\s+$//g;# remove trailing whitespace
                print "   $count: * >$attr<\n";
                $tags{$count}=$attr;
                $count++;
            }
        } else {
            my %line=();
            my $skip_line=0;
            my $join;
            my $quota;
            my $mailquota;
            my $maillist;
            my $mailalias;
            foreach my $attr (@attrs){
                $attr=~s/^\s+//g;# remove leading whitespace
                $attr=~s/\s+$//g;# remove trailing whitespace
                #print "   $count: $tags{$count}: >$attr<\n";
                $line{$tags{$count}}=$attr;
                $count++;
            }

            # select teacher,adminclasses and hiddenclasses            
            if ($line{"type"} eq "teacher"){
                $join=" --nojoin";
            } elsif ($line{"type"} eq "adminclass"){
                $join=" --join";
            } elsif ($line{"type"} eq "hiddenclass"){
                $join=" --join";
            } elsif ($line{"type"} eq "room"){
                $skip_line=1;
                next;
            } elsif ($line{"type"} eq "project"){
                $skip_line=1;
                next;
            } else {
                # others are skipped
	        print "SKIPPED: $line\n";
                push @skipped_lines, $line;
                $skip_line=1;
                next;
            }


            # creating commands
            ##################################################
            my $class; # the mapped name
            if (exists $classes_map{$line{'gid'}}){
                $class=$classes_map{$line{'gid'}};
            } else {
                $class=$line{'gid'};
            }
            my $command_create="sophomorix-class --create -c $class --gidnumber $line{'gidnumber'}";
            my $command_modify="sophomorix-class -c $class";

            # --description
            my $description=$line{'gid'}." migrated"; # use unmapped name
            $command_modify = $command_modify." --description \"$description\"";

            # --join/--nojoin
            $command_modify = $command_modify.$join;

            # --quota
            if ($line{'quota'} eq "quota"){
                $quota=" --quota \"---\"";
            } else {
                $quota=" --quota $line{'quota'}";
            }
            $command_modify = $command_modify.$quota;

            # --mailquota
            if ($line{'mailquota'} eq "-1"){
                $mailquota=" --mailquota \"-1\"";
            } else {
                $mailquota=" --mailquota $line{'mailquota'}";
            }
            $command_modify = $command_modify.$mailquota;

            # --mailalias
            if ($line{'mailalias'} eq "t"){
                $mailalias=" --mailalias";
            } else {
                $mailalias=" --nomailalias";
            }
            $command_modify = $command_modify.$mailalias;

            # --maillist
            if ($line{'maillist'} eq "t"){
                $maillist=" --maillist";
            } else {
                $maillist=" --nomaillist";
            }
            $command_modify = $command_modify.$maillist;


            if ($skip_line==0){
                #print "$command_create\n";
                #print "$command_modify\n";
                push @command_list_create, $command_create;
                push @command_list_modify, $command_modify;
	        #print "LINE: $line";
            }
        }
    }

    # sorting lines and assembling them
    @command_list_create = sort @command_list_create;
    @command_list_modify = sort @command_list_modify;
    my @command_list=("#!/bin/sh",
                     "# Create Classes",
                      @command_list_create,
                     "# Modify Classes", 
                      @command_list_modify);
    foreach my $command (@command_list){
        print CLASSSCRIPT "$command\n";
    }
    close(CLASS);
    close(CLASSSCRIPT);
    system("chmod 755 $class_script_output");
}

##################################################
# --create-add-file
# creating sophomorix.add
if ($create_add_file==1){
    my %classes_map=&read_classes_map();
    my @skipped_lines=();
    my $line_number=0;
    my %tags=();
    print "Creating $class_script_output\n";
    open(ACCOUNTS,"<$sophomorix_add_input_sql") || die "ERROR: $!";
    open(SOPHOMORIXADD,">$sophomorix_add_output") || die "ERROR: $!";
    while(<ACCOUNTS>){
        my $line=$_;
        $line_number++;
        my @attrs=split(/\|/,$line);
        my $count=0;
        print "Line $line_number:\n";
        if ($line_number==1){
            foreach my $attr (@attrs){
                $attr=~s/^\s+//g;# remove leading whitespace
                $attr=~s/\s+$//g;# remove trailing whitespace
                print "   $count: * >$attr<\n";
                $tags{$count}=$attr;
                $count++;
            }
        } else {
            my %line=();
            my $role="";
            my $creationdate="---";
            my $tolerationdate="---";
            my $deactivationdate="---";
            my $skip_line=0;
            foreach my $attr (@attrs){
                $attr=~s/^\s+//g;# remove leading whitespace
                $attr=~s/\s+$//g;# remove trailing whitespace
                print "   $count: $tags{$count}: >$attr<\n";
                $line{$tags{$count}}=$attr;
                $count++;
            }
            if ($line{"homedirectory"}=~m/\/home\/teachers\//){
                $role="teacher";
            } elsif ($line{"homedirectory"}=~m/\/home\/students\//){
                $role="student";
            } elsif ($line{"homedirectory"}=~m/\/home\/administrators\//){
                $role="administrator";
                $skip_line=1;
            } elsif ($line{"homedirectory"}=~m/\/home\/attic\//){
                $role="student";
            } elsif ($line{"homedirectory"}=~m/\/home\/workstations\//){
                $skip_line=1;
            } else {
                # exam accounts are skipped
                if($line{"firstname"} ne "Computer"){
	            print "SKIPPED: $line \n";
                    push @skipped_lines, $line;
                }
                $skip_line=1;
            }

            # skip Computer accounts
            if($line{"firstname"} eq "Computer"){
                $skip_line=1;
            }

            if ($line{"unid"} eq""){
                $line{"unid"}="---";
            }

            my ($year,$month,$day) = split(/-/,$line{"birthday"});
            my $birthdate=$day.".".$month.".".$year;

            $creationdate=&convert_date($line{"creationdate"});
            if ($line{"tolerationdate"} ne ""){
                $tolerationdate=&convert_date($line{"tolerationdate"});
            }
            if ($line{"deactivationdate"} ne ""){
                $deactivationdate=&convert_date($line{"deactivationdate"});
            }

            my $class; # the mapped name
            if (exists $classes_map{$line{'gid'}}){
                $class=$classes_map{$line{'gid'}};
            } else {
                $class=$line{'gid'};
            }
   
            # password hashes are converted to utf8
            my $unicodePwd=`/usr/sbin/sophomorix-vampire-pwdconvert $line{"sambantpassword"}`;
            chomp($unicodePwd);
            # create_line
            my $line= "vampire.csv"."::".
                      $class."::".
                      $line{"surname"}.";".
                      $line{"firstname"}.";".
                      $birthdate."::".
                      $line{"uid"}."::".
                      $line{"firstpassword"}."::".
                      $line{"uidnumber"}."::".
                      $line{"gidnumber"}."::".
                      $line{"unid"}."::".
                      "---"."::".
                      "---"."::".
                      $role."::".
                      $line{"firstname"}."::".
                      $line{"surname"}."::".
                      $line{"sophomorixstatus"}."::".
                      $creationdate."::".
                      $tolerationdate."::".
                      $deactivationdate."::".
                      $unicodePwd."::".
                      $line{"userpassword"}."::\n";
            if ($skip_line==0){
	        print "LINE: $line";
	        print SOPHOMORIXADD $line;
            }
        }
        print "\n";
    }
    close(ACCOUNTS);
    close(SOPHOMORIXADD);
    my $skipped=$#skipped_lines+1;
    print "$skipped skipped lines:\n";
    foreach my $line (@skipped_lines){
        $line=~s/\s//g;
        my $line_part=substr($line,0,65);
        print "  LINE: $line_part ...\n";
    }
}


##################################################
# --import_user_passwords
if ($import_user_passwords==1){
    my @loglines=();
    my ($ldap,$root_dse) = &AD_bind_admin();
    print "Importing user passwords\n";
    open(ADD,"<$sophomorix_add_output") || die "ERROR: $!";
    my $lines=0;
    my $errors=0;
    while (<ADD>){
        $lines++;
        chomp();
        my (@add)=split(/::/);
        my $samaccount=$add[3];
        my $firstpassword=$add[4];
        my $pass=$add[17];
        my ($count,$dn,$cn)=&AD_object_search($ldap,$root_dse,"user",$samaccount);
        print "\n";
        print "$lines) $samaccount:  importing Hash: $pass\n";
        print "   DN: $dn\n";

        # creating ldif file
        open(LDIF,">$import_user_pwd_ldif")|| die "ERROR: $!";
	print LDIF "dn: $dn\n";
        print LDIF "changetype: modify\n";
        print LDIF "replace: unicodePwd\n";
        print LDIF "unicodePwd:: $pass\n";
        close(LDIF);

        # load ldif file
        my $com="ldbmodify -H /var/lib/samba/private/sam.ldb --controls=local_oid:1.3.6.1.4.1.7165.4.3.12:0 $import_user_pwd_ldif";
        my $res=system($com);
        if (not $res==0){
            $errors++;
            print "ERROR: $res returned\n";
            push @loglines, "Not updated Hash (Return: $res): $samaccount\n";
        }

        # update first password
        my $firstpwd_set_command="sophomorix-passwd --set-firstpassword \"$firstpassword\" -u $samaccount";
        print "   $firstpwd_set_command\n";
        my $ret=system($firstpwd_set_command);
        if (not $res==0){
            $errors++;
            print "ERROR: $ret returned\n";
            push @loglines, "Not updated Firstpassword (Return: $ret): $samaccount\n";
        }

    }
    print "\n$errors ERRORS:\n";
    foreach my $line (@loglines){
        print "  * $line";
    }
    &AD_unbind_admin($ldap);
}

##################################################
# --create-class-adminadd-script
if ($create_class_adminadd_script==1){
    # read memberships
    my $line_number=0;
    my %classes_admins=();
    my %classes_map=&read_classes_map();
    print "Creating $class_adminadd_script_output\n";
    open(MEMBER,"<$class_adminadd_script_input") || die "ERROR: $!";
    open(MEMBERSCRIPT,">$class_adminadd_script_output") || die "ERROR: $!";
    while(<MEMBER>){
        my $line=$_;
        $line_number++;
        my @attrs=split(/\|/,$line);
        my $count=0;
        #print "Line $line_number:\n";
        if ($line_number==1){
            # skip;
        } else {
            my $admin=$attrs[0];
            my $class_admin=$attrs[3];
            my $group=$attrs[5];
            $group=~s/^\s+//g;# remove leading whitespace
            $group=~s/\s+$//g;# remove trailing whitespace
            $admin=~s/^\s+//g;# remove leading whitespace
            $admin=~s/\s+$//g;# remove trailing whitespace
            $class_admin=~s/^\s+//g;# remove leading whitespace
            $class_admin=~s/\s+$//g;# remove trailing whitespace

            if ($class_admin ne "teachers"){
                next;
            }
            if ($group eq ""){
                next;
            }

            print "<$group> : <$admin> ($class_admin) is admin\n";
            if (exists $classes_admins{$group}){
		my $new=$classes_admins{$group}.",".$admin;
                $classes_admins{$group}=$new;
            } else {
                $classes_admins{$group}=$admin;
            } 
        }
    }

    # creating command list
    print MEMBERSCRIPT "#!/bin/sh\n";
    my ($ldap,$root_dse) = &AD_bind_admin();
    my @classes_dn=&AD_group_list($ldap,$root_dse,"adminclass",0);
    foreach my $class_dn (@classes_dn){
        my ($class,@rest)=split(/,/,$class_dn);
        $class=~s/^CN=//;
        if (exists $classes_admins{$class}){
            my $class_mapped;
            if (exists $classes_map{$class}){
                $class_mapped=$classes_map{$class};
            } else {
                $class_mapped=$class;
            }

            my $command="sophomorix-class -c $class_mapped --admins $classes_admins{$class}";
            print MEMBERSCRIPT "$command\n";
        }
    }

    &AD_unbind_admin($ldap);
    close(MEMBER);
    close(MEMBERSCRIPT);
    system("chmod 755 $class_adminadd_script_output");

}


##################################################
# --create-project-script
# creating /root/sophomorix-vampire-projects.sh
if ($create_project_script==1){
    my %data=();
    my @pro=();
    my %name_gid_map=();
    print "Creating $project_script_output\n";
    # ceating hash project_name -> gidnumber
    print "$project_script_input_sql\n";
    open(PROSQL,"<$project_script_input_sql") || die "ERROR: $!";
    while(<PROSQL>){
        my $line=$_;
        my @attrs=split(/\|/,$line);
        my $name=$attrs[16];
        my $gid=$attrs[17];
        $name=~s/^\s+//g;# remove leading whitespace
        $name=~s/\s+$//g;# remove trailing whitespace
        $gid=~s/^\s+//g;# remove leading whitespace
        $gid=~s/\s+$//g;# remove trailing whitespace
        $name_gid_map{$name}=$gid;
        #print "<$name> ha <$gid>\n";
    }
    close(PROSQL);
    open(PRO,"<$project_script_input") || die "ERROR: $!";
    open(PROSCRIPT,">$project_script_output") || die "ERROR: $!";
    print PROSCRIPT "#!/bin/sh\n";
    while(<PRO>){
        if(m/\./){
            chomp();
            my ($pro,$setting) = split(/\./);
            my ($para,$set) = split(/=/,$setting);
            $pro=~s/^\s+//g;# remove leading whitespace
            # saving data
            push @pro, $pro;
            $data{$pro}{$para}="$set";
        }
    }
    if($Conf::log_level>=2){
        print Dumper(%data);
    }
    @pro = uniq(@pro);

    # creating script
    # Part1: create projects
    # (projects need to exist for memberships in other projects)
    foreach my $pro (@pro){
        my $command="sophomorix-project --create -p $pro --gidnumber $name_gid_map{$pro}";
        print "  $command\n";
        print PROSCRIPT "$command\n";
   
    }


    # Part2: change projects
    foreach my $pro (@pro){
        my $command="sophomorix-project -p $pro";
        # --join/--nojoin
        if ($data{$pro}{'joinable'}==0){
            $command = $command." --nojoin";
        } else {
            $command = $command." --join";
        }
        # --mailalias/--nomailalias
        if ($data{$pro}{'mailalias'}==0){
            $command = $command." --nomailalias";
        } else {
            $command = $command." --mailalias";
        }
        # --maillist/--nomaillist
        if ($data{$pro}{'maillist'}==0){
            $command = $command." --nomaillist";
        } else {
            $command = $command." --maillist";
        }

        # --maxmembers
        $command = $command." --maxmembers ".$data{$pro}{'maxmembers'};

        # --description
        $command = $command." --description ".$data{$pro}{'longname'};

        # --addquota
        if ($data{$pro}{'addquota'} eq "quota"){
            $command = $command." --addquota ---";
        } else {
            $command = $command." --addquota ".$data{$pro}{'addquota'};
        }

        # --status
        $command = $command." --status ".$data{$pro}{'sophomorixstatus'};
        # --creationdate
        my $creationdate=&convert_date($data{$pro}{'creationdate'});
        $command = $command." --creationdate ".$creationdate;

        # --admins
        $command = $command." --admins ".$data{$pro}{'admins'};
        # --members
        $command = $command." --members ".$data{$pro}{'members'};

        my @membergroups=split(/,/,$data{$pro}{'membergroups'});
        my @memberprojects=split(/,/,$data{$pro}{'memberprojects'});
        my @all=(@membergroups,@memberprojects);

        my $all="\"\"";
        if ($#all >= 0){
            $all = join(",",@all);
        }
  
        # --membergroups
        $command = $command." --membergroups ".$all;

        # print the command
        my $substr_command=substr($command,0,65);
        if($Conf::log_level>=2){
            # full multiline command
            print "  $command\n";
        } else {
            # truncated command
            print "  $substr_command ...\n";
        }
        print PROSCRIPT "$command\n";
    }
    close(PRO);
    close(PROSCRIPT);
    system("chmod 755 $project_script_output");
}




# --verify-uid
if ($verify_uid==1){
    print "Verifying if uidNumbers are correct (using command: id)\n";
    my @loglines=();
    my %uid_seen=();
    my ($ldap,$root_dse) = &AD_bind_admin();
    my $lines=0;
    my $errors=0;
    open(MEMBER,"<$class_adminadd_script_input") || die "ERROR: $!";
    while (<MEMBER>){
        my $line=$_;
        chomp();
        my ($user,$uidnumber,$gecos,$adminclass,,$status,$group,$gidnumber)=split(/\|/,$line);
        $user=~s/^\s+//g;# remove leading whitespace
        $user=~s/\s+$//g;# remove trailing whitespace
        $uidnumber=~s/^\s+//g;# remove leading whitespace
        $uidnumber=~s/\s+$//g;# remove trailing whitespace
        $gecos=~s/^\s+//g;# remove leading whitespace
        $gecos=~s/\s+$//g;# remove trailing whitespace
        $group=~s/^\s+//g;# remove leading whitespace
        $group=~s/\s+$//g;# remove trailing whitespace
        $gidnumber=~s/^\s+//g;# remove leading whitespace
        $gidnumber=~s/\s+$//g;# remove trailing whitespace

        if ($lines==0 or
            $gecos eq "Computer" or 
            $gecos eq "ExamAccount" or
            $user eq "wwwadmin" or
            $user eq "pgmadmin" or
            $user eq "domadmin" or
            $user eq "NextFreeUnixId" or
            $user eq "administrator"){
                print "Skipping $user\n";
                # header is line 0, add to counter to avoid loop
                if ($lines==0){
                    $lines=1;
                }
                next;
        }

        #system("id $user > /dev/null");

        # testing user -> uidNumber
        if (not exists $uid_seen{$uidnumber}){
            print "$lines) Testing user $user($uidnumber) in group $group($gidnumber)\n";
            $uid_seen{$uidnumber}="seen";
            $lines++;

            my $uid_full_sys = getpwuid($uidnumber);
            my ($string,$uid_sys)=split(/\\/,$uid_full_sys);
            if ($uid_sys eq $user){
                print "   OK: uidNumber $uidnumber is user $uid_sys\n";
            } else {
                $errors++;
                print "   ERROR: $uidnumber and $user\n";
                push @loglines, 
                  "user $user and uidNumber $uidnumber with problems (check with: # id $user)\n";
            }
        } 
    }
    print "\n$errors ERRORS:\n";
    foreach my $line (@loglines){
        print "  * $line";
    }
}




# --verify-gid
if ($verify_gid==1){
    print "Verifying if gidNumbers are correct (using command: id)\n";
    my @loglines=();
    my %gid_seen=();
    my ($ldap,$root_dse) = &AD_bind_admin();
    my $lines=0;
    my $errors=0;
    open(MEMBER,"<$class_adminadd_script_input") || die "ERROR: $!";
    while (<MEMBER>){
        my $line=$_;
        chomp();
        my ($user,$uidnumber,$gecos,$adminclass,,$status,$group,$gidnumber)=split(/\|/,$line);
        $user=~s/^\s+//g;# remove leading whitespace
        $user=~s/\s+$//g;# remove trailing whitespace
        $uidnumber=~s/^\s+//g;# remove leading whitespace
        $uidnumber=~s/\s+$//g;# remove trailing whitespace
        $gecos=~s/^\s+//g;# remove leading whitespace
        $gecos=~s/\s+$//g;# remove trailing whitespace
        $group=~s/^\s+//g;# remove leading whitespace
        $group=~s/\s+$//g;# remove trailing whitespace
        $gidnumber=~s/^\s+//g;# remove leading whitespace
        $gidnumber=~s/\s+$//g;# remove trailing whitespace

        if ($lines==0 or
            $gecos eq "Computer" or 
            $gecos eq "ExamAccount" or
            $user eq "wwwadmin" or
            $user eq "pgmadmin" or
            $user eq "domadmin" or
            $user eq "NextFreeUnixId" or
            $user eq "administrator"){
                print "Skipping $user\n";
                # header is line 0, add to counter to avoid loop
                if ($lines==0){
                    $lines=1;
                }
                next;
        }

        #system("id $user > /dev/null");
        # testing primary group -> gidNumber
        if (not exists $gid_seen{$gidnumber}){
            print "$lines) Testing group $group($gidnumber)\n";
            $gid_seen{$gidnumber}="seen";
            $lines++;

            my $printout =`wbinfo --gid-info $gidnumber` ;
            my ($gid_full_sys,@rest)=split(/:/,$printout);
            my ($string,$gid_sys)=split(/\\/,$gid_full_sys);
            print "GID: $gid_full_sys $gid_sys     $gidnumber\n";
            if ($gid_sys eq $group){
                print "   OK: gidNumber $gidnumber is group $gid_sys (check with: # wbinfo --gid-info $gidnumber )\n";
            } else {
                $errors++;
                print "ERROR: $gidnumber and $group\n";
                push @loglines, 
                  "group $group and gidNumber $gidnumber with problems (check with: # wbinfo --gid-info $gidnumber)\n";
            }
        }

    }
    print "\n$errors ERRORS:\n";
    foreach my $line (@loglines){
        print "  * $line";
    }
}










#my ($ldap,$root_dse) = &AD_bind_admin();
#&AD_unbind_admin($ldap);

&log_script_end(@arguments);



sub convert_date {
    my ($olddate) = @_;
    my ($date,$time)=split(/ /,$olddate);

    if (not defined $time){
        $time="00:00:00";
    }
    if ($time eq ""){
        $time="00:00:00";
    }
    my ($year,$month,$day)=split(/-/,$date);
    my ($hour,$minute,$second)=split(/:/,$time);
    my $newdate=$year.$month.$day.$hour.$minute.$second.".0Z";
    return $newdate;
}

sub read_classes_map {
    my %classes_map=();
    open(MAP,"<$classes_map") || die "ERROR: $!";
    while(<MAP>){
        my $line=$_;
        my ($old,$new)=split(/::/,$line);
        $classes_map{$old}=$new;
    }
    return %classes_map;
}
