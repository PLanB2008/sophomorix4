#!/usr/bin/perl -w
# This script (sophomorix-belwue) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# Bibliotheken
use strict;
#use Quota;
use Getopt::Long;
#use IMAP::Admin;
#use DBI;

use HTML::TableExtract;

use Net::LDAP;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 

my @arguments = @ARGV;

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $ldap_fetch=1;
my $no_ldap_fetch=0;

my $config_file="/etc/sophomorix/belwue-mail/belwue.conf";
my $belwue_downloads="/var/lib/sophomorix/belwue/downloads";
my $belwue_mailboxes="/var/log/sophomorix/belwue.multimailboxes";
my $belwue_maillist="/var/log/sophomorix/belwue.maillists";
my $belwue_aliases="/var/log/sophomorix/belwue.aliases";

system("mkdir -p /var/log/sophomorix"); 

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "verbose|v+" => \$Conf::log_level,
           "info|i" => \$info,
           "no-ldap|noldap" => \$no_ldap_fetch,
          );


# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

if ($no_ldap_fetch==1){
    $ldap_fetch=0;
}

my %config=&read_config($config_file);
my %belwue=();
my @accounts_short=();

my @multi_mailboxes=();
my @aliases=();
my @maillists=();

# calculate connect data
my $base="CN=mail.bszleo.de";
$config{'connect'}{BASE}="CN=".$config{'config'}{'BASE'};
$config{'connect'}{BASESIMPLE}=$config{'config'}{'BASE'};
$config{'connect'}{SCOPE}="sub";
$config{'connect'}{FILTER}="(cn=*)";
$config{'connect'}{HOST}=$config{'config'}{PROTOCOL}."://".
                         $config{'config'}{SERVER}.":".
                         $config{'config'}{PORT};
$config{'connect'}{ADMIN}=$config{'config'}{USER};
$config{'connect'}{PASSWORD}=$config{'config'}{PASSWORD};

#print Dumper(%config);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-belwue

Options
  -h  / --help
  -i  / --info
  -v  / --verbose
  -vv / --verbose --verbose

Please see the sophomorix-belwue(8) man pages for full documentation
');
   print "\n";
   exit;
}



# --info
if ($info==1) {


}

##################################################
# Script starts here
##################################################

if ($ldap_fetch==1){
my ($ldap) = &bind_admin();
my $mesg = $ldap->search(
                   base   => $config{'connect'}{BASE},
                   scope => $config{'connect'}{SCOPE},
                   filter => $config{'connect'}{FILTER},
                        );

    my $max = $mesg->count; 
    my $count = $mesg->count;
    for( my $index = 0 ; $index < $max ; $index++) {
        my $num=$index+1;
        my $entry = $mesg->entry($index);
        my $dn=$entry->dn();
        my $uid=$entry->get_value('uid');
        my $cn=$entry->get_value('cn');
        my $given=$entry->get_value('givenName');
        my $sn=$entry->get_value('sn');
        my $server=$entry->get_value('hostServer');
        my $mail=$entry->get_value('mail');

        if (not defined $given){
            $given="";
        }
        if($Conf::log_level>=2){
	    print "$num) dn: $dn\n";
	    print "   * cn:          $cn\n";
	    print "   * givenName:   $given\n";
	    print "   * hostServer:  $server\n";
	    print "   * mail:        $mail\n";
	    print "   * sn:          $sn\n";
	    print "   * uid:         $uid\n";
            print "\n";
            # ??????????????? maillist or uid
        }

        #$belwue{'ldap'}{$uid}{'CN'}=$cn;
        #$belwue{'ldap'}{$uid}{'givenName'}=$given;
        #$belwue{'ldap'}{$uid}{'hostServer'}=$server;
        #$belwue{'ldap'}{$uid}{'mail'}=$mail;
        #$belwue{'ldap'}{$uid}{'sn'}=$sn;
        #$belwue{'ldap'}{$uid}{'uid'}=$uid;

        $belwue{'objects'}{$uid}{'CN'}=$cn;
        $belwue{'objects'}{$uid}{'givenName'}=$given;
        $belwue{'objects'}{$uid}{'hostServer'}=$server;
        $belwue{'objects'}{$uid}{'mail'}=$mail;
        $belwue{'objects'}{$uid}{'sn'}=$sn;
        $belwue{'objects'}{$uid}{'uid'}=$uid;
    }


&unbind_admin($ldap); 
} else {
    print "\n##### Skipping Connection to belwue ldap address book\n\n";
    #&print_title("Skipping Connection to belwue ldap address book");
}

############################################################
# download 
system("mkdir -p $belwue_downloads");



# object list
my $download_objects_command="wget --http-user=admin ".
       "--http-password=$config{'connect'}{PASSWORD} ".
       "--output-document=$belwue_downloads/objects.html ".
#       "--auth-no-challenge ".
       "https://mbox1.belwue.de:9010/DomainAdmin/$config{'connect'}{BASESIMPLE}/ObjectList.html?domainName=$config{'connect'}{BASESIMPLE}q";

# --output-file=logfile


print "WGET: $download_objects_command\n";
my $return=system($download_objects_command);
print "RET: $return\n";


# maillist members:
# example Netzwerker
# https://mbox1.belwue.de:9010/DomainAdmin/mail.bszleo.de/Subscribers.html?InCluster=1&domainName=mail.bszleo.de&&listName=netzwerker&



# parsing

# file to parse
my $html_doc = "$belwue_downloads/objects.html";
print "\nParsing $html_doc\n\n";

# list of headers
my $table_headers = [ 'Objekt', 'Typ','Speicher','Letzter Zugriff' ];

# constructor
my $table_extract = HTML::TableExtract->new(headers => $table_headers);

$table_extract->parse_file($html_doc);
my ($table) = $table_extract->tables;



foreach my $row ($table->rows) {
    my ($object,$type,$storage,$access)=@$row;
    if (not defined $access){
        $access="never";
    }
    # add to types
    if ($type eq "Mailingliste"){
        $belwue{'maillist'}{$object}=$type;
        push @maillists, $object;
    } elsif ($type eq "Alias"){
        $belwue{'alias'}{$object}=$storage;
        $belwue{'alias_reverse'}{$storage}=$object;
        # aliases are in storage
        $belwue{'objects'}{$storage}{'alias'}=$object;
        push @aliases, $object;

    } elsif ($type eq "Multi-Mailbox"){
        $belwue{'multimailbox'}{$object}{'type'}="Multi-Mailbox";
        $belwue{'multimailbox'}{$object}{'storage'}=$storage;
        $belwue{'multimailbox'}{$object}{'access'}=$access;

        push @multi_mailboxes, $object;
    } else {
        print "Unknown object $type\n";

    }
    #print "LINE: $object,$type,$storage,$access\n";
}

# write data into iles
open (BOX, ">$belwue_mailboxes");
open (ALIAS, ">$belwue_aliases");
open (LIST, ">$belwue_maillist");

@multi_mailboxes = sort @multi_mailboxes;
foreach my $uid (@multi_mailboxes){
    print BOX "$uid\n";
}

@maillists = sort @maillists;
foreach my $list (@maillists){
    print LIST "$list\n";
}

@aliases = sort @aliases;
foreach my $alias (@aliases){
    print ALIAS "$alias:$belwue{'alias'}{$alias}\n";
}

close(BOX);
close(ALIAS);
close(LIST);

if($Conf::log_level>=2){
    print Dumper(\%belwue);
}






######################################################################
sub bind_admin {
    # check connection 
    if($Conf::log_level>=3){
        print "   Checking Belwue connection ...\n";
    }

    # bind
    if($Conf::log_level>=3){
        print "HOST:  $config{'connect'}{HOST} \n";
        print "ADMIN: $config{'connect'}{ADMIN} \n";
        print "PASS:  $config{'connect'}{PASSWORD}\n";
    }
    my $ldap = Net::LDAP->new($config{'connect'}{HOST});

    my $mesg = $ldap->bind($config{'connect'}{ADMIN}, 
                      password => $config{'connect'}{PASSWORD});
    # show errors from bind
    $mesg->code && die $mesg->error;
    return ($ldap);
}



######################################################################
sub unbind_admin {
    my ($ldap) = @_;
    my $mesg = $ldap->unbind();
    #  show errors from unbind
    $mesg->code && die $mesg->error;
}



######################################################################
# error, when options are not given correctly
sub  check_options{
   my ($parse_ergebnis) = @_;
   if (not $parse_ergebnis==1){
      my @list = split(/\//,$0);
      my $scriptname = pop @list;
      print "\nYou have made a mistake, when specifying options.\n"; 
      print "See error message above. \n\n";
      print "... $scriptname is terminating.\n\n";
      exit;
   } else {
      if($Conf::log_level>=3){
         print "All options  were recognized.\n";
      }
   }
}



######################################################################
sub read_config {
    my %config=();
    my ($file) = @_;
    if (-e $file) {
        open (SECRET, $file);
        while(<SECRET>){
            my ($key,$value)=split(/=/);
            $key=~s/^\s+//g;# remove leading whitespace
            $key=~s/\s+$//g;# remove trailing whitespace
            $value=~s/^\s+//g;# remove leading whitespace
            $value=~s/\s+$//g;# remove trailing whitespace
            $config{'config'}{$key}=$value;
        }
        close(SECRET);
    } else {
        print "Config File $file must be created with:\n";
        print "  PASSWORD=xyz\n";
        print "  USER=admin\@mail.bszleo.de\n";
        print "  SERVER=mbox1.belwue.de\n";
        print "  BASE=mail.bszleo.de\n";
        print "  PORT=636\n";
        print "  PROTOCOL=ldaps\n";
        exit;
    }
    return %config;
}

