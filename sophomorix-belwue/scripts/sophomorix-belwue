#!/usr/bin/perl -w
# This script (sophomorix-belwue) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# Bibliotheken
use strict;
#use Quota;
use Getopt::Long;
#use IMAP::Admin;
#use DBI;
use Net::LDAP;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 

my @arguments = @ARGV;

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;

my $config_file="/etc/sophomorix/belwue.conf";

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
          );


# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

my %config=&read_config($config_file);
my %belwue=();

# calculate connect data
my $base="CN=mail.bszleo.de";
$config{'connect'}{BASE}="CN=".$config{'config'}{'BASE'};
$config{'connect'}{SCOPE}="sub";
$config{'connect'}{FILTER}="(cn=*)";
$config{'connect'}{HOST}=$config{'config'}{PROTOCOL}."://".
                         $config{'config'}{SERVER}.":".
                         $config{'config'}{PORT};
$config{'connect'}{ADMIN}=$config{'config'}{USER};
$config{'connect'}{PASSWORD}=$config{'config'}{PASSWORD};

#print Dumper(%config);

# Reading Configuration
my ($ldap) = &bind_admin();

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-belwue

Options
  -h  / --help
  -i  / --info
  -v  / --verbose
  -vv / --verbose --verbose

Please see the sophomorix-belwue(8) man pages for full documentation
');
   print "\n";
   exit;
}



# --info
if ($info==1) {


}

##################################################
# Script starts here
##################################################

my $mesg = $ldap->search(
                   base   => $config{'connect'}{BASE},
                   scope => $config{'connect'}{SCOPE},
                   filter => $config{'connect'}{FILTER},
                        );

    my $max = $mesg->count; 
    my $count = $mesg->count;
    for( my $index = 0 ; $index < $max ; $index++) {
        my $num=$index+1;
        my $entry = $mesg->entry($index);
        my $dn=$entry->dn();
        my $uid=$entry->get_value('uid');
        my $cn=$entry->get_value('cn');
        my $given=$entry->get_value('givenName');
        my $sn=$entry->get_value('sn');
        my $server=$entry->get_value('hostServer');
        my $mail=$entry->get_value('mail');

        if (not defined $given){
            $given="";
        }
	print "$num) dn: $dn\n";
	print "   * cn:          $cn\n";
	print "   * givenName:   $given\n";
	print "   * hostServer:  $server\n";
	print "   * mail:        $mail\n";
	print "   * sn:          $sn\n";
	print "   * uid:         $uid\n";
        print "\n";
        # ??????????????? maillist or uid

        $belwue{'uid'}{$uid}{'CN'}=$cn;
        $belwue{'uid'}{$uid}{'givenName'}=$given;
        $belwue{'uid'}{$uid}{'hostServer'}=$server;
        $belwue{'uid'}{$uid}{'mail'}=$mail;
        $belwue{'uid'}{$uid}{'sn'}=$sn;
        $belwue{'uid'}{$uid}{'uid'}=$uid;
    }

#print Dumper(\$mesg);
print Dumper(\%belwue);

&unbind_admin($ldap); 






######################################################################
sub bind_admin {
    # check connection 
    if($Conf::log_level>=3){
        print "   Checking Belwue connection ...\n";
    }

    # bind
    if($Conf::log_level>=3){
        print "HOST:  $config{'connect'}{HOST} \n";
        print "ADMIN: $config{'connect'}{ADMIN} \n";
        print "PASS:  $config{'connect'}{PASSWORD}\n";
    }
    my $ldap = Net::LDAP->new($config{'connect'}{HOST});

    my $mesg = $ldap->bind($config{'connect'}{ADMIN}, 
                      password => $config{'connect'}{PASSWORD});
    # show errors from bind
    $mesg->code && die $mesg->error;
    return ($ldap);
}



######################################################################
sub unbind_admin {
    my ($ldap) = @_;
    my $mesg = $ldap->unbind();
    #  show errors from unbind
    $mesg->code && die $mesg->error;
}



######################################################################
# error, when options are not given correctly
sub  check_options{
   my ($parse_ergebnis) = @_;
   if (not $parse_ergebnis==1){
      my @list = split(/\//,$0);
      my $scriptname = pop @list;
      print "\nYou have made a mistake, when specifying options.\n"; 
      print "See error message above. \n\n";
      print "... $scriptname is terminating.\n\n";
      exit;
   } else {
      if($Conf::log_level>=3){
         print "All options  were recognized.\n";
      }
   }
}



######################################################################
sub read_config {
    my %config=();
    my ($file) = @_;
    if (-e $file) {
        open (SECRET, $file);
        while(<SECRET>){
            my ($key,$value)=split(/=/);
            $key=~s/^\s+//g;# remove leading whitespace
            $key=~s/\s+$//g;# remove trailing whitespace
            $value=~s/^\s+//g;# remove leading whitespace
            $value=~s/\s+$//g;# remove trailing whitespace
            $config{'config'}{$key}=$value;
        }
        close(SECRET);
    } else {
        print "Config File $file must be created with:\n";
        print "  PASSWORD=xyz\n";
        print "  USER=admin\@mail.bszleo.de\n";
        print "  SERVER=mbox1.belwue.de\n";
        print "  BASE=mail.bszleo.de\n";
        print "  PORT=636\n";
        print "  PROTOCOL=ldaps\n";
        exit;
    }
    return %config;
}

