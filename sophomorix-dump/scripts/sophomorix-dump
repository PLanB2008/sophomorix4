#!/usr/bin/perl -w
# This script (sophomorix-project) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  jeffbeck@linuxmuster.net



# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
#use Quota;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 

my @arguments = @ARGV;
my @log=();

# ===========================================================================
# config
# ==========================================================================
my $config="/usr/share/sophomorix-dump/config-6-to-7.conf";
my $target_topdir="/root/sophomorix-dump";
my $target_dir="/root/sophomorix-dump/data"; 
my $project_dump="/root/sophomorix-dump.projects";
my $view_dumps_dir = "/root/sophomorix-dump-viewdumps";

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
my $help=0;
my $verbose=0;

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "verbose|v+" => \$verbose,
         );

# Prüfen, ob Optionen erkannt wurden
&check_options($testopt);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print('
sophomorix-dump dumps users, classes, projects and workstations from a linuxmuster.net 6.x server 

Usage:

sophomorix-dump

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose

');
   print "\n";
   exit;
}


if (-e $target_topdir){
    print "\nERROR: The  directory for the dump exists already: $target_topdir\n";
    print "       Please remove $target_topdir for a clean dump\n\n";
    exit;
}

if (-e $project_dump){
    print "\nERROR: The  directory for the project dump exists already: $project_dump\n";
    print "       Please remove $project_dump for a clean dump\n\n";
    exit;
}

if (-e $view_dumps_dir){
    print "\nERROR: The  directory for the view dumps exists already: $view_dumps_dir\n";
    print "       Please remove $view_dumps_dir for a clean dump\n\n";
    exit;
}



############################################################
# dumping data
############################################################                        

print "Starting data dump\n";

# dump postgres database views
system("/usr/sbin/sophomorix-dump-postgres-views.sh $view_dumps_dir");

# dump projects
system("/usr/sbin/sophomorix-project --dump $project_dump");


# copy relevant files from server                                    
&copy_files();



############################################################
# print results
############################################################
print "\n";
print "########### Results of dump ##########\n";
foreach my $line (@log){
    print $line;
}

exit;





############################################################
# subs
############################################################

sub copy_files {
    #system("mkdir -p");
    open(CONFIG,"<$config") || die;
    while(<CONFIG>){
        if(/^\#/){ # # am Anfang bedeutet Kommentarzeile
	    next;
        }
        chomp();
        my ($old_path,$new_path)=split(/::/);
        my $old_path_dump=$target_dir.$old_path;
        print "   * Saving: $old_path\n";
        print "        to : $old_path_dump\n";
        system("install -D   $old_path $old_path_dump");
	if (-f $old_path_dump && -s $old_path_dump){
            print "   * Dump OK: $old_path_dump\n";
            push @log, "    * Dump OK: $old_path_dump\n";
	} else {
            print "ERROR dumping $old_path_dump\n";
            push @log, "ERROR dumping: $old_path_dump\n";
        }
   }
    close(CONFIG);
}

sub  check_options{
   my ($parse_ergebnis) = @_;
   if (not $parse_ergebnis==1){
      my @list = split(/\//,$0);
      my $scriptname = pop @list;
      print "\nYou have made a mistake, when specifying options.\n"; 
      print "See error message above. \n\n";
      print "... $scriptname is terminating.\n\n";
      exit;
   } else {
      if($verbose>=3){
         print "All options  were recognized.\n";
      }
   }
}
