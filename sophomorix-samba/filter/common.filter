#!/usr/bin/perl -w

use Getopt::Long;
Getopt::Long::Configure ("bundling");

############################################################
# Start configure 
############################################################
my $source="---";
my $target="---";
my $filter_only=0;
my $short=0;
my @lines=();

# Parsen der Optionen
my $testopt=GetOptions(
           "filter-only" => \$filter_only,
           "short" => \$short,
          );
if (defined $ARGV[0]){
    $source=$ARGV[0];
}
if (defined $ARGV[1]){
    $target=$ARGV[1];
}

if ($source eq "---"){
    print "\nERROR: No source file given\n\n";
    exit;
}

if ($target eq "---" and $filter_only==0){
    print "\nERROR: You must give a target or the option --filter-only\n";
    print "         --filter-only filters to stdout\n\n";
    exit;

}

if ($filter_only==0){
    print "     * Reading from: $source\n";
    print "     * Filtering to: $target\n";
}


# configuration of filter

&read_lines($source);

&remove_quote();

&pick_line(7,"2015/16"); # use only lines where column 7 is 2015/16

&pick_columns("2,3,4,5,6"), # pick the colums used an reorder them if necessary

&save_lines($target);


############################################################
# subs
############################################################

sub read_lines {
    my ($source)=@_;
    open(SOURCE, "<$source") || die "Error: $! $source not found!";
    while (<SOURCE>){
        chomp();
        push @lines, $_;
	#print "$_\n";
    }
}

sub save_lines {
    my ($target)=@_;
    if ($target ne "---"){
        open(TARGET, ">$target") || die "Error: $! Could not open $target!";
    }
    my $count=0;
    foreach my $line (@lines){
        $count++;
        my $max=$#lines+1;
           if ($filter_only==1){
            if ($short==1){
                if ($count==15){
                    print "------------ lines removed ------------\n";
                } elsif ($count < 15 or $count > $max-15){
                    print "$line\n";
                }
            } else {
                print "$line\n";
            }
        } else {
            print TARGET "$line\n";
        }
        
    }
    if ($target ne "---"){
        close (TARGET);
    }
}



sub remove_quote {
    for(@lines){
        my (@items)=split(/;/);
        foreach my $item (@items){
	    $item=~s/^"//g;
            $item=~s/"$//g;
            $item=~s/^ //g;
            $item=~s/ $//g;
        }
        $_=join(";",@items);

    }
}



sub pick_line {
    my @selected=();
    my ($column,$string)=@_;
    my $index=$column-1;
    foreach my $line (@lines){
        my (@items)=split(/;/,$line);
        if ($items[$index] eq $string){
            push @selected, $line;
        }
        $_=join(";",@items);
    }
    # the selected lines are the new list
    @lines=@selected;
}



sub pick_columns {
    my @ordered=();
    my ($option)=@_;
    my (@order)=split(/,/,$option);
    my %save_by_column=();
    my $new_line="";
    # save line in hash, key is column number
    foreach my $line (@lines){
        %save_by_column=(); # empty
        my $new_line=""; # empty
        my (@items)=split(/;/,$line);
        my $column_count=1;
        foreach my $item (@items){
            $save_by_column{$column_count}=$item;
            $column_count++;
        }
        # reassemble the line
            foreach my $column (@order){
            #print "$column $save_by_column{$column}\n";
            $new_line=$new_line.$save_by_column{$column}.";";
        }
        push @ordered, $new_line;
    }
    # the selected lines are the new list
    @lines=@ordered;
}
