#!/usr/bin/perl -w
# This script (sophomorix-query) is maintained by RÃ¼diger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# modules
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Net::LDAP;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
use JSON;
use Sophomorix::SophomorixBase qw(
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_bind_admin
                                 AD_unbind_admin
                                    );

############################################################
# parsing options
############################################################
my %options=();
$Conf::log_level=1; # remove later
my $testopt=GetOptions(\%options, 
                        "help|h",
                        "json|j+",
                        "verbose|v+",
                        "sam|sAMAccountName=s",
                        "sn=s",
                        "gn|givenName=s",
                        "anyname=s",
                        "student",
                        "teacher",
                        "examuser",
                        "globaladministrator",
                        "schooladministrator",
                        "globalbinduser",
                        "schoolbinduser",
                        "computer",
                        "adminclass",
                        "extraclass",
                        "teacherclass",
                        "class",
                        "project",
                        "sophomorix-group",
                        "room",
                        "schoolbase=s",
                        "user-minimal",
                        "user-basic",
                        "user-full",
                        "group-minimal",
                        "group-basic",
                        "group-full",
                        "group-members",
                        "comp-minimal",
                        "comp-basic",
                        "comp-full",
    );



if ($testopt==0){
    print "Option Error\n";
    exit;
}



# option calculations
if (defined $options{'class'}){
    # find the group types
    $options{'adminclass'}=1;
    $options{'extraclass'}=1;
    $options{'teacherclass'}=1;
}



# --help
if (defined $options{'help'}) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-query is a performance optimised was to query AD for users, computers and groups.

Searches are case insensitive:
  --sam GasT      will find Gast,GAST, .....

If you use the following wildcardcharacters, put them in quotation marks:
  --sam "g*"       finds all sAMAccountName that beginn with g

Options
  -h  / --help
  -v  / --verbose
  show the search

  -i  / --info
  --filter: show the filter that is used

Search attribute(s) to find a user/group/computer:
(multiple options are connected with & to narrow down the search)
--sam|sAMAccountName <string> 
--sn <string>
--gn|givenName  <string>
# Later
--anyname <string>      (All important name fields: sAMAccountName,sn,givenName, ...)

Limit the query for sophomorix users to a certain sophomorixRole:
(multiple options are connected with | to accumulate the results)
--student               (sophomorixRole=student)
--teacher               (sophomorixRole=teacher)
--examuser              (sophomorixRole=examuser)
--globaladministrator   (sophomorixRole=globaladministrator)
--schooladministrator   (sophomorixRole=schooladministrator)
--globalbinduser        (sophomorixRole=globalbinduser)
--schoolbinduser        (sophomorixRole=schoolbinduser)
--computer              (sophomorixRole=computer)

Limit the query for sophomorix groups to a certain sophomorixType:
(multiple options are connected with | to accumulate the results)
--adminclass          (sophomorixType=adminclass)
--extraclass          (sophomorixType=extraclass)
--teacherclass        (sophomorixType=teacherclass)
--class               (| (sophomorixType=adminclass)(sophomorixType=extraclass)(sophomorixType=teacherclass) )
--project             (sophomorixType=project)
--sophomorix-group    (sophomorixType=sophomorix-group)
--room                (sophomorixType=room)

Performance improvements:

Limit the searchbase (this is faster):
--schoolbase <school> (limit the searchbase to one school or global)
  # maybe later:
  --sub-projectbase (only works together with schoolbase)

What user attributes to return:
--user-minimal    (i. e. for dropdown menues)
--user-basic      (default)
--user-full       (all attributes)

What group attributes to return:
--group-minimal      (i. e. for dropdown menues)
--group-basic        (default)
--group-full         (all attributes)
--group-members      (add members if object is a group)

What computer attributes to return:
--comp-minimal    (i. e. for dropdown menues)
--comp-basic      (default)
--comp-full       (all useful attributes)

Examples:
  Search for all objects where the sAMAccountName begins with the letter j:
  sophomorix-query --sam "j*"

  Search for all adminclasses and extraclassses of a school for dropdown menue:
  sophomorix-query --schoolbase <school> --extraclass --adminclass --group-minimal

  Search for all users (with data for listing) in a group with the name <7a>:
  sophomorix-query --schoolbase <school> --sam 7a --class --group-minimal --group-members --user-full

Please see the sophomorix-query(8) man pages for full documentation
');
   print "\n";
   exit;
}


my ($ldap,$root_dse) = &AD_bind_admin();

############################################################

my $single_attrs;
my $multi_attrs;
my $query_attrs;

my $objectclass_filter="";

my $top_key;
my $top_count_key;

my $attr_filter="";
my $role_filter="";
my $type_filter="";

# the search parameters
my $filter;
my $base;
my $scope="sub";
my $search_object="all"; # all is the default if nothing is specified

# the search results, displayed as JSON object
my %search=();
my $max;
my $mesg;

if (not defined $options{'json'}){
    # always use json output
    $options{'json'}=1;
}

############################################################
# set the search base
############################################################
if (defined $options{'schoolbase'}){
    if ($options{'schoolbase'} eq "global"){
        $base="OU=GLOBAL,".$root_dse;
    } else {
        $base="OU=".$options{'schoolbase'}.",OU=SCHOOLS,".$root_dse;
    }
} else {
    $base=$root_dse;
}



############################################################
# set the filter: ( & (attr_filter) (role_filter) (type_filter) ) 
############################################################
$filter="(& ";

########################################
# set the attribute search filter
########################################
if (defined $options{'sam'} or 
    defined $options{'sn'} or 
    defined $options{'gn'}){
    ###
    $attr_filter=$attr_filter."(& ";
    if (defined $options{'sam'}){
        $attr_filter=$attr_filter."(sAMAccountName=".$options{'sam'}.")";
    }
    if (defined $options{'sn'}){
        $attr_filter=$attr_filter."(sn=".$options{'sn'}.")";
    }
    if (defined $options{'gn'}){
        $attr_filter=$attr_filter."(givenName=".$options{'gn'}.")";
    }
    $attr_filter=$attr_filter." )";
}

########################################
# set the role filter (combined with |)
########################################
if (defined $options{'student'} or 
    defined $options{'teacher'} or 
    defined $options{'examuser'} or 
    defined $options{'globaladministrator'} or 
    defined $options{'schooladministrator'} or 
    defined $options{'globalbinduser'} or 
    defined $options{'schoolbinduser'} or 
    defined $options{'computer'}){
    ###
    $role_filter=$role_filter."(| ";
    if (defined $options{'student'}){
        $role_filter=$role_filter."(sophomorixRole=student)";
        $search_object="user";
    }
    if (defined $options{'teacher'}){
        $role_filter=$role_filter."(sophomorixRole=teacher)";
        $search_object="user";
    }
    if (defined $options{'examuser'}){
        $role_filter=$role_filter."(sophomorixRole=examuser)";
        $search_object="user";
    }
    if (defined $options{'globaladministrator'}){
        $role_filter=$role_filter."(sophomorixRole=globaladministrator)";
        $search_object="user";
    }
    if (defined $options{'schooladministrator'}){
        $role_filter=$role_filter."(sophomorixRole=schooladministrator)";
        $search_object="user";
    }
    if (defined $options{'globalbinduser'}){
        $role_filter=$role_filter."(sophomorixRole=globalbinduser)";
        $search_object="user";
    }
    if (defined $options{'schoolbinduser'}){
        $role_filter=$role_filter."(sophomorixRole=schoolbinduser)";
        $search_object="user";
    }
    if (defined $options{'computer'}){
        $role_filter=$role_filter."(sophomorixRole=computer)";
        $search_object="computer";
    }
    $role_filter=$role_filter." )";
}


########################################
# set the type filter (combined with |)
########################################
if (defined $options{'adminclass'} or 
    defined $options{'extraclass'} or 
    defined $options{'teacherclass'} or 
    defined $options{'project'} or 
    defined $options{'sophomorix-group'} or 
    defined $options{'room'}){
     ###
    $type_filter=$type_filter."(| ";
    if (defined $options{'adminclass'}){
        $type_filter=$type_filter."(sophomorixType=adminclass)";
        $search_object="group";
    }
    if (defined $options{'extraclass'}){
        $type_filter=$type_filter."(sophomorixType=extraclass)";
        $search_object="group";
    }
    if (defined $options{'teacherclass'}){
        $type_filter=$type_filter."(sophomorixType=)";
        $search_object="group";
    }
    if (defined $options{'project'}){
        $type_filter=$type_filter."(sophomorixType=project)";
        $search_object="group";
    }
    if (defined $options{'sophomorix-group'}){
        $type_filter=$type_filter."(sophomorixType=sophomorix-group)";
        $search_object="group";
    }
    if (defined $options{'room'}){
        $type_filter=$type_filter."(sophomorixType=room)";
        $search_object="room";
    }
    $type_filter=$type_filter." )";
}



############################################################
# user attributes to display
############################################################
### default user attrs
my $single_user_attrs=[
      'sAMAccountName',
      'sophomorixRole',
    ];
my $multi_user_attrs=[
      'sophomorixQuota',
      'objectclass',
    ];
### override the user defaults
if (defined $options{'user-minimal'}){
    $single_user_attrs=[
            'sAMAccountName',
    ];
    $multi_user_attrs=[
    ];
} elsif (defined $options{'user-basic'}){
    # change nothing, use the default
} elsif (defined $options{'user-full'}){
    $single_user_attrs=[
        'sAMAccountName',
        'displayName',
        'sn',
        'givenName',
        'sophomorixFirstnameASCII',
        'sophomorixSurnameASCII',
        'sophomorixBirthdate',
        'sophomorixUnid',
        'sophomorixAdminClass',
        'sophomorixExitAdminClass',
        'sophomorixSchoolname',
        'sophomorixAdminFile',
        'sophomorixComment',
        'sophomorixFirstPassword',
        'sophomorixExamMode',
        'sophomorixRole',
        'sophomorixStatus',
        'sophomorixCreationDate',
        'sophomorixTolerationDate',
        'sophomorixDeactivationDate',
        'mail',
        'sophomorixMailQuota',
        'sophomorixMailQuotaCalculated',
        'userAccountControl',
    ];
    $multi_user_attrs=[
      'sophomorixQuota',
      'sophomorixWebuiPermissionsCalculated',
    ];
}



############################################################
# computer attributes to display
############################################################
### default computer attrs
my $single_comp_attrs=[
      'sAMAccountName',
      'sophomorixRole',
    ];
my $multi_comp_attrs=[
    ];
### override the computer defaults
if (defined $options{'comp-minimal'}){
    $single_comp_attrs=[
            'sAMAccountName',
    ];
    $multi_comp_attrs=[
    ];
} elsif (defined $options{'comp-basic'}){
    # change nothing, use the default
} elsif (defined $options{'comp-full'}){
    $single_comp_attrs=[
        'sAMAccountName',
        'sophomorixRole',
        'sn',
        'name',
        'displayName',
        'dNSHostName',
        'sophomorixAdminClass',
        'sophomorixAdminFile',
        'sophomorixCreationDate',
        'sophomorixDnsNodename',
        'sophomorixSchoolname',
        'sophomorixStatus',
        'userAccountControl',
    ];
    $multi_comp_attrs=[
      'memberOf',
    ];
}


############################################################
# group attributes to display
############################################################
### default group attrs
my $single_group_attrs=[
      'sAMAccountName',
      'sophomorixType',
    ];
my $multi_group_attrs=[
      'sophomorixQuota',
    ];
### override the group defaults
if (defined $options{'group-minimal'}){
    $single_group_attrs=[
            'sAMAccountName',
    ];
    $multi_group_attrs=[
    ];
} elsif (defined $options{'group-basic'}){
    # change nothing, use the default
} elsif (defined $options{'group-full'}){
    $single_group_attrs=[
        'sAMAccountName',
        'cn',
        'name',
        'description',
        'gidNumber',
        'sophomorixCreationDate',
        'sophomorixHidden',
        'sophomorixJoinable',
        'sophomorixMaxMembers',
        'sophomorixStatus',
        'sophomorixType',
        'mail',
        'sophomorixMailQuota',
        'sophomorixAddMailQuota',
        'sophomorixMailAlias',
        'sophomorixMailList',
        'sophomorixMailList',
        'sophomorixSchoolname',
    ];
    $multi_group_attrs=[
      'sophomorixQuota',
      'sophomorixAddQuota',
      'sophomorixAdmins',
      'sophomorixMembers',
      'sophomorixAdminGroups',
      'sophomorixMemberGroups',
    ];
}

# add the member attribute, if option is given
if (defined $options{'group-members'}){
    push @{ $multi_group_attrs },"member";
}



############################################################
# find out which objectclass to search for
############################################################
($top_key,
 $top_count_key,
 $objectclass_filter,
 $single_attrs,
 $multi_attrs)=&setup_json_return($search_object);



############################################################
# combine the search filters
############################################################
$filter="(& ".
        "".$objectclass_filter."".
        "".$attr_filter."".
        "".$role_filter."".
        "".$type_filter."".
        " )";



############################################################
# combine the attribute lists
############################################################
@{ $query_attrs }=(@{ $single_attrs },@{ $multi_attrs });



############################################################
# do the search
############################################################
# search for the object
if ($search_object eq "all"){
    $mesg = $ldap->search(
                   base   => $base,
                   scope => $scope,
                   filter => $filter,
                  # attrs => $query_attrs, # query all attributes
                  );
} else {
    $mesg = $ldap->search(
                   base   => $base,
                   scope => $scope,
                   filter => $filter,
                   attrs => $query_attrs,
                  );
}


# display debugging info
if (defined $options{'verbose'} and $options{'verbose'}==1){
    print "\n";
    print "Option hash:\n";
    print Dumper (\%options);
    print "\n";
    print "Search parameters:\n";
    print "  BASE:       $base\n";
    print "  SCOPE:      $scope\n";
    print "  FILTER:     $filter\n";
    print "  SEARCH FOR: $search_object\n";
    print "  ATTRIBUTES:";
    if ($search_object eq "all"){
        print " ALL attributes\n";
    } else {
        print "\n";
        foreach my $attr (@{ $single_attrs }){
            print "     * $attr (singlevalue)\n";
        }
        foreach my $attr (@{ $multi_attrs }){
            print "     * $attr (multivalue)\n";
        }
    }
    print "\n";
}

# go through results
$max = $mesg->count; 
$search{'COUNTERS'}{$top_count_key}=$max; 
for( my $index = 0 ; $index < $max ; $index++) {
    my $entry = $mesg->entry($index);
    my $dn = $entry->dn();
    my $sam=$entry->get_value('sAMAccountName');
    my $search_object_used;
    if ($search_object eq "all"){
        # find out what is searched for
        my @objectclass=$entry->get_value('objectclass');
        foreach my $oc (@objectclass){
            if ($oc eq "user"){
                $search_object_used="user";
                # continue, because it might also be a computer
            } elsif ($oc eq "computer"){
                $search_object_used="computer";
                # that is enough
                last;
            } elsif ($oc eq "group"){
                my $type=$entry->get_value('sophomorixType');
                if ($type eq "room"){
                    $search_object_used="room";
                } else {
                    $search_object_used="group";
                }
            }
        }
        # setup some stuff
        ($top_key,
         $top_count_key,
         $objectclass_filter,
         $single_attrs,
         $multi_attrs)=&setup_json_return($search_object_used);
    } else {
        # use what is searched for
        $search_object_used=$search_object;
    }
    push @{ $search{'LISTS'}{$top_key} }, $sam;
    # read single value attributes into %search 
    foreach my $attribute ( @{ $single_attrs } ){
        $search{$top_key}{$sam}{$attribute}=$entry->get_value($attribute);    
    }
    # read multi value attributes into %search
    foreach my $attribute ( @{ $multi_attrs } ){
        if ($attribute eq "member" or 
            $attribute eq "objectclass"){
            # member is not needed at group, only to find members 
            # objectclass is onlx needed to decide which object has to be displayed
            next;
        }
        @{ $search{$top_key}{$sam}{$attribute} }=$entry->get_value($attribute);
    }

    # if needed: find group members (users/computers)
    my $top_key_members="";
    my $top_count_key_members="";
    my $top_list_key_members="";
    my $filter_append;
    if (defined $options{'group-members'}){
        my @members = $entry->get_value('member');
        # decide if comuters or users are searched
        if ($search_object_used eq "group"){
            $top_key_members="MEMBERS";
            $top_count_key_members="MEMBERCOUNT";
            $top_list_key_members="MEMBERLIST";
            @{ $query_attrs }=(@{ $single_user_attrs },@{ $multi_user_attrs });
            $single_attrs=$single_user_attrs;
            $multi_attrs=$multi_user_attrs;
            $filter_append="";
        } elsif ($search_object_used eq "room"){
            $top_key_members="COMPUTERS";
            $top_count_key_members="COMPUTERCOUNT";
            $top_list_key_members="COMPUTERLIST";
            @{ $query_attrs }=(@{ $single_comp_attrs },@{ $multi_comp_attrs });
            $single_attrs=$single_comp_attrs;
            $multi_attrs=$multi_comp_attrs;
            $filter_append="\$"; # sAMAccountName for computers are ended by $
        } else {
            # searching for something strange
            exit;
        }
        $search{'COUNTERS'}{$top_count_key_members}{$sam}=$#members+1;;
        foreach my $member (@members){
            my ($usersam,@rest)=split(/,/,$member);
            $usersam=~s/^CN=//;
            $search{$top_key_members}{$sam}{$usersam}{'sAMAccountName'}=$usersam;
            push @{ $search{'LISTS'}{$top_list_key_members}{$sam} }, $usersam;
            # query the members
            my $base=$member;
            my $scope="base";
            
            my $filter="(sAMAccountName=".$usersam.$filter_append.")"; # cannot be empty

            if (defined $options{'verbose'} and $options{'verbose'}==1){
                print "\n";
                print "BASE:       $base\n";
                print "SCOPE:      $scope\n";
                print "FILTER:     $filter\n";
            }

            my $mesg = $ldap->search( # perform a search
                              base   => $base,
                              scope => $scope,
                              filter => $filter,
                              attrs => $query_attrs,
                             );
            my $max = $mesg->count;
            # fill the result hash 
            # only none (ipdevice in room) OR one result possible (index=0):
            if ($max==0){
                next;
            } else {
                # the is one result
                my $entry = $mesg->entry(0);
                foreach my $attribute ( @{ $single_attrs } ){
                    $search{$top_key_members}{$sam}{$usersam}{$attribute}=$entry->get_value($attribute);    
                }
                # work on multi value attributes
                foreach my $attribute ( @{ $multi_attrs } ){
                    @{ $search{$top_key_members}{$sam}{$usersam}{$attribute} }=$entry->get_value($attribute);
                }
            }
        }
    }
    
    if (defined $search{'LISTS'}{$top_list_key_members}){
        @{ $search{'LISTS'}{$top_list_key_members}{$sam} } = sort @{ $search{'LISTS'}{$top_list_key_members}{$sam} };
    }
}



if ($#{ $search{'LISTS'}{$top_key} }>1){
    @{ $search{'LISTS'}{$top_key} } = sort @{ $search{'LISTS'}{$top_key} };
}



# print JSON Object
&json_printout($options{'json'},\%search);



# disconnect
&AD_unbind_admin($ldap);


############################################################
# sub
############################################################
sub setup_json_return {
    my ($search_object)=@_;
    if ($search_object eq "user"){
        $top_key="USER";
        $top_count_key="USERCOUNT";
        $objectclass_filter="(objectclass=user)";
        $single_attrs=$single_user_attrs;
        $multi_attrs=$multi_user_attrs;
    } elsif ($search_object eq "group"){
        $top_key="GROUP";
        $top_count_key="GROUPCOUNT";
        $objectclass_filter="(objectclass=group)";
        $single_attrs=$single_group_attrs;
        $multi_attrs=$multi_group_attrs;
    } elsif ($search_object eq "room"){
        $top_key="ROOM";
        $top_count_key="ROOMCOUNT";
        $objectclass_filter="(objectclass=group)";
        $single_attrs=$single_group_attrs;
        $multi_attrs=$multi_group_attrs;
    } elsif ($search_object eq "computer"){
        $top_key="COMPUTER";
        $top_count_key="COMPUTERCOUNT";
        $objectclass_filter="(objectclass=computer)";
        $single_attrs=$single_comp_attrs;
        $multi_attrs=$multi_comp_attrs;
    } elsif ($search_object eq "all"){
        # no objectclass filter
        # this is the default
        $top_key="ALL";
        $top_count_key="ALLCOUNT";
        $objectclass_filter="";
        $single_attrs=[
          'sAMAccountName',
          'sophomorixRole',
          'sophomorixType',
        ];
        $multi_attrs=[
          'objectclass',
        ];
    }
    return ($top_key,$top_count_key,$objectclass_filter,$single_attrs,$multi_attrs);
}


sub json_printout {
    my ($json,$ref_search)=@_;
    if ($json==1){
        # pretty output
        my $json_obj = JSON->new->allow_nonref;
        my $utf8_pretty_printed = $json_obj->pretty->encode( $ref_search );
        print STDERR "$utf8_pretty_printed";
    } elsif ($json==2){
        my $json_obj = JSON->new->allow_nonref;
        my $utf8_json_line   = $json_obj->encode( $ref_search  );
        print STDERR "$utf8_json_line";
    } elsif ($json==3){
        print STDERR Dumper ($ref_search);
    }
}
