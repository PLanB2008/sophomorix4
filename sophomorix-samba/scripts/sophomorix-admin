#!/usr/bin/perl -w
# This script (sophomorix-admin) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);

#use Sophomorix::SophomorixConfig;
#use Sophomorix::SophomorixBase;
#use Sophomorix::SophomorixAPI;
#use Sophomorix::SophomorixPgLdap;
#use DBI;
#use Net::LDAP;
use Net::LDAP;
use JSON;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_amku_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 remove_from_list
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_create
                                 AD_bind_admin
                                 AD_dns_get
                                 AD_get_user
                                 AD_user_kill
                                 AD_unbind_admin
                                 AD_object_search
                                 AD_user_create
                                 AD_group_create
                                 AD_group_kill
                                 AD_group_addmember
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_class_fetch
                                 AD_project_fetch
                                 AD_group_update
                                 AD_project_sync_members
                                 AD_dn_fetch_multivalue
                                 AD_group_list
                                 AD_admin_list
                                 AD_get_passwd
                                 get_forbidden_logins
                                    );
my @arguments = @ARGV;

my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $json=0;
my $create_school_admin="";
my $create_all_admin="";
my $create_global_admin="";
my $school="";
my $password="";
my $kill="";
my $reset_class="";
$Conf::log_level=1;



# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "json|j+" => \$json,
           "verbose|v+" => \$Conf::log_level,
           "create-school-admin=s" => \$create_school_admin,
           "create-all-admin=s" => \$create_all_admin,
           "create-global-admin=s" => \$create_global_admin,
           "school|s=s" => \$school,
           "password=s" => \$password,
           "kill=s" => \$kill,
          );

my %sophomorix_result=&result_sophomorix_init("sophomorix-admin");
# Prüfen, ob Optionen erkannt wurden
&check_options($testopt,\%sophomorix_result,$json);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$json);
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse,\%sophomorix_result);
my ($smb_admin_pass)=&AD_get_passwd($DevelConf::sophomorix_file_admin,
                                     $DevelConf::secret_file_sophomorix_file_admin);


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print('
sophomorix-admin adds admins

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info

# create a powerful global-admin (for linuxmuster-base):
sophomorix-admin --create-global-admin <name-of-admin> --password <fdrTfdtti>

# create a hierarchical all-admin 
sophomorix-admin --create-all-admin <name-of-admin> --password <fdrTfdtti>

# create an school-admin
sophomorix-admin --create-school-admin <name-of-admin> --school global --password <fdrTfdtti>

# kill an administrator created by sophomorix
sophomorix-admin --kill <name-of-admin>

Please see the sophomorix--admin(8) man pages for full documentation
');
   print "\n";
   exit;
}



# --info
if ($info==1){
    &AD_admin_list($ldap,$root_dse,\%sophomorix_config);
}


&result_sophomorix_check_exit(\%sophomorix_result,$json);
# ===========================================================================
# Start
# ===========================================================================
&log_script_start(\@arguments,\%sophomorix_result);

############################################################
# Test if options are mixed correctly
############################################################
# avoid double create
my $create_count=0;

# --create-school-admin
if ($create_school_admin ne ""){
    $create_count++;
    my ($count,$dn,$rdn)=&AD_object_search($ldap,$root_dse,"all",$create_school_admin);
    if ($count==0){
        # ok
    } else {
        print "\nERROR: Object $create_school_admin exists already in AD\n\n";
        exit;
    }
    if ($school eq ""){
        print "\nERROR: Option --school is needed with option --create-school-admin\n\n";
        exit;
    }
}

# --create-all-admin
if ($create_all_admin ne ""){
    $create_count++;
    my ($count,$dn,$rdn)=&AD_object_search($ldap,$root_dse,"all",$create_all_admin);
    if ($count==0){
        # ok
    } else {
        print "\nERROR: Object $create_all_admin exists already in AD\n\n";
        exit;
    }
    if ($school ne ""){
        print "\nERROR: Option --school is useless with option --create-all-admin\n\n";
        exit;
    }
}

# --create-global-admin
if ($create_global_admin ne ""){
    $create_count++;
    my ($count,$dn,$rdn)=&AD_object_search($ldap,$root_dse,"all",$create_global_admin);
    if ($count==0){
        # ok
    } else {
        print "\nERROR: Object $create_global_admin exists already in AD\n\n";
        exit;
    }
    if ($school ne ""){
        print "\nERROR: Option --school is useless with option --create-global-admin\n\n";
        exit;
    }
}

if ($create_count>1){
        print "\nERROR: You can only use one --create* option at a time\n\n";
        exit;

}

############################################################
# Options do it
############################################################
# --create-all-admin <user>
if ($create_all_admin ne "" and $password ne ""){
    my $group=$sophomorix_config{'INI'}{'administrator.all'}{'GROUPPREFIX'}.
       $sophomorix_config{'INI'}{'administrator.all'}{'GROUPBASENAME'};
    &print_title("Creating admin $create_all_admin in group $group $sophomorix_config{'INI'}{'GLOBAL'}{'SCHOOLNAME'}");
    &AD_school_create({ldap=>$ldap,
                       root_dse=>$root_dse,
                       root_dns=>$root_dns,
                       school=>$DevelConf::name_default_school,
                       creationdate=>$time_stamp_AD,
                       smb_admin_pass=>$smb_admin_pass,
                       sophomorix_config=>\%sophomorix_config,
                     });
    &AD_user_create({ldap=>$ldap,
                    root_dse => $root_dse, 
                    root_dns => $root_dns, 
                    user_count => "1",
                    login => $create_all_admin,
                    group => $group,
                    group_basename => $group,
                    firstname_ascii => $sophomorix_config{'INI'}{'administrator.all'}{'DEFAULT_givenName_ASCII'},
                    surname_ascii => $sophomorix_config{'INI'}{'administrator.all'}{'DEFAULT_sn_ASCII'},
                    firstname_utf8 => $sophomorix_config{'INI'}{'administrator.all'}{'DEFAULT_givenName'},
                    surname_utf8 => $sophomorix_config{'INI'}{'administrator.all'}{'DEFAULT_sn'},
                    birthdate => "---",
                    plain_password => $password,
                    unid => "---",
                    role => $sophomorix_config{'INI'}{'administrator.all'}{'USER_ROLE'},
                    type => "sophomorixalladmin",
                    school => $sophomorix_config{'INI'}{'GLOBAL'}{'SCHOOLNAME'},
                    creationdate => $time_stamp_AD,
                    tolerationdate => "---",
                    deactivationdate => "---",
                    status => "P",
                    file => "no file",
                    smb_admin_pass=>$smb_admin_pass,
                    sophomorix_config=>\%sophomorix_config,
                  });
} elsif ($create_all_admin ne "" and  $password eq ""){
    print "\nERROR: A password is needed to create the admin $create_all_admin\n\n";
    exit;
} 



# --create-school-admin <user>
if ($create_school_admin ne "" and $school ne "" and $password ne ""){
    # test if school exists
    if (exists $sophomorix_config{'SCHOOLS'}{$school}){
        # is ok
    } else {
        print "\nERROR: School $school is not a valid school for a school-admin on this server\n\n";
        &print_valid_schools;
        exit;
    }

    my $group_token;
    if ($school eq $DevelConf::name_default_school){
        $group_token=$sophomorix_config{'INI'}{'administrator.all'}{'GROUPBASENAME'};
    } else {
        $group_token=$school."-".
	             $sophomorix_config{'INI'}{'administrator.all'}{'GROUPBASENAME'};
    }

    # make sure school exists
    &print_title("Creating admin $create_school_admin in school $school");
    &AD_school_create({ldap=>$ldap,
                       root_dse=>$root_dse,
                       root_dns=>$root_dns,
                       school=>$school,
                       creationdate=>$time_stamp_AD,
                       smb_admin_pass=>$smb_admin_pass,
                       sophomorix_config=>\%sophomorix_config,
                     });

    &AD_user_create({ldap=>$ldap,
                    root_dse => $root_dse, 
                    root_dns => $root_dns, 
                    user_count => "1",
                    login => $create_school_admin,
                    group => $group_token,
                    group_basename => $sophomorix_config{'INI'}{'administrator.school'}{'GROUPBASENAME'},
                    firstname_ascii => $school,
                    surname_ascii => $sophomorix_config{'INI'}{'administrator.school'}{'DEFAULT_sn_ASCII'},
                    firstname_utf8 => $school,
                    surname_utf8 => $sophomorix_config{'INI'}{'administrator.school'}{'DEFAULT_sn'},
                    birthdate => "---",
                    plain_password => $password,
                    unid => "---",
                    role => $sophomorix_config{'INI'}{'administrator.school'}{'USER_ROLE'},
                    type => "sophomorixadmin",
                    school => $school,
                    creationdate => $time_stamp_AD,
                    tolerationdate => "---",
                    deactivationdate => "---",
                    status => "P",
                    file => "no file",
                    smb_admin_pass=>$smb_admin_pass,
                    sophomorix_config=>\%sophomorix_config,
                  });

} elsif ($create_school_admin ne "" and ($school eq "" or $password eq "")){
    print "\nERROR: A password is needed to create the admin $create_school_admin\n\n";
    exit;
} 



# --create-global-admin <user>
if ($create_global_admin ne "" and $password ne ""){
    $school=$sophomorix_config{'INI'}{'GLOBAL'}{'SCHOOLNAME'};
    my $group_token=$sophomorix_config{'INI'}{'administrator.global'}{'GROUPPREFIX'}.
	             $sophomorix_config{'INI'}{'administrator.global'}{'GROUPBASENAME'};
    &print_title("Creating admin $create_global_admin in school $school");
    &AD_school_create({ldap=>$ldap,
                       root_dse=>$root_dse,
                       root_dns=>$root_dns,
                       school=>$DevelConf::name_default_school,
                       creationdate=>$time_stamp_AD,
                       smb_admin_pass=>$smb_admin_pass,
                       sophomorix_config=>\%sophomorix_config,
                     });

    &AD_user_create({ldap=>$ldap,
                    root_dse => $root_dse, 
                    root_dns => $root_dns, 
                    user_count => "1",
                    login => $create_global_admin,
                    group => $group_token,
                    group_basename => $sophomorix_config{'INI'}{'administrator.global'}{'GROUPBASENAME'},
                    firstname_ascii => $sophomorix_config{'INI'}{'administrator.global'}{'DEFAULT_givenName_ASCII'},
                    surname_ascii => $sophomorix_config{'INI'}{'administrator.global'}{'DEFAULT_sn_ASCII'},
                    firstname_utf8 => $sophomorix_config{'INI'}{'administrator.global'}{'DEFAULT_givenName'},
                    surname_utf8 => $sophomorix_config{'INI'}{'administrator.global'}{'DEFAULT_sn'},
                    birthdate => "---",
                    plain_password => $password,
                    unid => "---",
                    role => $sophomorix_config{'INI'}{'administrator.global'}{'USER_ROLE'},
                    type => "sophomorixadmin",
                    school => $school,
                    creationdate => $time_stamp_AD,
                    tolerationdate => "---",
                    deactivationdate => "---",
                    status => "P",
                    file => "no file",
                    smb_admin_pass=>$smb_admin_pass,
                    sophomorix_config=>\%sophomorix_config,
                  });

} elsif ($create_global_admin ne "" and $password eq ""){
    print "\nERROR: A password is needed to create the admin $create_global_admin\n\n";
    exit;
} 



# --kill <user>
if ($kill ne ""){
    # make sure it exists and is an administrator created by sophomorix
    my ($firstname,$lastname,$adminclass,$existing,$exammode,$role,$home_directory)=
    &AD_get_user({ldap=>$ldap,
                  root_dse=>$root_dse,
                  root_dns=>$root_dns,
                  user=>$kill,
                });

    if ($existing eq "FALSE"){
        print "\nERROR: User $kill does not exist\n\n";
        exit;
    }
    if ($role eq $sophomorix_config{'INI'}{'administrator.global'}{'USER_ROLE'} or
        $role eq $sophomorix_config{'INI'}{'administrator.all'}{'USER_ROLE'} or
        $role eq $sophomorix_config{'INI'}{'administrator.school'}{'USER_ROLE'}){
        &AD_user_kill({ldap=>$ldap,
                       root_dse=>$root_dse,
                       root_dns=>$root_dns,
                       login=>$kill,
                       user_count=>"0",
                       smb_admin_pass=>$smb_admin_pass,
                       sophomorix_config=>\%sophomorix_config,
                     });
    } else {
        print "\nERROR: User $kill is not an administrator created by sophomorix\n\n";
        exit;
    }
}


&AD_unbind_admin($ldap);
&log_script_end(\@arguments,\%sophomorix_result,$json);
############################################################
# End
############################################################



############################################################
# subs
############################################################
sub print_valid_schools{
    my @list=();
    foreach my $key (keys %{$sophomorix_config{'SCHOOLS'}}) {
	push @list, $key;
    }
    @list=sort @list;
    push @list, "global";
    print "   * Valid schools on are:\n";
    foreach my $file (@list){
        print "      * $file\n";
    }
}
