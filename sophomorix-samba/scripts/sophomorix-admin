#!/usr/bin/perl -w
# This script (sophomorix-admin) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# ===========================================================================
# Bibliotheken
# ===========================================================================
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);

#use Sophomorix::SophomorixConfig;
#use Sophomorix::SophomorixBase;
#use Sophomorix::SophomorixAPI;
#use Sophomorix::SophomorixPgLdap;
#use DBI;
#use Net::LDAP;
use Net::LDAP;
use JSON;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_amku_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 remove_from_list
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_create
                                 AD_bind_admin
                                 AD_dns_get
                                 AD_get_user
                                 AD_user_kill
                                 AD_unbind_admin
                                 AD_object_search
                                 AD_user_create
                                 AD_group_create
                                 AD_group_kill
                                 AD_group_addmember
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_class_fetch
                                 AD_project_fetch
                                 AD_group_update
                                 AD_project_sync_members
                                 AD_dn_fetch_multivalue
                                 AD_group_list
                                 AD_admin_list
                                 AD_get_passwd
                                 get_forbidden_logins
                                    );
my @arguments = @ARGV;

my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $json=0;
my $create="";
my $school="";
my $password="";
my $kill="";
my $reset_class="";
$Conf::log_level=1;



# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "json|j+" => \$json,
           "verbose|v+" => \$Conf::log_level,
           "create|c=s" => \$create,
           "school|s=s" => \$school,
           "password=s" => \$password,
           "kill=s" => \$kill,
          );

my %sophomorix_result=&result_sophomorix_init("sophomorix-admin");
# Prüfen, ob Optionen erkannt wurden
&check_options($testopt,\%sophomorix_result,$json);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$json);
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse,\%sophomorix_result);
my ($smb_admin_pass)=&AD_get_passwd($DevelConf::sophomorix_file_admin,
                                     $DevelConf::secret_file_sophomorix_file_admin);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print('
sophomorix-admin adds admins to the admin managementgroups

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info

# create an global-admin (for linuxmuster-base):
sophomorix-admin --create global-admin --school global --password <fdrTfdtti>

# create an all-admin 
sophomorix-admin --create all-admin --school global --password <fdrTfdtti>

# create another global-admin
sophomorix-admin --create <name-of-admin> --school global --password <fdrTfdtti>

# kill an administrator created by sophomorix
sophomorix-admin --kill <name-of-admin>

Please see the sophomorix--admin(8) man pages for full documentation
');
   print "\n";
   exit;
}


############################################################
# config values
############################################################

# --info
if ($info==1){
    &AD_admin_list($ldap,$root_dse);
}


&result_sophomorix_check_exit(\%sophomorix_result,$json);
# ===========================================================================
# Programmbeginn
# ===========================================================================
&log_script_start(\@arguments,\%sophomorix_result);


# exit if the user exists already
my ($count,$dn,$rdn)=&AD_object_search($ldap,$root_dse,"all",$create);

#my ($count,$dn_class,$cn_exist,$infos)=&AD_object_search($ldap,$root_dse,"group","m7ab");
#print "DN=$dn_class\n";
if ($count==0){
    # ok
} else {
    print "\nERROR: Object $create exists already in AD\n\n";
    exit;
}


# --create <user>
if ($create ne "" and $school ne "" and $password ne ""){
    # test if school exists
    if ($school eq "global"){
        # is ok
    } elsif (exists $sophomorix_config{'SCHOOLS'}{$school}){
        # is ok
    } else {
        print "\nERROR: School $school is not a valid school on this server\n\n";
        &print_valid_schools;
        exit;
    }

    my $group_token;
    if ($school eq $DevelConf::name_default_school){
        $group_token=$sophomorix_config{'INI'}{'administrator.global'}{'GROUPBASENAME'};
    } elsif ($school eq "global"){ 
        $group_token=$sophomorix_config{'INI'}{'administrator.global'}{'GROUPPREFIX'}.
	             $sophomorix_config{'INI'}{'administrator.global'}{'GROUPBASENAME'};
    } else {
        $group_token=$school."-".
	             $sophomorix_config{'INI'}{'administrator.global'}{'GROUPBASENAME'};
    }

    # make sure school exists
    my $school_provide;
    if ($school eq "global"){
        $school_provide=$DevelConf::name_default_school;
    } else {
        $school_provide=$school;
    }
    &print_title("Creating admin $create in school $school");
    &AD_school_create({ldap=>$ldap,
                       root_dse=>$root_dse,
                       root_dns=>$root_dns,
                       school=>$school_provide,
                       creationdate=>$time_stamp_AD,
                       smb_admin_pass=>$smb_admin_pass,
                       sophomorix_config=>\%sophomorix_config,
                     });
    my $sn="Admin";
    my $given_name=$school;
    if ($school eq "global"){
        $given_name="All";
    }
    &AD_user_create({ldap=>$ldap,
                    root_dse => $root_dse, 
                    root_dns => $root_dns, 
                    user_count => "1",
                    login => $create,
                    group => $group_token,
                    group_basename => $sophomorix_config{'INI'}{'administrator.global'}{'GROUPBASENAME'},
                    firstname_ascii => $given_name,
                    surname_ascii => $sn,
                    firstname_utf8 => $given_name,
                    surname_utf8 => $sn,
                    birthdate => "---",
                    plain_password => $password,
                    unid => "---",
                    role => "administrator",
                    type => "sophomorixadmin",
                    school => $school,
                    creationdate => $time_stamp_AD,
                    tolerationdate => "---",
                    deactivationdate => "---",
                    status => "P",
                    file => "no file",
                    smb_admin_pass=>$smb_admin_pass,
                    sophomorix_config=>\%sophomorix_config,
                  });

} elsif ($create ne "" and ($school eq "" or $password eq "")){
    print "\nERROR: A school and password is needed to create the admin $create\n\n";
    exit;
} 



# --kill <user>
if ($kill ne ""){
    # make sure it exists and is an administrator created by sophomorix
    my ($firstname,$lastname,$adminclass,$existing,$exammode,$role,$home_directory)=
    &AD_get_user({ldap=>$ldap,
                  root_dse=>$root_dse,
                  root_dns=>$root_dns,
                  user=>$kill,
                });
    if ($existing eq "FALSE"){
        print "\nERROR: User $kill does not exist\n\n";
        exit;
    }
    if ($role eq "administrator"){
        &AD_user_kill({ldap=>$ldap,
                       root_dse=>$root_dse,
                       root_dns=>$root_dns,
                       login=>$kill,
                       user_count=>"0",
                       smb_admin_pass=>$smb_admin_pass,
                     });
    } else {
        print "\nERROR: User $kill is not an administrator created by sophomorix\n\n";
        exit;
    }
}


# ===========================================================================
# Ende des Scripts
# ===========================================================================
&AD_unbind_admin($ldap);
&log_script_end(\@arguments,\%sophomorix_result,$json);

# subs
sub print_valid_schools{
    my @list=();
    foreach my $key (keys %{$sophomorix_config{'SCHOOLS'}}) {
	push @list, $key;
    }
    @list=sort @list;
    push @list, "global";
    print "   * Valid schools on are:\n";
    foreach my $file (@list){
        print "      * $file\n";
    }
}
