#!/usr/bin/perl -w
# This script (sophomorix-add) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# Bibliotheken
use strict;
#use Quota;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);
#use IMAP::Admin;
#use DBI;
use Net::LDAP;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_amku_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_add
                                 AD_bind_admin
                                 AD_dns_get
                                 AD_unbind_admin
                                 AD_user_create
                                 AD_group_create
                                 AD_group_addmember
                                 AD_group_update
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_dn_fetch_multivalue
                                 AD_object_search
                                 get_forbidden_logins
                                    );

my @arguments = @ARGV;

my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();
my $user_count=0;

my $identifier;
my $surname_ascii;
my $firstname_ascii;
my $firstname_utf8;
my $surname_utf8;
my $birthdate;
my $gecos="";
my $login_wish;
my $password_wish;
my $uidnumber_wish;
my $gidnumber_wish;
my $status;
my $creationdate;
my $tolerationdate;
my $deactivationdate;
my $unid;
my $login_teil_1="";
my $login_teil_2="";
my $login_name_to_check="";
my $login_name_to_check_mod="";
my $login_check_ok="";
my $plain_password="";
my $file="";
my $class_group="";
my $school="";
my $role="unknown";

my @loglines=();

my @users_for_quota=();
my %forbidden_login_hash=();

# ou's that have been created in this script
my %school_created=();
$school_created{$school}="created";

my $add_file=${DevelConf::path_result}."/sophomorix.add";
my $add_file_new=${DevelConf::path_result}."/sophomorix.add.new";

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $loginname="";
my $gruppe="";
my $password="";
my $lock=0;
my $unlock=0;


# Parsen der Optionen
my $testopt=GetOptions(
           "users|user|u=s" => \$loginname,
           "class|classes|c=s" => \$gruppe,
           "verbose|v+" => \$Conf::log_level,
           "password" => \$password,
           "info|i" => \$info,
           "lock" => \$lock,
           "unlock" => \$unlock,
           "help|h" => \$help
          );


# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin();
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-add adds users from the file sophomorix.add to the sophomorix 
database and the authentification system.

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  --u user / --users user
  -c class / --class class
  --lock / --unlock

Please see the sophomorix-add(8) man pages for full documentation
');
   print "\n";
   exit;
}


# --unlock
if ($unlock==1) {
    &unlock_sophomorix();
    exit;
}

# --lock
if ($lock==1) {
    &lock_sophomorix("lock",0,@arguments);
    exit;
}





# --info
if ($info==1) {
   my $count=0;
   if (not -e "$add_file"){
       print "$add_file does not exist!\n"; 
       print "Nothing to add: sophomorix.add does not exist!\n"; 
       exit;
   }

   # Ausgabe der Anlegbaren user
   print "\nThe following users can be added:\n";
   print "(Fields with --- are automatically created by sophomorix-add):\n\n";
   printf "%-11s%-29s%-10s%-6s%-6s%-10s%-10s\n",
          "AdminClass",
          "Identifier",
          "login",
          "uid",
          "gid",
          "Old-Pass",
          "unid";

   open(SOPHOMORIXADD,"$add_file") || 
             die "ERROR: sophomorix.add not found!";

   &print_line;
   my @lines=();
   while(<SOPHOMORIXADD>){
       if(/^\#/){ # # am Anfang bedeutet Kommentarzeile
	   next;
       }
       push @lines, $_;
   }
   close(SOPHOMORIXADD);

   my @sorted_lines = sort {
       my @a_fields = split /::/, $a;
       my @aa_fields = split /;/, $a_fields[2];

       my @b_fields = split /::/, $b;
       my @bb_fields = split /;/, $b_fields[2];

       $a_fields[1] cmp $b_fields[1]  # string sort on 1st field, then
         ||
       $aa_fields[2] cmp $bb_fields[2]  # string sort on 2nd field
         ||
       $aa_fields[1] cmp $bb_fields[1]  # string sort on 3rd field
   } @lines;

   foreach my $line (@sorted_lines){
       chomp($line);
       $count++;
       ($file,
       $class_group,
       $identifier,
       $login_wish,
       $password_wish,
       $uidnumber_wish,
       $gidnumber_wish,
       $unid,
       $school,
       $role)=split("::",$line);

       my $group_token=&AD_get_name_tokened($class_group,$school,"adminclass");

       my $identifier_cut=substr($identifier,0,28);
       printf "%-11s%-29s%-10s%-6s%-6s%-10s%-10s\n",
              $group_token,
              $identifier_cut,
              $login_wish,
              $uidnumber_wish, 
	      $gidnumber_wish,
              $password_wish,
              $unid;
   }
   &print_line;
   print "$count users can be added\n";
   exit;
}




# --loginname
if ($loginname ne "") {
  #
  print "Loginname $loginname angegeben.\n";
}

# --gruppe
if ($gruppe ne "") {
  #
  print "Gruppe/Klasse $gruppe angegeben.\n";
}



&log_script_start(@arguments);


################################################################################
# Start
################################################################################
# ===========================================================================
# Abbruch, wenn sophomorix.add fehlt oder leer
# ===========================================================================
if (not (-s "$add_file") ) {
  &log_script_exit("No users to add!",1,1,0,@arguments);
}

my $epoche_jetzt=time;
if($Conf::log_level>=2){
   print "Epoch:                                 ",
         "$epoche_jetzt (right now)\n";
}


#my $dbh=&db_connect();
#my $imap=&imap_connect("localhost",${DevelConf::imap_admin});

################################################################################
# User (Schüler und Lehrer) anlegen aus sophomorix.add
################################################################################

# repair.directories einlesen ???
#&get_alle_verzeichnis_rechte();

# fetch permission for all homes
#&fetch_repairhome();

# backup database
#&backup_user_database($time_stamp_file, "before-add.sql");
# ??????????????????????

# sophomorix.add mitloggen
&backup_amku_file($time_stamp_file,"add","before");

my @passwort_zeichen=&get_passwd_charlist();

# ?????????????? more to forbid
%forbidden_login_hash=&get_forbidden_logins($ldap,$root_dse);



# Datei mit den Schülern, die nicht angelegt wurden
open(STILLTOADD,">$add_file_new") 
    || die "ERROR: $!";
open(SOPHOMORIXADD,"$add_file") 
    || die "ERROR: $!";
while(<SOPHOMORIXADD>){
    if(/^\#/){ # # am Anfang bedeutet Kommentarzeile
        next;
    }

   chomp();
   # split data
   ($file,
    $class_group,
    $identifier,
    $login_wish,
    $password_wish,
    $uidnumber_wish,
    $gidnumber_wish,
    $unid,
    $school,
    $role,
    $surname_utf8,
    $firstname_utf8,
    $status,
    $creationdate,
    $tolerationdate,
    $deactivationdate,
   )=split("::");

   if (not defined $unid){
       $unid="";
   }
   ($surname_ascii,$firstname_ascii,$birthdate)=split(";", $identifier);
   # GECOS-Feld:
   $gecos=$firstname_ascii." ".$surname_ascii; 

   # Falls Wunsch-Login-Namen gegeben, diesen benutzen
   if ($login_wish ne "---"){
    $login_name_to_check="$login_wish";
   } else {
    # Sonst: Login-Name bilden
    # remove - from login
    my $surname_login=$surname_ascii;
    $surname_login=~s/-//g;
    #$surname_login=&recode_to_ascii($surname_login);

    my $firstname_login=$firstname_ascii;
    $firstname_login=~s/-//g;
    #$firstname_login=&recode_to_ascii($firstname_login);

    # firstname+surname oder surname+firstname
    if ($Conf::reverse_loginname_creation eq "yes"){
        $login_teil_2=substr($surname_login,0,$Conf::student_login_surname_charnum);
        $login_teil_1=substr($firstname_login,0,$Conf::student_login_firstname_charnum);
    } else {
        $login_teil_1=substr($surname_login,0,$Conf::student_login_surname_charnum);
        $login_teil_2=substr($firstname_login,0,$Conf::student_login_firstname_charnum);
    }

    # Zu prüfender Loginname
    $login_name_to_check="$login_teil_1"."$login_teil_2";
    $login_name_to_check=~tr/A-Z/a-z/; # in Kleinbuchstaben umwandeln
   }

   # Existenz prüfen ???ldap
   if (not exists($forbidden_login_hash{$login_name_to_check})){
       # Wenn der zu prüfende Login-Name nicht schon vorhanden
       # Kann er benutzt werden 
       $login_check_ok=$login_name_to_check;
   } elsif ($login_wish ne "---"){
       # Wunsch-Login angegeben
       # Abbrechen, Wunsch-Login soll nicht verändert werden
       print "\nERROR:\n";
       print "Cannot add user $firstname_ascii $surname_ascii ($firstname_utf8 $surname_utf8) \n";
       print "Login $login_wish exists already ($forbidden_login_hash{$login_name_to_check})!\n\n";
       my $error_line="   ERROR: $login_wish not added ($forbidden_login_hash{$login_name_to_check})";
       push @loglines,$error_line;
       next;
   } else {
       # Wenn schon vorhanden, muss Login-Namen modifiziert werden
       $login_name_to_check_mod="$login_name_to_check";
       my $i=1; # Erster Wert für Zusatzziffer
       while (exists($forbidden_login_hash{$login_name_to_check_mod})) { 
          # An zu prüfenden Loginame eine Ziffer anhängen
          $login_name_to_check_mod="$login_name_to_check"."$i";
          $i=$i+1;
       }
       # Nun kann modifizierter Loginname benutzt werden
       $login_check_ok=$login_name_to_check_mod;
   }

   # Login-Name des anzulegenden users darf ab jetzt nicht mehr verwendet werden,
   # deshalb dem Hash mit vorhandenen Loginnamen hinzufügen
   $forbidden_login_hash{$login_check_ok}="neu";

   # Klartext-Passwort
   if ($password_wish eq "---") {
       $plain_password=&get_plain_password($role,@passwort_zeichen);
   } else {
       $plain_password=$password_wish;
   }

   # Abbruch, wenn nicht der richtige loginname angelegt wird
   if ($loginname ne "") {
     if ($login_name_to_check ne $loginname) {
        print "##### $login_name_to_check wird nicht angelegt!\n";
        print STILLTOADD "$_\n";
        next;
     }
   }

   # Abbruch, wenn nicht die richtige klasse angelegt wird
   if ($gruppe ne "") {
     if ($class_group ne $gruppe) {
        print "$login_name_to_check ($class_group) wird nicht angelegt!\n";
        print STILLTOADD "$_\n";
        next;
     }
   }

   # Status
   if ($status eq "---") {
       $status="U";
   }
   # creationdate
   if ($creationdate eq "---"){
       $creationdate=$time_stamp_AD;
   }
   # 0. rember login to set quota later
   push @users_for_quota, $login_check_ok;

   # Nun wird der User angelegt
   ##############################
   $user_count++;

   # --- -> default-school
   $school=&AD_get_schoolname($school);

   # 1. Entry in AD
   if (not exists $school_created{$school}){
        # create ou
        &AD_school_add({ldap=>$ldap,
                        root_dse=>$root_dse,
                        school=>$school,
                        creationdate=>$time_stamp_AD,
                        sophomorix_config=>\%sophomorix_config,
                      });
        # remember ou
        $school_created{$school}="already created";
   } else {
        print "   * OU $school already created\n";
   }
   my $group_token=&AD_get_name_tokened($class_group,$school,"adminclass");
   my $login_token=&AD_get_name_tokened($login_check_ok,$school,$role);

   &AD_user_create({ldap=>$ldap,
                    root_dse=>$root_dse, 
                    root_dns=>$root_dns, 
                    user_count=>$user_count,
                    identifier=>$identifier,
                    login=>$login_token,
                    group=>$group_token,
                    group_basename=>$class_group,
                    firstname_ascii=>$firstname_ascii,
                    surname_ascii=>$surname_ascii,
                    firstname_utf8=>$firstname_utf8,
                    surname_utf8=>$surname_utf8,
                    birthdate=>$birthdate,
                    plain_password=>$plain_password,
                    unid=>$unid,
                    uidnumber_wish=>$uidnumber_wish,
                    gidnumber_wish=>$gidnumber_wish,
                    role=>$role,
                    type=>"adminclass",
                    school=>$school,
                    creationdate=>$creationdate,
                    tolerationdate=>$tolerationdate,
                    deactivationdate=>$deactivationdate,
                    status=>$status,
                    file=>$file,
                  });

   # 1. Entry in sophomorix database and auth system
   #&create_user_db_entry($surname,
   #                      $firstname,
   #                      $birthdate,
   #                      $class_group,
   #                      $login_check_ok,
   #                      $plain_password,
   #                      $shell,
   #                      "",
   #                      $unid,
   #                      $epoche_jetzt,
   #                      $time_stamp_AD,
   #                      "",
   #                      $uidnumber_wish,
   #                      undef,
   #                      undef,
   #                      undef,
   #                      $gidnumber_wish
   #                     );

    # 2. Add the class (db and dirs,links, ...)
    #&provide_class_files($class_group);


  # 3. set a password
  #&set_sophomorix_passwd($login_check_ok,$plain_password);

  # 4. Creating dirs, links for the user
  #&provide_user_files($login_check_ok,$class_group);

  # 5. Add user to all groups she is in (files must exist to create links)
  #&add_newuser_to_her_projects($login_check_ok,$class_group);

  &AD_group_create({ldap=>$ldap,
                    root_dse=>$root_dse,
                    group=>$group_token,
                    group_basename=>$class_group,
                    school=>$school,
                    status=>"P",
                    type=>$sophomorix_config{'FILES'}{'USER_FILE'}{$file}{RT_sophomorixType_PRIMARY},
                    joinable=>"TRUE",
                    description=>$group_token,
                    creationdate=>$time_stamp_AD,
                    gidnumber_wish=>$gidnumber_wish,
                    file=>$file,
                  });


# OLD
#  # add student/teacher to its adminclass-group
#  &AD_group_addmember({ldap => $ldap,
#                       root_dse => $root_dse, 
#                       group => $group_token,
#                       addmember => $login_token,
#                      });   


  # NEW
  # add student/teacher to its adminclass-group
  # find dn of adminclass.group
  my ($count,$dn_class,$cn_exist,$info)=&AD_object_search($ldap,$root_dse,"group",$group_token);
  # fetch old members from sophomorixmembers
  my @old_members = &AD_dn_fetch_multivalue($ldap,$root_dse,$dn_class,"sophomorixMembers");
  # create a unique list of new members
  my @members = uniq(@old_members,$login_token); 
  my $members=join(",",@members);
  # update project
  &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
                      type=>"adminclass",
                      members=>$members,
                  });


#    if ($role eq "student"){
# not necessary ????????
#        my $group_token=&AD_get_name_tokened($DevelConf::student,$school,"adminclass");
#        &AD_group_addmember({ldap => $ldap,
#                             root_dse => $root_dse, 
#                             group => $DevelConf::student,
#                             addgroup => $group_token,
#                           });
        # <student> directly in <token>-students 
        #&AD_group_addmember({ldap => $ldap,
        #                     root_dse => $root_dse, 
        #                     group => $group,
        #                     addmember => $login_check_ok,
        #                    });
        # add token-students to students
   
#    } elsif ($role eq "teacher"){
#        #my $group=$school."-".$DevelConf::teacher;
#        my $group_token=&AD_get_name_tokened($DevelConf::teacher,$school,"adminclass");
#        &AD_group_addmember({ldap => $ldap,
#                             root_dse => $root_dse, 
#                             group => $DevelConf::teacher,
#                             addgroup => $group_token,
#                           });
        ## <teacher> in <token>-teachers
        #&AD_group_addmember({ldap => $ldap,
#                             root_dse => $root_dse, 
        #                     group => $DevelConf::teacher,
        #                     addmember => $login_check_ok,
        #                    });   
        # add token-students to students
#    }



  # 6. Add a mailbox for the user
  #&imap_create_mailbox($imap,$login_check_ok);
}

close(SOPHOMORIXADD);
close(STILLTOADD);

############################################################
# print logs
if ($#loglines >= 0){
    print "\n";
    &print_title("The following Problems were encountered");
    foreach my $line (@loglines){
        print "$line\n";
    }
}

if ($user_count==0){ 
    &print_title("NOT creating userlists (0 users added)");
} else {
    &sophomorix_print();
}


&backup_amku_file($time_stamp_file,"add","after");
rename("$add_file_new","$add_file" );


# ===========================================================================
# add.pdf, add.csv mitloggen
# ===========================================================================
#system("cp ${DevelConf::druck_pfad}/add.pdf ${DevelConf::log_pfad}/${time_stamp_file}.add.pdf");
#system("chmod 600 ${DevelConf::log_pfad}/${time_stamp_file}.add.pdf");
#system("chown root:root ${DevelConf::log_pfad}/${time_stamp_file}.add.pdf");
#system("cp ${DevelConf::druck_pfad}/add.csv ${DevelConf::log_pfad}/${time_stamp_file}.add.csv");
#system("chown root:root ${DevelConf::log_pfad}/${time_stamp_file}.add.pdf");
#rename("$add_file_new","$add_file" );

# # Setting Quota
# if ($Conf::use_quota eq "yes" 
#     and $user_count>0
#     and $user_count<101) {
#     my $users=join(",",@users_for_quota);
#     system("${DevelConf::executable_pfad}/sophomorix-quota --skiplock --users $users --noninteractive");
#     &nscd_stop();
# } elsif ($Conf::use_quota eq "yes" and $user_count>100){
#     system("${DevelConf::executable_pfad}/sophomorix-quota --skiplock --students --teachers --noninteractive");
#     &nscd_stop();
# } else {
#     if ($user_count==0){ 
#         &print_title("NOT setting quota (0 users added)");
#     } else {
#         &print_title("NOT setting quota");
#     }
# }

# # Creating Mailing Aliases and Lists
# if ($user_count>0) {
#     system("${DevelConf::executable_pfad}/sophomorix-mail --skiplock");
#     &nscd_stop();
# } else {
#     &print_title("NOT creating mailaliases/lists (0 users added)");
# }



#&db_disconnect($dbh);
#&imap_disconnect($imap);

&print_title("$user_count users added");

&AD_unbind_admin($ldap);

&log_script_end(@arguments);



################################################################################
# Subroutinen
################################################################################

# ===========================================================================
# sophomorix-print aufrufen
# ===========================================================================
sub sophomorix_print {
      # Mit 1mal sophomorix-print aufrufen sollte es tun, tut es aber nicht
      #system("$DevelConf::path_sbin/sophomorix-print --skiplock");
      #&nscd_stop();
}





