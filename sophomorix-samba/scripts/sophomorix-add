#!/usr/bin/perl -w
# This script (sophomorix-add) is maintained by RÃ¼diger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# modules
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);
use Net::LDAP;
use JSON;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_auk_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_add_summary
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 run_hook_scripts
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_create
                                 AD_bind_admin
                                 AD_dns_get
                                 AD_unbind_admin
                                 AD_user_create
                                 AD_group_create
                                 AD_group_addmember
                                 AD_group_update
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_dn_fetch_multivalue
                                 AD_object_search
                                 AD_get_passwd
                                    );

my @arguments = @ARGV;

my $user_count=0;
my $identifier;
my $surname_ascii;
my $firstname_ascii;
my $firstname_utf8;
my $surname_utf8;
my $birthdate;
my $login_wish;
my $password_wish;
my $uidnumber_wish;
my $gidnumber_wish;
my $status;
my $creationdate;
my $tolerationdate;
my $deactivationdate;
my $unid;
my $login_check_ok="";
my $sophomorix_first_password="";
my $file="";
my $class_group="";
my $school="";
my $role="unknown";

my @users_for_quota=();

# ou's that have been created while the script is running
my %school_created=();
$school_created{$school}="created";
# groups that have been created while the script is running
my %group_created=();

############################################################
# options
############################################################

$Conf::log_level=1;
my $help=0;
my $info=0;
my $json=0;
my $loginname="";
my $group="";
my $password="";
my $lock=0;
my $unlock=0;

my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "json|j+" => \$json,
           "verbose|v+" => \$Conf::log_level,
           "lock" => \$lock,
           "unlock" => \$unlock,
           "users|user|u=s" => \$loginname,
           "class|classes|c=s" => \$group,
           "password" => \$password,
          );

my %sophomorix_result=&result_sophomorix_init("sophomorix-add");
&check_options($testopt,\%sophomorix_result,$json);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$json);
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse,\%sophomorix_result);
my ($smb_admin_pass)=&AD_get_passwd($DevelConf::sophomorix_file_admin,
                                     $DevelConf::secret_file_sophomorix_file_admin);
my $add_file=$sophomorix_config{'INI'}{'PATHS'}{'CHECK_RESULT'}."/sophomorix.add";
my $add_file_new=$sophomorix_config{'INI'}{'PATHS'}{'CHECK_RESULT'}."/sophomorix.add.new";

# --help
if ($help==1) {
   # get scriptname
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   print('
sophomorix-add adds users from the file sophomorix.add to the sophomorix 
database and the authentification system.

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  --u user / --users user
  -c class / --class class
  --lock / --unlock

Please see the sophomorix-add(8) man pages for full documentation
');
   print "\n";
   exit;
}



# --unlock
if ($unlock==1) {
    &unlock_sophomorix();
    exit;
}



# --lock
if ($lock==1) {
    &lock_sophomorix("lock",0,\@arguments);
    exit;
}



# --info
if ($info==1) {
   my $count=0;
   if (not -e "$add_file"){
       print "$add_file does not exist!\n"; 
       print "Nothing to add: sophomorix.add does not exist!\n"; 
       exit;
   }

   print "\nThe following users can be added:\n";
   print "(Fields with --- are automatically created by sophomorix-add):\n\n";
   printf "%-14s%-35s%-12s%-9s%-9s%-12s%-12s\n",
          "AdminClass",
          "Identifier",
          "login",
          "uid",
          "gid",
          "Old-Pass",
          "unid";

   open(SOPHOMORIXADD,"$add_file") || 
             die "ERROR: sophomorix.add not found!";
   &print_line;
   my @lines=();
   while(<SOPHOMORIXADD>){
       if(/^\#/){ # # am Anfang bedeutet Kommentarzeile
	   next;
       }
       push @lines, $_;
   }
   close(SOPHOMORIXADD);

   my @sorted_lines = sort {
       my @a_fields = split /::/, $a;
       my @aa_fields = split /;/, $a_fields[2];

       my @b_fields = split /::/, $b;
       my @bb_fields = split /;/, $b_fields[2];

       $a_fields[1] cmp $b_fields[1]  # string sort on 1st field, then
         ||
       $aa_fields[2] cmp $bb_fields[2]  # string sort on 2nd field
         ||
       $aa_fields[1] cmp $bb_fields[1]  # string sort on 3rd field
   } @lines;

   foreach my $line (@sorted_lines){
       chomp($line);
       $count++;
       ($file,
       $class_group,
       $identifier,
       $login_wish,
       $password_wish,
       $uidnumber_wish,
       $gidnumber_wish,
       $unid,
       $school,
       $role)=split("::",$line);

       my $group_token=&AD_get_name_tokened($class_group,$school,"adminclass");
       my $identifier_cut=substr($identifier,0,28);
       printf "%-14s%-35s%-12s%-9s%-9s%-12s%-12s\n",
              $group_token,
              $identifier_cut,
              $login_wish,
              $uidnumber_wish, 
	      $gidnumber_wish,
              $password_wish,
              $unid;
   }
   &print_line;
   print "$count users can be added\n";
   exit;
}



# --loginname
if ($loginname ne "") {
  print "Loginname $loginname given as option.\n";
}



# --group
if ($group ne "") {
  print "Group $group given as option.\n";
}



&result_sophomorix_check_exit(\%sophomorix_result,\%sophomorix_config,$json);

################################################################################
# Start
################################################################################
&log_script_start(\@arguments,\%sophomorix_result);
# exit if there are no users to add
#if (not (-s "$add_file") ) {
#  &log_script_exit("No users to add!",1,1,0,\@arguments,\%sophomorix_result,\%sophomorix_config,$json);
#}

# create students and teachers
my @password_chars=&get_passwd_charlist();

# logging sophomorix.add
&backup_auk_file("add","before",\%sophomorix_config);

# calulate users to add
my $max_user_count=`cat $sophomorix_config{'INI'}{'PATHS'}{'CHECK_RESULT'}/sophomorix.add | wc -l`;
chomp($max_user_count);

# file for users that are NOT added
open(STILLTOADD,">$add_file_new") 
    || die "ERROR: $!";

# the users
open(SOPHOMORIXADD,"$add_file") 
    || die "ERROR: $!";
# loop through all users in sophomorix.add
while(<SOPHOMORIXADD>){
    if(/^\#/){ # # am Anfang bedeutet Kommentarzeile
        next;
    }

    chomp();
    # split data
    ($file,
     $class_group,
     $identifier,
     $login_wish,
     $password_wish,
     $uidnumber_wish,
     $gidnumber_wish,
     $unid,
     $school,
     $role,
     $surname_utf8,
     $firstname_utf8,
     $status,
     $creationdate,
     $tolerationdate,
     $deactivationdate,
    )=split("::");

    ($surname_ascii,$firstname_ascii,$birthdate)=split(";", $identifier);

    # login
    if ($login_wish eq "---" or $login_wish eq ""){
        print "\n   ERROR: >$login_wish< seems to be wrong\n\n"; 
        exit;
    } else {
        # accept login
        $login_check_ok=$login_wish;
    }

    # skip users that are not  given by option 
    if ($loginname ne "") {
        if ($login_check_ok ne $loginname) {
            print "##### $login_check_ok wird nicht angelegt!\n";
            print STILLTOADD "$_\n";
            next;
        }
    }

    # skip users that are not in the class given by option 
    if ($group ne "") {
        if ($class_group ne $group) {
            print "$login_check_ok ($class_group) wird nicht angelegt!\n";
            print STILLTOADD "$_\n";
            next;
        }
    }

    # Plain password
    my $random_pwd;
    if (exists $sophomorix_config{'FILES'}{'USER_FILE'}{$file}{'RANDOM_PWD'}){
        $random_pwd=$sophomorix_config{'FILES'}{'USER_FILE'}{$file}{'RANDOM_PWD'};
    } elsif (exists $sophomorix_config{'FILES'}{'CLASS_FILE'}{$file}{'RANDOM_PWD'}){
        $random_pwd=$sophomorix_config{'FILES'}{'CLASS_FILE'}{$file}{'RANDOM_PWD'};
    }
    my $pwd_length;
    if (exists $sophomorix_config{'FILES'}{'USER_FILE'}{$file}{'PWD_LENGTH'}){
        $pwd_length=$sophomorix_config{'FILES'}{'USER_FILE'}{$file}{'PWD_LENGTH'};
    } elsif (exists $sophomorix_config{'FILES'}{'CLASS_FILE'}{$file}{'PWD_LENGTH'}){
        $pwd_length=$sophomorix_config{'FILES'}{'CLASS_FILE'}{$file}{'PWD_LENGTH'};
    }

    if ($password_wish eq "---") {
        $sophomorix_first_password=&get_plain_password(
                        $role,
                        $file,
                        $random_pwd, # yes|no
                        $pwd_length, # length of random pwd
                        @password_chars);
    } else {
        $sophomorix_first_password=$password_wish;
    }

    # Status
    if ($status eq "---") {
        $status="U";
    }
    # creationdate
    if ($creationdate eq "---"){
        $creationdate=$sophomorix_config{'DATE'}{'LOCAL'}{'TIMESTAMP_AD'};
    }
    # 0. rember login to set quota later
    push @users_for_quota, $login_check_ok;

    # add user
    ##############################
    $user_count++;

    # --- -> default-school
    $school=&AD_get_schoolname($school);

    # 1. Entry in AD
    if (not exists $school_created{$school}){
        # create ou
        &AD_school_create({ldap=>$ldap,
                           root_dse=>$root_dse,
                           root_dns=>$root_dns,
                           school=>$school,
                           smb_admin_pass=>$smb_admin_pass,
                           sophomorix_config=>\%sophomorix_config,
                           sophomorix_result=>\%sophomorix_result,
                         });
        # remember school
        $school_created{$school}="already created";
    } else {
        print "   * school $school already created\n";
    }
    my $group_token=&AD_get_name_tokened($class_group,$school,"adminclass");
    my $login_token=&AD_get_name_tokened($login_check_ok,$school,$role);

    my $type;
    if (exists $sophomorix_config{'FILES'}{'USER_FILE'}{$file}{'sophomorixType'}){
        $type=$sophomorix_config{'FILES'}{'USER_FILE'}{$file}{'sophomorixType'};
    } elsif (exists $sophomorix_config{'FILES'}{'CLASS_FILE'}{$file}{'sophomorixType'}){
        $type=$sophomorix_config{'FILES'}{'CLASS_FILE'}{$file}{'sophomorixType'};
    }

    if (not exists $group_created{$school}{$class_group}){
        &AD_group_create({ldap=>$ldap,
                          root_dse=>$root_dse,
                          root_dns=>$root_dns,
                          group=>$group_token,
                          group_basename=>$class_group,
                          school=>$school,
                          status=>"P",
                          type=>$type,
                          joinable=>"TRUE",
                          description=>$group_token,
                          gidnumber_wish=>$gidnumber_wish,
                          file=>$file,
                          smb_admin_pass=>$smb_admin_pass,
                          sophomorix_config=>\%sophomorix_config,
                          sophomorix_result=>\%sophomorix_result,
                        });
        # remember group
        $group_created{$school}{$class_group}="already created";
    } else {
        print "   * group $class_group in school $school already created\n";

    }
    &AD_user_create({ldap=>$ldap,
                     root_dse=>$root_dse, 
                     root_dns=>$root_dns, 
                     user_count=>$user_count,
                     max_user_count=>$max_user_count,
                     identifier=>$identifier,
                     login=>$login_token,
                     group=>$group_token,
                     group_basename=>$class_group,
                     firstname_ascii=>$firstname_ascii,
                     surname_ascii=>$surname_ascii,
                     firstname_utf8=>$firstname_utf8,
                     surname_utf8=>$surname_utf8,
                     birthdate=>$birthdate,
                     sophomorix_first_password=>$sophomorix_first_password,
                     unid=>$unid,
                     uidnumber_wish=>$uidnumber_wish,
                     gidnumber_wish=>$gidnumber_wish,
                     role=>$role,
                     type=>$type,
                     school=>$school,
                     creationdate=>$creationdate,
                     tolerationdate=>$tolerationdate,
                     deactivationdate=>$deactivationdate,
                     status=>$status,
                     file=>$file,  
                     smb_admin_pass=>$smb_admin_pass,
                     json=>$json,
                     sophomorix_config=>\%sophomorix_config,
                     sophomorix_result=>\%sophomorix_result,
                   });
}

close(SOPHOMORIXADD);
close(STILLTOADD);

&backup_auk_file("add","after",\%sophomorix_config);
rename("$add_file_new","$add_file" );

&result_sophomorix_add_summary({
                     NAME=>"ADDED", 
                     RESULT=>$user_count, 
                     RESULT_TYPE => "integer",
                     DESCRIPTION_POST => "users added", 
                     DESCRIPTION_PRE => "added users", 
                     FORMAT_TYPE => 1,
                     sophomorix_result=>\%sophomorix_result,
			       });

&AD_unbind_admin($ldap);

if ($user_count>0){
    &run_hook_scripts("ADD_HOOK_DIR",\%sophomorix_result,\%sophomorix_config,"TRUE");
} else {
    print "No users added -> No hook scripts run.\n";
}

&log_script_end(\@arguments,\%sophomorix_result,\%sophomorix_config,$json);

############################################################
# sub
############################################################
