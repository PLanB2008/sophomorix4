#!/usr/bin/perl -w
# This script (sophomorix-transfer) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# Bibliotheken
use strict;
#use Quota;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);
use String::Approx 'amatch';
use String::Approx 'adist';
use Net::LDAP;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
use JSON;
use File::Basename qw( basename
                       dirname
                     ); 
use Text::Iconv;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_auk_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 filelist_fetch
                                 remove_whitespace
                                 json_dump
                                 recode_utf8_to_ascii
                                 remove_from_list
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_get_unicodepwd
                                 AD_set_unicodepwd
                                 AD_school_create
                                 AD_bind_admin
                                 AD_unbind_admin
                                 AD_session_manage
                                 AD_user_set_exam_mode
                                 AD_user_unset_exam_mode
                                 AD_user_create
                                 AD_user_kill
                                 AD_group_create
                                 AD_group_addmember
                                 AD_group_update
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_dn_fetch_multivalue
                                 AD_get_sessions
                                 AD_get_user
                                 AD_get_AD
                                 AD_dns_get
                                 AD_object_search
                                 get_forbidden_logins
                                 AD_examuser_create
                                 AD_examuser_kill
                                 AD_get_passwd
                                    );

my @arguments = @ARGV;

my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();



# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $json=0;

my $from_unix_path="";
my $to_user="";
my $subdir="";

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "json|j+" => \$json,
           "from-unix-path=s" => \$from_unix_path,
           "to-user=s" => \$to_user,
           "subdir=s" => \$subdir,
           "verbose|v+" => \$Conf::log_level,
          );

my %sophomorix_result=&result_sophomorix_init("sophomorix-exam-mode");
# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt,\%sophomorix_result,$json);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$json);
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse,\%sophomorix_result);
my ($smb_admin_pass)=&AD_get_passwd($DevelConf::sophomorix_file_admin,
                                     $DevelConf::secret_file_sophomorix_file_admin);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-transfer copies/moves files from/to school-shares

Options:
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info

sophomorix-transfer --from-unix-path /srv/upload/... --to-user <user1>,<user2>-exam, ... --subdir dir
 
Please see the sophomorix-transfer(8) man pages for full documentation
');
   print "\n";
   exit;
}

# --info
if ($info==1) {
    print "\nNothing yet to be done\n\n";

}



&result_sophomorix_check_exit(\%sophomorix_result,\%sophomorix_config,$json);
################################################################################
# Start
################################################################################
&log_script_start(\@arguments,\%sophomorix_result);

#print "$from_unix_path\n";
#print "$to_user\n";

# --from-unix-path /srv/upload/... --to-user <user1>,<user2>-exam, ...
if ($from_unix_path ne "" and $to_user ne ""){
    print "Copying from $from_unix_path to the users $to_user\n";
    # create mput commands
    &smbclient_mput_recurse($ldap,$root_dse,$root_dns,$smb_admin_pass,$from_unix_path,$subdir,$to_user,\%sophomorix_config);
}


&AD_unbind_admin($ldap);
&log_script_end(\@arguments,\%sophomorix_result,\%sophomorix_config,$json);

################################################################################
# Sub
################################################################################


sub smbclient_mget_recurse {
    my ($ldap,$root_dse,$root_dns,$smb_admin_pass,$localdir,$target_subdir,$userstring,$ref_sophomorix_config)=@_;
    # collect from a smb-share to a unixdir 
    # $localdir: where to collect to (unix-Pfad)
    # $userstring: list of users to copy from
    # $source_subdir: which subdir under transfer will be copied
}



sub smbclient_mput_recurse {
    my ($ldap,$root_dse,$root_dns,$smb_admin_pass,$localdir,$target_subdir,$userstring,$ref_sophomorix_config)=@_;
    # $localdir: sourcedir (unix-Pfad)
    # $userstring: list of users to put to
    # $target_subdir: subdir under userhome/transfer
    my @users=split(/,/,$userstring);
    foreach my $user (@users){

        # exit if user does not exist
        my ($firstname_utf8_AD,$lastname_utf8_AD,$adminclass_AD,$existing_AD,$exammode_AD,$role_AD,
                        $home_directory_AD,$user_account_control_AD,$toleration_date_AD,
                        $deactivation_date_AD,$school_AD,$status_AD,$firstpassword_AD)=
                        &AD_get_user({ldap=>$ldap,
                                      root_dse=>$root_dse,
                                      root_dns=>$root_dns,
                                      user=>$user,
                                    });
        my $smb_dir=$home_directory_AD;
        $smb_dir=~s/\\/\//g;
        my $transfer=$ref_sophomorix_config->{'INI'}{'LANG.FILESYSTEM'}{'TRANSFER_DIR_HOME_'.
                             $ref_sophomorix_config->{'GLOBAL'}{'LANG'}};
        $smb_dir=$smb_dir."/".$transfer;
        print "* from $localdir\n";
        print "   * to $smb_dir\n";
        # smbdir splitten sodass man im subdir landet

        my $smbclient_command="smbclient -U ".$DevelConf::sophomorix_file_admin."%'".$smb_admin_pass."'".
                              " //$root_dns/$school_AD "." -c 'exit;'";
# $smb_dir ".
#                                              "-c 'lcd $localdir; prompt; recurse; mput *; exit;'";
        print "$smbclient_command\n";
        system($smbclient_command);
    }

}
