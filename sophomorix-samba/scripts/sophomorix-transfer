#!/usr/bin/perl -w
# This script (sophomorix-transfer) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# Bibliotheken
use strict;
#use Quota;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);
use String::Approx 'amatch';
use String::Approx 'adist';
use Net::LDAP;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
use JSON;
use File::Temp qw/ tempdir /;
use File::Basename qw( basename
                       dirname
                     ); 
use Text::Iconv;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_auk_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 filelist_fetch
                                 remove_whitespace
                                 json_dump
                                 recode_utf8_to_ascii
                                 remove_from_list
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_get_unicodepwd
                                 AD_set_unicodepwd
                                 AD_school_create
                                 AD_bind_admin
                                 AD_unbind_admin
                                 AD_session_manage
                                 AD_user_set_exam_mode
                                 AD_user_unset_exam_mode
                                 AD_user_create
                                 AD_user_kill
                                 AD_group_create
                                 AD_group_addmember
                                 AD_group_update
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_dn_fetch_multivalue
                                 AD_get_sessions
                                 AD_get_user
                                 AD_get_AD
                                 AD_dns_get
                                 AD_object_search
                                 get_forbidden_logins
                                 AD_examuser_create
                                 AD_examuser_kill
                                 AD_get_passwd
                                    );

my @arguments = @ARGV;

my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();



# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $json=0;

my $from_unix_path="";
my $to_user="";
my $subdir;

# collect
my $collect_copy=0;
my $from_user="";
my $file_list="";

my $clean_transfer_dir="";
my $clean_home_dir="";

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "json|j+" => \$json,
           "from-unix-path=s" => \$from_unix_path,
           "to-user=s" => \$to_user,
           "from-user=s" => \$from_user,
           "subdir=s" => \$subdir,
           "file-list=s" => \$file_list,
           "collect-copy" => \$collect_copy,
           "clean-transfer-dir=s" => \$clean_transfer_dir,
           "clean-home-dir=s" => \$clean_home_dir,
           "verbose|v+" => \$Conf::log_level,
          );

my %sophomorix_result=&result_sophomorix_init("sophomorix-exam-mode");
# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt,\%sophomorix_result,$json);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$json);
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse,\%sophomorix_result);
my ($smb_admin_pass)=&AD_get_passwd($DevelConf::sophomorix_file_admin,
                                     $DevelConf::secret_file_sophomorix_file_admin);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-transfer copies/moves files from/to school-shares

Options:
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info

sophomorix-transfer --from-unix-path /srv/upload/... --to-user <user1>,<user2>-exam, ... --subdir dir

sophomorix-transfer --clean-home-dir <user1>,<user2>-exam, ...
sophomorix-transfer --clean-transfer-dir <user1>,<user2>-exam, ...
 
Please see the sophomorix-transfer(8) man pages for full documentation
');
   print "\n";
   exit;
}

# --info
if ($info==1) {
    print "\nNothing yet to be done\n\n";

}



&result_sophomorix_check_exit(\%sophomorix_result,\%sophomorix_config,$json);
################################################################################
# Start
################################################################################
&log_script_start(\@arguments,\%sophomorix_result);

#print "$from_unix_path\n";
#print "$to_user\n";

# --from-unix-path /srv/upload/... --to-user <user1>,<user2>-exam, ...
if ($from_unix_path ne "" and $to_user ne ""){
    print "Copying from $from_unix_path to the users $to_user\n";
    # create mput commands
    my $transfer=$sophomorix_config{'INI'}{'LANG.FILESYSTEM'}{'TRANSFER_DIR_HOME_'.
                 $sophomorix_config{'GLOBAL'}{'LANG'}};
    my $subdir_mput;
    if (defined $subdir){
        $subdir_mput=$subdir;
    } else {
        $subdir_mput=$transfer;
    }
    &smbclient_mput_recurse($ldap,$root_dse,$root_dns,$smb_admin_pass,$from_unix_path,$subdir_mput,$to_user,\%sophomorix_config);
    exit;
}



# --clean-transfer-dir
if ($clean_transfer_dir ne ""){
    print "Cleaning transfer dir of $clean_transfer_dir\n";
    &clean_transfer_dir($ldap,$root_dse,$root_dns,$smb_admin_pass,$clean_transfer_dir,\%sophomorix_config);
    exit;
}



# --clean-home-dir
if ($clean_home_dir ne ""){
    if (defined $subdir){
        print "Cleaning homedir of $clean_home_dir (subdir $subdir)\n";
    } else {
        print "Cleaning homedir of $clean_home_dir \n";
    }
    &clean_home_without_transfer($ldap,$root_dse,$root_dns,$smb_admin_pass,$clean_home_dir,$subdir,\%sophomorix_config);
    &clean_transfer_dir($ldap,$root_dse,$root_dns,$smb_admin_pass,$clean_home_dir,\%sophomorix_config);
    exit;
}


# --collect-copy --from-user <user1> --to-user <user2> --file <file1>,<dir1>, ...
if ($collect_copy==1 and $from_user ne "" and $to_user ne "" and $file_list ne ""){
    print "Collecting ...\n";
    my $target_dir=&smbclient_mget_recurse($ldap,$root_dse,$root_dns,$smb_admin_pass,"copy",$from_user,$file_list,\%sophomorix_config);
    my $from_unix_path=$target_dir;

    my $subdir_mput;
    if (not defined $subdir){
        my $transfer=$sophomorix_config{'INI'}{'LANG.FILESYSTEM'}{'TRANSFER_DIR_HOME_'.
                     $sophomorix_config{'GLOBAL'}{'LANG'}};
        $subdir_mput=$transfer."/".$from_user;
    } else {
        $subdir_mput=$subdir."/".$from_user;
    }
    &smbclient_mput_recurse($ldap,$root_dse,$root_dns,$smb_admin_pass,$from_unix_path,$subdir_mput,$to_user,\%sophomorix_config);
}


&AD_unbind_admin($ldap);
&log_script_end(\@arguments,\%sophomorix_result,\%sophomorix_config,$json);

################################################################################
# Sub
################################################################################


sub smbclient_mget_recurse {
    # save the data from smb share to a local unix dir with tmp filename
    # return abs-path
    my ($ldap,$root_dse,$root_dns,$smb_admin_pass,$type,$from_user,$file_list,$ref_sophomorix_config)=@_;
    my $to_dir=$ref_sophomorix_config->{'INI'}{'EXAMMODE'}{'TMP_COLLECT_DIR'};
    system("mkdir -p $to_dir");
    my $tmp = tempdir( DIR => $to_dir, CLEANUP =>  0 );
    my $target_dir = $tmp."/".$from_user;
    my ($firstname_utf8_AD,$lastname_utf8_AD,$adminclass_AD,$existing_AD,$exammode_AD,$role_AD,
        $home_directory_AD,$user_account_control_AD,$toleration_date_AD,
        $deactivation_date_AD,$school_AD,$status_AD,$firstpassword_AD)=
            &AD_get_user({ldap=>$ldap,
                          root_dse=>$root_dse,
                          root_dns=>$root_dns,
                          user=>$from_user,
                        });
    my $smb_dir_home=$home_directory_AD;
    $smb_dir_home=~s/\\/\//g;
    my @file_list = split(/,/,$file_list);
    foreach my $file_path (@file_list){
        my $dirname  = dirname($file_path);
        my $filename  = basename($file_path);        

        # lcd path
        my $lcd_path=$tmp."/".$from_user."/".$dirname; #/var/lib/sophomorix/tmp_collect/zGdyDqYqQ5/maiersa72/transfer

        # cd path
        my $smb_dir_sub=$smb_dir_home."/".$dirname;
        my ($string1,$rel_path_home)=split(/$school_AD/,$smb_dir_home);
        my ($string2,$rel_path_sub)=split(/$school_AD/,$smb_dir_sub);
        my $cd_path=$rel_path_sub;   # /students/m7ab/homes/maiersa72/transfer

        # collect from a smb-share to a unixdir
        print "Copying $file_path:\n";
        print "   * lcd:    $lcd_path\n";
        print "   * cd:     $cd_path\n";
        print "   * Type:  $type\n";
        print "   * Last:  $filename\n";
        system("mkdir -p $lcd_path");

        # file or dir
        my $smbclient_command="smbclient -U ".$DevelConf::sophomorix_file_admin."%'".$smb_admin_pass."'".
                              " //$root_dns/$school_AD "." -c 'cd $rel_path_sub; stat $filename; exit;'";
        print "$smbclient_command\n";
        my $stat_string=`$smbclient_command`;
        my @stat_lines=split("\n",$stat_string);

        foreach my $stat (@stat_lines){
            if ($stat=~m/regular file/ and $stat=~m/Blocks/ and $stat=~m/Size/){
                # file
                print "\n***** $filename is a file\n";
                my $smbclient_command="smbclient -U ".$DevelConf::sophomorix_file_admin."%'".$smb_admin_pass."'".
                                       " //$root_dns/$school_AD "." -c 'cd $rel_path_sub; lcd $lcd_path;".
                                       " prompt; recurse; get $filename; exit;'";
                print "$smbclient_command\n";
                system($smbclient_command);
                last;
            } elsif ($stat=~m/directory/ and $stat=~m/Blocks/ and $stat=~m/Size/){
                # dir
                print "\n***** $filename is a directory\n";
		$rel_path_sub=$rel_path_sub."/".$filename;
                $lcd_path=$lcd_path."/".$filename;
                system("mkdir $lcd_path");
                my $smbclient_command="smbclient -U ".$DevelConf::sophomorix_file_admin."%'".$smb_admin_pass."'".
                                       " //$root_dns/$school_AD "." -c 'cd $rel_path_sub; lcd $lcd_path;".
                                       " prompt; recurse; mget *; exit;'";
                print "$smbclient_command\n";
                system($smbclient_command);
                last;
            } 
        }
    }
    print "\n$target_dir\n\n";
    return $target_dir;
}



sub smbclient_mput_recurse {
    my ($ldap,$root_dse,$root_dns,$smb_admin_pass,$localdir,$target_subdir,$userstring,$ref_sophomorix_config)=@_;
    # $localdir: sourcedir (unix-Pfad)
    # $userstring: list of users to put to
    # $target_subdir: subdir under userhome/transfer
    my @users=split(/,/,$userstring);
    foreach my $user (@users){

        # exit if user does not exist

        my ($firstname_utf8_AD,$lastname_utf8_AD,$adminclass_AD,$existing_AD,$exammode_AD,$role_AD,
                        $home_directory_AD,$user_account_control_AD,$toleration_date_AD,
                        $deactivation_date_AD,$school_AD,$status_AD,$firstpassword_AD)=
                        &AD_get_user({ldap=>$ldap,
                                      root_dse=>$root_dse,
                                      root_dns=>$root_dns,
                                      user=>$user,
                                    });
        if ($existing_AD eq "TRUE"){
            my $smb_dir_home=$home_directory_AD;
            $smb_dir_home=~s/\\/\//g;
            my $smb_dir_sub=$smb_dir_home."/".$target_subdir;
            my ($string1,$rel_path_home)=split(/$school_AD/,$smb_dir_home);
            my ($string2,$rel_path_sub)=split(/$school_AD/,$smb_dir_sub);

	    print "\n\n$target_subdir\n";
            my @subdirs=split(/\//,$target_subdir);
            my $remember="";
            my $md_commands="cd $rel_path_home; ";
            foreach my $subdir (@subdirs){
                my $md_path=$remember.$subdir;
                print "   * md $md_path\n";
                $md_commands=$md_commands."md ".$md_path."; ";
                $remember=$md_path."/";
            }
            print "\n$md_commands\n\n";
  
            my $smbclient_command="smbclient -U ".$DevelConf::sophomorix_file_admin."%'".$smb_admin_pass."'".
                                  " //$root_dns/$school_AD "." -c '$md_commands cd $rel_path_sub; lcd $localdir;".
                                  " prompt; recurse; mput *; exit;'";
            print "$smbclient_command\n";
            system($smbclient_command);
        } else {
            print "\nERROR: cannot upload to nonexisting user $user\n\n";
        }
    }

}



sub clean_transfer_dir {
    my ($ldap,$root_dse,$root_dns,$smb_admin_pass,$userstring,$ref_sophomorix_config)=@_;
    my $transfer=$ref_sophomorix_config->{'INI'}{'LANG.FILESYSTEM'}{'TRANSFER_DIR_HOME_'.
                 $ref_sophomorix_config->{'GLOBAL'}{'LANG'}};
    &clean_home_without_transfer($ldap,$root_dse,$root_dns,$smb_admin_pass,$userstring,$transfer,\%sophomorix_config);
}



sub clean_home_without_transfer {
    my ($ldap,$root_dse,$root_dns,$smb_admin_pass,$userstring,$subdir,$ref_sophomorix_config)=@_;
    my @users=split(/,/,$userstring);
    my $transfer=$ref_sophomorix_config->{'INI'}{'LANG.FILESYSTEM'}{'TRANSFER_DIR_HOME_'.
                 $ref_sophomorix_config->{'GLOBAL'}{'LANG'}};
    foreach my $user (@users){
        # exit if user does not exist
        my ($firstname_utf8_AD,$lastname_utf8_AD,$adminclass_AD,$existing_AD,$exammode_AD,$role_AD,
                        $home_directory_AD,$user_account_control_AD,$toleration_date_AD,
                        $deactivation_date_AD,$school_AD,$status_AD,$firstpassword_AD)=
                        &AD_get_user({ldap=>$ldap,
                                      root_dse=>$root_dse,
                                      root_dns=>$root_dns,
                                      user=>$user,
                                    });
        my $smb_dir=$home_directory_AD;
        $smb_dir=~s/\\/\//g;
        #$smb_dir="smb:".$smb_dir."/".$transfer;
        if (defined $subdir){
            $smb_dir="smb:".$smb_dir."/".$subdir;
        } else {
            # clean homedir
            $smb_dir="smb:".$smb_dir;
        }

	print "  * $user: $smb_dir\n";

        my $smb = new Filesys::SmbClient(username  => $DevelConf::sophomorix_file_admin,
                                         password  => $smb_admin_pass,
                                         debug     => 0);
        
        my $fd = $smb->opendir($smb_dir);
        while (my $file = $smb->readdir_struct($fd)) {
            if ($file->[1] eq "."){next};
            if ($file->[1] eq ".."){next};

            # skipping some dirs
            if (not defined $subdir){
                # skip transfer dir when cleaning home
                if ($file->[0] == 7 and $file->[1] eq $transfer){next};
            }
            my $path=$smb_dir."/".$file->[1];

            my $return;
            if ($file->[0] == 7) {
                # its a dir
                $return=$smb->rmdir_recurse($path);
            } elsif ($file->[0] == 8) {
                # its a file
                $return=$smb->unlink($path);
            }

            if ($return==1){
                print "OK: Deleted with succes $path\n";
            } else {
                print "ERROR: rmdir_recurse $path $!\n";
            }
        }

    }
}
