#!/usr/bin/perl -w
# This script (sophomorix-session) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# Bibliotheken
use strict;
#use Quota;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);
use String::Approx 'amatch';
use String::Approx 'adist';
use Net::LDAP;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
use JSON;
use File::Basename qw( basename
                       dirname
                     ); 
use Text::Iconv;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_amku_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 filelist_fetch
                                 remove_whitespace
                                 json_dump
                                 recode_utf8_to_ascii
                                 remove_from_list
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_add
                                 AD_bind_admin
                                 AD_unbind_admin
                                 AD_session_manage
                                 AD_user_create
                                 AD_group_create
                                 AD_group_addmember
                                 AD_group_update
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_dn_fetch_multivalue
                                 AD_get_sessions
                                 AD_get_AD
                                 AD_dns_get
                                 AD_object_search
                                 get_forbidden_logins
                                    );

my @arguments = @ARGV;

my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();



# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $json=0;
my $dump_AD=0;

my $create=0;
my $kill=0;
my $kill_all_sessions=0;
my $teacher="";
my $session="";
my $developer_session="";
my $members=""; # undef: do not change members
my $addmembers="";
my $removemembers="";

# Parsen der Optionen
my $testopt=GetOptions(
           "verbose|v+" => \$Conf::log_level,
           "info|i" => \$info,
           "json|j+" => \$json,
           "help|h" => \$help,
           "create|c" => \$create,
           "dump-AD" => \$dump_AD,
           "kill" => \$kill,
           "kill-all-sessions" => \$kill_all_sessions,
           "teacher|t=s" => \$teacher,
           "session|s=s" => \$session,
           "members|m=s" => \$members,
           "addmembers=s" => \$addmembers,
           "removemembers=s" => \$removemembers,
           "developer-session=s" => \$developer_session,
          );


# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin();
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse);
my @filelist=&filelist_fetch({filetype=>"users",
                              sophomorix_config=>\%sophomorix_config,
                            });
#my %sessions=&AD_get_sessions($ldap,$root_dse,$root_dns,$json,$dump_AD);
my %sessions=();


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-session manages sessions

Options:
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  - t <user> / --teacher <user>
  --members <user1>,<user2>, ...
  --addmembers <user1>,<user2>, ...
  --removemembers <user1>,<user2>, ...
  --create (user current time as session-id)
  --kill -s <session-id>
  --kill-all-sessions

Create a session with the current time:
  sophomorix-session --create --teacher <user>
  sophomorix-session --create --teacher <user> --members <user1>,<user2>, ...

Update the students of a running session:
  sophomorix-session --session <session_id> --members <user1>,<user2>, ...

Dumping data:  
  -ij                              (dump sessions)  
  --dump-AD -j                     (dump AD data about management groups)     
  
  -j / --json                      (dump as a nice json object)
  -jj / --json --json              (dump as a compact json object)
  -jjj / --json --json --json      (dump as a perl hash)


 
Please see the sophomorix-session(8) man pages for full documentation
');
   print "\n";
   exit;
}

if ($session ne ""){
    %sessions=&AD_get_sessions($ldap,$root_dse,$root_dns,$json,$dump_AD,$session);
} else {
    %sessions=&AD_get_sessions($ldap,$root_dse,$root_dns,$json,$dump_AD,"all");
}


# --info
if ($info==1) {
    my $jsoncomment;
    if ($session ne ""){
        # show only one session
        $jsoncomment="The sophomorix session $session";
    } else {
        # show all sessions
        $jsoncomment="All sophomorix sessions";
    }
    &json_dump({json => $json,
                jsoninfo => "SESSIONS",
                jsoncomment => $jsoncomment,
                hash_ref=>\%sessions,
               });

    # session listing
    if ($session ne "" and exists $sessions{'id'}{$session}{'sAMAccountName'}){
        print "Session $session:\n";
        print "   *     sAMAccountName:  $sessions{'id'}{$session}{'sAMAccountName'}  (teacher of the session)\n";
        print "   *            members:  $sessions{'id'}{$session}{'memberstring'}  (students of the session)\n";
        print "   * sophomorixSessions:  $sessions{'id'}{$session}{'sophomorixSessions'}\n";
        
    }

    # teacher listing
    if ($teacher ne ""){
        my @ordered_list=();
        foreach my $session ( keys %{ $sessions{'user'}->{$teacher}{'sophomorixSessions'} }){
            push @ordered_list, $session;
        }
        @ordered_list = sort @ordered_list;
        my $count=0;
        foreach my $session (@ordered_list ){
            $count++;
            print "\n";
            print "$count) Teacher $teacher session: $session\n";
            print "   *     sAMAccountName:  $sessions{'id'}{$session}{'sAMAccountName'}  (teacher of the session)\n";
            print "   *            members:  $sessions{'id'}{$session}{'memberstring'}  (students of the session)\n";
            print "   * sophomorixSessions:  $sessions{'id'}{$session}{'sophomorixSessions'}\n";
        }
    }
    exit $sessions{'sessioncount'};
}



&log_script_start(@arguments);


################################################################################
# Start
################################################################################

if ($kill_all_sessions==1){
    &Sophomorix::SophomorixBase::print_title("Killing the following sessions:");
    foreach my $session (keys %{ $sessions{'id'} }) {
        &AD_session_manage({ldap=>$ldap,
                            root_dse=>$root_dse,
                            session=>$session,
                            kill=>"TRUE",
                            create=>"FALSE",
                            sessions_ref=>\%sessions,
                        });
    }
    exit;
}



if ($session ne "" and $kill==1){
    # update the requested session
    &AD_session_manage({ldap=>$ldap,
                        root_dse=>$root_dse,
                        session=>$session,
                        kill=>"TRUE",
                        create=>"FALSE",
                        sessions_ref=>\%sessions,
                    });
    exit;
}



if ($create==1 and $teacher ne ""){
    # create a session in teacher
    &AD_session_manage({ldap=>$ldap,
                        root_dse=>$root_dse,
                        teacher=>$teacher,
                        creationdate=>$time_stamp_file,
                        members=>$members,
                        create=>"TRUE",
                        kill=>"FALSE",
                        developer_session=>$developer_session,
                        sessions_ref=>\%sessions,
                    });
    exit;
}



# --members
if ($session ne "" and $members ne ""){
    # update the requested session
    &AD_session_manage({ldap=>$ldap,
                        root_dse=>$root_dse,
                        teacher=>$teacher,
                        create=>"FALSE",
                        kill=>"FALSE",
                        session=>$session,
                        members=>$members,
                        sessions_ref=>\%sessions,
                    });
    exit;
}



# --addmembers
if ($session ne "" and $addmembers ne ""){
    my @addmembers=split(/,/,$addmembers);
    my @old_members=split(/,/,$sessions{'id'}{$session}{'memberstring'});
    my @members = uniq(@old_members,@addmembers);
    my $members_new=join(",",@members);
    # update the requested session
    &AD_session_manage({ldap=>$ldap,
                        root_dse=>$root_dse,
                        teacher=>$teacher,
                        create=>"FALSE",
                        kill=>"FALSE",
                        session=>$session,
                        members=>$members_new,
                        sessions_ref=>\%sessions,
                    });
    exit;
}



# --removemembers
if ($session ne "" and $removemembers ne ""){
    my @old_members=split(/,/,$sessions{'id'}{$session}{'memberstring'});
    my @members = &remove_from_list($removemembers,@old_members);
    my $members_new=join(",",@members);
    # update the requested session
    &AD_session_manage({ldap=>$ldap,
                        root_dse=>$root_dse,
                        teacher=>$teacher,
                        create=>"FALSE",
                        kill=>"FALSE",
                        session=>$session,
                        members=>$members_new,
                        sessions_ref=>\%sessions,
                    });
    exit;
}



&AD_unbind_admin($ldap);

&log_script_end(@arguments);



################################################################################
# Sub
################################################################################
