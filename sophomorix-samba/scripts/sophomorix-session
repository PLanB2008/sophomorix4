#!/usr/bin/perl -w
# This script (sophomorix-session) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# Bibliotheken
use strict;
#use Quota;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);
use String::Approx 'amatch';
use String::Approx 'adist';
use Net::LDAP;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
use JSON;
use File::Basename qw( basename
                       dirname
                     ); 
use Text::Iconv;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_amku_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 filelist_fetch
                                 remove_whitespace
                                 json_dump
                                 recode_utf8_to_ascii
                                 remove_from_list
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_create
                                 AD_bind_admin
                                 AD_unbind_admin
                                 AD_session_manage
                                 AD_session_set_exam
                                 AD_session_unset_exam
                                 AD_user_create
                                 AD_group_create
                                 AD_group_addmember
                                 AD_group_update
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_dn_fetch_multivalue
                                 AD_get_sessions
                                 AD_get_AD
                                 AD_dns_get
                                 AD_object_search
                                 get_forbidden_logins
                                    );

my @arguments = @ARGV;

my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();



# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $json=0;
my $dump_AD=0;

my $create=0;
my $kill=0;
my $kill_all_sessions=0;
my $supervisor="";
my $session="";
my $developer_session="";
my $comment="";
my $participants=""; # undef: do not change participants
my $add_participants="";
my $remove_participants="";
my $set_exam_mode="";
my $unset_exam_mode="";

# Parsen der Optionen
my $testopt=GetOptions(
           "verbose|v+" => \$Conf::log_level,
           "info|i" => \$info,
           "json|j+" => \$json,
           "help|h" => \$help,
           "create|c" => \$create,
           "dump-AD" => \$dump_AD,
           "kill" => \$kill,
           "kill-all-sessions" => \$kill_all_sessions,
           "supervisor=s" => \$supervisor,
           "session|s=s" => \$session,
           "comment=s" => \$comment,
           "participants|m=s" => \$participants,
           "add-participants=s" => \$add_participants,
           "remove-participants=s" => \$remove_participants,
           "set-exam-mode=s" => \$set_exam_mode,
           "unset-exam-mode=s" => \$unset_exam_mode,
           "developer-session=s" => \$developer_session,
          );


# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin();
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse);
my @filelist=&filelist_fetch({filetype=>"users",
                              sophomorix_config=>\%sophomorix_config,
                            });
#my %sessions=&AD_get_sessions($ldap,$root_dse,$root_dns,$json,$dump_AD);
my %sessions=();


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-session manages sessions

Options:
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info
  --supervisor <user>
  --comment <string>              # ; are dropped in comment
  --participants <user1>,<user2>, ...
  --add-participants <user1>,<user2>, ...
  --remove-participants <user1>,<user2>, ...
  --set-exam-mode <user1>,<user2>, ...
  --unset-exam-mode <user1>,<user2>, ...
  --create (user current time as session-id)
  --kill -s <session-id>
  --kill-all-sessions

Create a session with the current time:
  sophomorix-session --create --supervisor <user>
  sophomorix-session --create --supervisor <user> --participants <user1>,<user2>, ...

Update the participants of a running session:
  sophomorix-session --session <session_id> --participants <user1>,<user2>, ...

Dumping data:  
  -ij                              (dump sessions)  
  --dump-AD -j                     (dump AD data about management groups)     
  
  -j / --json                      (dump as a nice json object)
  -jj / --json --json              (dump as a compact json object)
  -jjj / --json --json --json      (dump as a perl hash)


 
Please see the sophomorix-session(8) man pages for full documentation
');
   print "\n";
   exit;
}

if ($session ne ""){
    # get the session $session
    %sessions=&AD_get_sessions($ldap,$root_dse,$root_dns,$json,$dump_AD,$session);
} else {
    # get all sessions
    %sessions=&AD_get_sessions($ldap,$root_dse,$root_dns,$json,$dump_AD,"all");
}


# --info
if ($info==1) {
    my $jsoncomment;
    if ($session ne ""){
        # show only one session
        $jsoncomment="The sophomorix session $session";
    } else {
        # show all sessions
        $jsoncomment="All sophomorix sessions";
    }
    &json_dump({json => $json,
                jsoninfo => "SESSIONS",
                jsoncomment => $jsoncomment,
                hash_ref=>\%sessions,
               });

    # session listing
    if ($session ne "" and exists $sessions{'id'}{$session}{'supervisor'}{'name'}){
        print "\n";
        &Sophomorix::SophomorixBase::print_title("Session $session:");
        print "     *         supervisor:  $sessions{'id'}{$session}{'supervisor'}{'name'}  (supervisor of the session)\n";
        print "     *       participants:  $sessions{'id'}{$session}{'participantstring'}  (participants of the session)\n";
        print "     * sophomorixSessions:  $sessions{'id'}{$session}{'sophomorixSessions'}\n";
        
    }

    # supervisor listing
    if ($supervisor ne ""){
        my @ordered_list=();
        foreach my $session ( keys %{ $sessions{'supervisor'}->{$supervisor}{'sophomorixSessions'} }){
            push @ordered_list, $session;
        }
        @ordered_list = sort @ordered_list;
        my $count=0;
        print "\n";
        &Sophomorix::SophomorixBase::print_title("Sessions of supervisor $supervisor:");
        foreach my $session (@ordered_list ){
            $count++;
            print "  $count) Supervisor $supervisor session: $session\n";
            print "     *         supervisor:  $sessions{'id'}{$session}{'supervisor'}{'name'}  (supervisor of the session)\n";
            print "     *       participants:  $sessions{'id'}{$session}{'participantstring'}  (participants of the session)\n";
            print "     * sophomorixSessions:  $sessions{'id'}{$session}{'sophomorixSessions'}\n";
        }
    }
    exit $sessions{'sessioncount'};
}



&log_script_start(@arguments);


################################################################################
# Start
################################################################################

if ($kill_all_sessions==1){
    &Sophomorix::SophomorixBase::print_title("Killing the following sessions:");
    foreach my $session (keys %{ $sessions{'id'} }) {
        &AD_session_manage({ldap=>$ldap,
                            root_dse=>$root_dse,
                            session=>$session,
                            kill=>"TRUE",
                            create=>"FALSE",
                            sessions_ref=>\%sessions,
                        });
    }
    exit;
}



if ($session ne "" and $kill==1){
    # update the requested session
    &AD_session_manage({ldap=>$ldap,
                        root_dse=>$root_dse,
                        session=>$session,
                        kill=>"TRUE",
                        create=>"FALSE",
                        sessions_ref=>\%sessions,
                    });
    exit;
}



if ($create==1 and $supervisor ne ""){
    # create a session in supervisor
    &AD_session_manage({ldap=>$ldap,
                        root_dse=>$root_dse,
                        supervisor=>$supervisor,
                        creationdate=>$time_stamp_file,
                        participants=>$participants,
                        comment=>$comment,
                        create=>"TRUE",
                        kill=>"FALSE",
                        developer_session=>$developer_session,
                        sessions_ref=>\%sessions,
                    });
    exit;
}



# --participants
if ($session ne "" and $participants ne ""){
    # update the requested session
    &AD_session_manage({ldap=>$ldap,
                        root_dse=>$root_dse,
                        supervisor=>$supervisor,
                        create=>"FALSE",
                        kill=>"FALSE",
                        session=>$session,
                        participants=>$participants,
                        sessions_ref=>\%sessions,
                    });
    exit;
}



# --comment
if ($session ne "" and $comment ne ""){
    # update the requested session
    &AD_session_manage({ldap=>$ldap,
                        root_dse=>$root_dse,
                        supervisor=>$supervisor,
                        create=>"FALSE",
                        kill=>"FALSE",
                        session=>$session,
                        comment=>$comment,
                        sessions_ref=>\%sessions,
                    });
    exit;
}



# --add-participants
if ($session ne "" and $add_participants ne ""){
    my @add_participants=split(/,/,$add_participants);
    my @old_participants=split(/,/,$sessions{'id'}{$session}{'participantstring'});
    my @participants = uniq(@old_participants,@add_participants);
    my $participants_new=join(",",@participants);
    # update the requested session
    &AD_session_manage({ldap=>$ldap,
                        root_dse=>$root_dse,
                        supervisor=>$supervisor,
                        create=>"FALSE",
                        kill=>"FALSE",
                        session=>$session,
                        participants=>$participants_new,
                        sessions_ref=>\%sessions,
                    });
    exit;
}



# --remove-participants
if ($session ne "" and $remove_participants ne ""){
    my @old_participants=split(/,/,$sessions{'id'}{$session}{'participantstring'});
    my @participants = &remove_from_list($remove_participants,@old_participants);
    my $participants_new=join(",",@participants);
    # update the requested session
    &AD_session_manage({ldap=>$ldap,
                        root_dse=>$root_dse,
                        supervisor=>$supervisor,
                        create=>"FALSE",
                        kill=>"FALSE",
                        session=>$session,
                        participants=>$participants_new,
                        sessions_ref=>\%sessions,
                    });
    exit;
}

# --set-exam-mode
if ($session ne "" and $set_exam_mode ne ""){
    if (not exists $sessions{'id'}{$session}{'supervisor'}{'name'} ){
        print "   * Doing nothing: session $session not found\n"; 
    } else {
        # get chief of session
        my $supervisor=$sessions{'id'}{$session}{'supervisor'}{'name'};
        my @participants=split(/,/,$set_exam_mode);
        print "$supervisor is supervisor of $session\n";
        my $user_count=0;
        foreach my $participant (@participants){
	    $user_count++;
            if (exists $sessions{'id'}{$session}{'participants'}{$participant}){
                &AD_session_set_exam({ldap=>$ldap,
                                      root_dse=>$root_dse,
                                      root_dns=>$root_dns,
                                      supervisor=>$supervisor,
                                      session=>$session,
                                      participant=>$participant,
                                      user_count=>$user_count,
                                      sessions_ref=>\%sessions,
                                      date_now=> $time_stamp_AD,
                                   });
            } else {
                print "   * Doing nothing: $participant is not in the session\n";
            }
        }
    }
}


# --unset-exam-mode
if ($session ne "" and $unset_exam_mode ne ""){
    # get chief of session
    my $supervisor=$sessions{'id'}{$session}{'supervisor'}{'name'};
    my @participants=split(/,/,$unset_exam_mode);
    print "$supervisor is supervisor of $session\n";
    my $user_count=0;
    foreach my $participant (@participants){
	$user_count++;
        if (exists $sessions{'id'}{$session}{'participants'}{$participant}){
            &AD_session_unset_exam({ldap=>$ldap,
                                    root_dse=>$root_dse,
                                    root_dns=>$root_dns,
                                    supervisor=>$supervisor,
                                    session=>$session,
                                    participant=>$participant,
                                    user_count=>$user_count,
                                    sessions_ref=>\%sessions,
                                    date_now=> $time_stamp_AD,
                                  });
        } else {
            print "   * Doing nothing: $participant is not in the session\n";
        }
    }

}


&AD_unbind_admin($ldap);

&log_script_end(@arguments);



################################################################################
# Sub
################################################################################
