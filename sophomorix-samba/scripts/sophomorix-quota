#!/usr/bin/perl -w
# This script (sophomorix-quota) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# modules
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
use Net::LDAP;
use JSON;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_auk_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_add_summary
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 remove_from_list    
                                 json_dump
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_create
                                 AD_bind_admin
                                 AD_dns_get
                                 AD_get_user
                                 AD_get_quota
                                 AD_user_kill
                                 AD_unbind_admin
                                 AD_object_search
                                 AD_user_create
                                 AD_user_update
                                 AD_user_setquota
                                 AD_group_create
                                 AD_group_kill
                                 AD_group_addmember
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_class_fetch
                                 AD_group_update
                                 AD_project_sync_members
                                 AD_dn_fetch_multivalue
                                 AD_group_list
                                 AD_admin_list
                                 AD_get_passwd
                                 get_forbidden_logins
                                    );
my @arguments = @ARGV;

my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
# Variablen für Optionen
$Conf::log_level=1;
my $debug_level=0; # for smbcquotas --debuglevel=$debug_level

my $help=0;
my $info=0;
my $json=0;
my $school="";
my $user="";
my $developer_setquota="";
$Conf::log_level=1;

my $show_nondefault=0;

# smbcquotas options
my $list=0;
my $show=0;
my $default_quota="";

# set quota option
my $set_quota=1;
my $set_mailquota=1;

my $set_quota_only=0;
my $set_mailquota_only=0;

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "json|j+" => \$json,
           "verbose|v+" => \$Conf::log_level,
           "school|share|s=s" => \$school,
           "user|u=s" => \$user,
           "developer-setquota=s" => \$developer_setquota,
           "show|F" => \$show,
           "n|nondefault|show-nondefault" => \$show_nondefault,
           "list|L" => \$list,
           "default-quota|FSQLIM=s" => \$default_quota,
           "set-quota-only" => \$set_quota_only,
           "set-mailquota-only" => \$set_mailquota_only,
          );

my %sophomorix_result=&result_sophomorix_init("sophomorix-quota");
# Prüfen, ob Optionen erkannt wurden
&check_options($testopt,\%sophomorix_result,$json);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$json);
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse,\%sophomorix_result);
my ($smb_admin_pass)=&AD_get_passwd($DevelConf::sophomorix_file_admin,
                                     $DevelConf::secret_file_sophomorix_file_admin);


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print('
sophomorix-quota sets SMB-Share-Quota(=Quota) and MailQuota

  * Quota is set with the smbcquotas command from samba
  * MailQuota sets the attribute sophomorixMailQuotaCalculated
    (for use by )

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose

Show sophomorix info about quota calculation
  Show info about all school-shares:
    -i  / --info
  Show info about quota that differ from default:
    -n / --nondefault / --show-nondefault
  Show info about a school or another share:
    -s <school>/<sharename> / --school <school>/<sharename> / --share <school>/<sharename>
  Limit the output to some users:
    -u / --user <user1>,<user2>,... 
  
Setting the user Quota/MailQuota
  set Quota AND MailQuota
    sophomorix-quota
  set Quota only:
    sophomorix-quota --set-quota-only
  set MailQuota only:
    sophomorix-quota --set-mailquota-only

Set a users quota manually (in AD AND on smbshare):
  sophomorix-quota --developer-setquota <share>:<num(MiB)> -u <user>

smbcquotas wrappers:
  List quota of the users on a school/share:
    sophomorix-quota --share <sharename> -L
    sophomorix-quota --share <sharename> --list
  Show quota quota settings of a school/share:
    sophomorix-quota --share <sharename> -F
    sophomorix-quota --share <sharename> --show
  Set default quota on smb-share:
     sophomorix-quota --share <sharename> --default-quota <softlimit>/<hardlimit>

Please see the sophomorix-quota(8) man pages for full documentation
');
   print "\n";
   exit;
}




# create sharelist from options
# --school <school>/--share <share>
my @sharelist=();
if ($school ne ""){
    if (exists $sophomorix_config{'samba'}{'net_conf_list'}{$school}){
	push @sharelist,$school;
    } else {
        print "\nERROR: $school is not a SMB-share!\n\n";
	exit;
    }
} else {
    # without option use only school shares
    @sharelist=@{ $sophomorix_config{'LISTS'}{'SCHOOLS'} };
}



# options that need only a sharename
# --list/-L
if ($list==1){
    foreach my $share (@sharelist){
        my $smbcquotas_command=$sophomorix_config{'INI'}{'EXECUTABLES'}{'SMBCQUOTAS'}.
                               " --debuglevel=$debug_level -U ".$DevelConf::sophomorix_file_admin."%'".
                               $smb_admin_pass."'".
                               " -L //$root_dns/$share";
        print "$smbcquotas_command\n";
        system($smbcquotas_command);
    }
    exit;
}



# --show/-F
if ($show==1){
    foreach my $share (@sharelist){
        my $smbcquotas_command=$sophomorix_config{'INI'}{'EXECUTABLES'}{'SMBCQUOTAS'}.
                               " --debuglevel=$debug_level -U ".$DevelConf::sophomorix_file_admin."%'".
                               $smb_admin_pass."'".
                               " -F //$root_dns/$share";
        print "$smbcquotas_command\n";
        system($smbcquotas_command);
    }
    exit;
}



# --share <share> --default-quota <soft>/<hard>
if ($school ne "" and  $default_quota ne ""){
    foreach my $share (@sharelist){
        my $smbcquotas_command=$sophomorix_config{'INI'}{'EXECUTABLES'}{'SMBCQUOTAS'}.
                               " --debuglevel=$debug_level -U ".$DevelConf::sophomorix_file_admin."%'".
                               $smb_admin_pass."'".
                               " -S FSQLIM:".$default_quota." //$root_dns/$share";
        print "$smbcquotas_command\n";
        system($smbcquotas_command);
    }
    exit;
}



# --user user1,user2
my @userlist=();
if ($user ne ""){
    @userlist=split(/,/,$user);
}



my $ref_quota=&AD_get_quota({ldap=>$ldap,
                             root_dse=>$root_dse,
                             root_dns=>$root_dns,
                             sophomorix_config=>\%sophomorix_config,
                           });



# print Dumper($ref_quota);
# print Dumper($ref_quota->{'QUOTA'}{'USERS'}{'blackmri42'});
# print Dumper($ref_quota->{'QUOTA'}{'USERS'}{'lordjo42'});

############################################################
# --nondefault / --show-nondefault
if ($show_nondefault==1){
    foreach my $school (@sharelist){
        &Sophomorix::SophomorixBase::print_title("Nondefault quota of school $school:");
        foreach my $class ( @{ $ref_quota->{'LISTS'}{'CLASS_by_SCHOOL'}{$school} }){
            #print "CLASS: $class\n";
            foreach my $quota ( @{ $ref_quota->{'NONDEFAULT_QUOTA'}{$school}{'CLASS'}{$class}{'sophomorixQuota'} }){
	        print "  CLASS: $class --> $quota\n";
	    }            
            foreach my $mailquota ( @{ $ref_quota->{'NONDEFAULT_QUOTA'}{$school}{'CLASS'}{$class}{'sophomorixMailQuota'} }){
	        print "  CLASS: $class --> $mailquota (MAILQUOTA)\n";
	    }            
        }
        foreach my $project ( @{ $ref_quota->{'LISTS'}{'PROJECT_by_SCHOOL'}{$school} }){
            #print "PROJECT: $project\n";
            foreach my $quota ( @{ $ref_quota->{'NONDEFAULT_QUOTA'}{$school}{'PROJECT'}{$project}{'sophomorixAddQuota'} }){
	        print "  PROJECT: $project --> $quota\n";
	    }
            foreach my $mailquota ( @{ $ref_quota->{'NONDEFAULT_QUOTA'}{$school}{'PROJECT'}{$project}{'sophomorixAddMailQuota'} }){
	        print "  PROJECT: $project --> $mailquota (MAILQUOTA)\n";
	    }
        }
        foreach my $user ( @{ $ref_quota->{'LISTS'}{'USER_by_SCHOOL'}{$school} }){
            #print "USER: $user\n";
            foreach my $quota ( @{ $ref_quota->{'NONDEFAULT_QUOTA'}{$school}{'USER'}{$user}{'sophomorixQuota'} }){
	        print "  USER: $user --> $quota\n";
	    }
            foreach my $mailquota ( @{ $ref_quota->{'NONDEFAULT_QUOTA'}{$school}{'USER'}{$user}{'sophomorixMailQuota'} }){
	        print "  USER: $user --> $mailquota (MAILQUOTA)\n";
	    }
        }
    }
    exit;
}



############################################################
# --info --json
if ($info==1 and $json>0){
    &json_dump({json => $json,
                jsoninfo => "QUOTA",
                jsoncomment => "sophomorix quota",
                log_level => $Conf::log_level,
                hash_ref=>$ref_quota,
                sophomorix_config=>\%sophomorix_config,
              });
    exit;
############################################################
# --info 
} elsif ($info==1 and $json==0){
    my $line="+--------------------------+--------+------+".
             "------+------+-------------------+\n";
    my $line2="+------------------------------------------".
              "------------------------------------+\n";
    foreach my $school_share (@sharelist){
        if ($user eq ""){
            # use ALL sophomorix users
            if (not exists $ref_quota->{'LISTS'}{'USER_by_SCHOOL'}{$school_share}){
                @userlist=();
	    } else {
	        # all users of school
	        @userlist = @{ $ref_quota->{'LISTS'}{'USER_by_SCHOOL'}{$school_share} };
	    }
        }

        ############################################################
        # HEADER for SCHOOL
        print "\n";
        &Sophomorix::SophomorixBase::print_title("User quota of school $school_share:");
        # there are 0 users
        if($#userlist==-1){
            print "     0 sophomorix users in school $school_share\n";
            next;
        }

        # there are users
        if($Conf::log_level==1){
            print $line;
            printf "| %-25s| %-7s|%5s |%5s |%5s | %-18s|\n",
                   "user(role:DEFAULT)",
                   "share",
                   "CALC",
                   "USER",
                   "CLASS",
                   "PROJECTS";
        } else {
            # no such header for higher loglevels
        }

        ############################################################
        # Walk through users
        foreach my $user (@userlist){
	    #print "DEBUG: User: $user\n";
            if (not exists $ref_quota->{'QUOTA'}{'USERS'}{$user}){
                print "  WARNING: User $user not found!\n";
                next;
            } 

            # ????? skip user not in this school????
            # there are only the users of the school selected ????

            # create shortcut vars
            my $role=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'sophomorixRole'};

            # print user end/share begin line
            if($Conf::log_level==1){
                print $line;
            } else {
                print $line2;
                printf "| %-77s|\n", $user." in ".$school_share;
            }

            ############################################################
            # Walk through all shares
            foreach my $share ( @{ $ref_quota->{'QUOTA'}{'USERS'}{$user}{'SHARELIST'} }){
                # get values for display
                my $school_default;
	        my $sharedisplay;
	        if ($share eq $sophomorix_config{'INI'}{'VARS'}{'GLOBALSHARENAME'}){
                    $school_default=$sophomorix_config{'ROLES'}{$school_share}{$role}{'quota_default_global'};
		    $sharedisplay="GLOBAL";
	        } elsif ($share eq $school_share){
                    $school_default=$sophomorix_config{'ROLES'}{$school_share}{$role}{'quota_default_school'};
		    $sharedisplay=$share;
	        } else {
                    $school_default="---";                    
		    $sharedisplay=$share;
	        }
  	        if ($share eq $DevelConf::name_default_school){
                    $sharedisplay="DEFLT";
	        }

                # get the users quota or --- for display
                my $quota_user_display;
                my $quota_user_comment;
	        if (defined $ref_quota->{'QUOTA'}{'USERS'}{$user}{'SHARES'}
                                        {$share}{'sophomorixQuota'}){
	            $quota_user_display=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'SHARES'}
	                                            {$share}{'sophomorixQuota'};
	            $quota_user_comment=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'SHARES'}
	                                            {$share}{'COMMENT'};
	        } else {
                    $quota_user_display="---";
                    $quota_user_comment="---";
	        }
                my $quota_class_display;
                my $quota_class_comment;
	        if (defined $ref_quota->{'QUOTA'}{'USERS'}{$user}{'CLASS'}
                                        {'sophomorixQuota'}{$share}{'VALUE'}){
	            $quota_class_display=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'CLASS'}
	                                             {'sophomorixQuota'}{$share}{'VALUE'};
	            $quota_class_comment=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'CLASS'}
	                                             {'sophomorixQuota'}{$share}{'COMMENT'};

	        } else {
                    $quota_class_display="---";
                    $quota_class_comment="---";
	        }

                my $calc_display;
                if ($ref_quota->{'QUOTA'}{'USERS'}{$user}{'SHARES'}{$share}{'ACTION'}{'UPDATE'} eq "TRUE"){
                    # append asterisk
                    $calc_display=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'SHARES'}{$share}{'CALC'}."*";
                } else {
                    # append space
                    $calc_display=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'SHARES'}{$share}{'CALC'}." ";
                }

                # printout
                if($Conf::log_level>=2){
                    # print extensive information
                    print $line2;
                    printf "| %-77s|\n",$share." share for user ".$user." in MiB (Mebibyte):";
                    printf "|%10s %-67s|\n",
                        $school_default,
                        " (A) default Quota for sophomorixRole \'".$role."\'";
                    if ($quota_class_display ne "---"){
                        printf "|%10s %-67s|\n",
                            "",
                            " (B) Quota at the users class \'".
                            $ref_quota->{'QUOTA'}{'USERS'}{$user}{'CLASS'}{'sAMAccountName'}.
                            "\': Overrides (A)";
                        printf "|%10s %-67s|\n",
                            $quota_class_display,
                            " Comment: \'".
                            $quota_class_comment.
                            "\'";
    		    } else {
                        printf "|%10s %-67s|\n",
                            $quota_class_display,
                            " (B) No Quota at the users class \'".
                            $ref_quota->{'QUOTA'}{'USERS'}{$user}{'CLASS'}{'sAMAccountName'}.
                            "\'";
                    }
                    foreach my $project ( @{ $ref_quota->{'QUOTA'}{'USERS'}{$user}{'PROJECTLIST'} }) {
                        my @reason=();
                        my $membership_string="";
                        foreach my $reason (keys %{ $ref_quota->{'QUOTA'}{'USERS'}{$user}{'PROJECT'}{$project}{'REASON'} }) {
                            push @reason,$reason;
                        }
                        @reason = sort @reason;
                        $membership_string=join(",",@reason);
			if (exists $ref_quota->{'QUOTA'}{'USERS'}{$user}{'PROJECT'}{$project}{'sophomorixAddQuota'}{$share}{'VALUE'}){
			    my $add=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'PROJECT'}{$project}{'sophomorixAddQuota'}{$share}{'VALUE'};
                            printf "|%10s %-67s|\n","+ ".$add,
                                " AddQuota, member in project \'".$project."\' (".$membership_string.")";
                            printf "|%10s %-67s|\n","",
                                " Comment: \'".
                                $ref_quota->{'QUOTA'}{'USERS'}{$user}{'PROJECT'}{$project}{'sophomorixAddQuota'}{$share}{'COMMENT'}.
                                "\'";
			} else {
                            printf "|%10s %-67s|\n","0",
                                                    " No AddQuota, member in project \'".
                                                    $project."\' (".$membership_string.")";
		        }
                    }
                    if ($quota_user_display eq "---"){
                        printf "|%10s %-67s|\n",$quota_user_display," (C) No Quota at the user Object \'".$user."\'";
                    } else {
                        printf "|%10s %-67s|\n",$quota_user_display," (C) Quota at the user will override all above settings";
                        printf "|%10s %-67s|\n"," "," Comment: \'".$quota_user_comment."\'";
                    }

                    # show calc 
                    if ($ref_quota->{'QUOTA'}{'USERS'}{$user}{'SHARES'}{$share}{'ACTION'}{'UPDATE'} eq "TRUE"){
                        printf "|%11s%-67s|\n",
                               $calc_display,
                               " CALC must be set for ".$user." on ".$share;
                    } else {
                        printf "|%11s%-67s|\n",
                               $calc_display,
                               " CALC was already set for ".$user." on ".$share;
                        my $mib=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'SHARES'}{$share}{'QUOTASTATUS'}/1024;
                        printf "|%11s%-67s|\n",
                               "",
                               " SMB share quota was set to ".
                               $ref_quota->{'QUOTA'}{'USERS'}{$user}{'SHARES'}{$share}{'QUOTASTATUS'}." Bytes (".
                               $mib.
                               " MiB)";
                    }
	        } else {
                    # print single line
	            printf "| %-25s| %-7s|%6s|%5s |%5s | %-18s|\n",
                           "$user($role:$school_default)",
                           "$sharedisplay",
                           $calc_display,
                           $quota_user_display,
                           $quota_class_display,
                           $ref_quota->{'QUOTA'}{'USERS'}{$user}{'SHARES'}{$share}{'PROJECTSTRING'};
		}
            } # end of share walk

            ############################################################
            # MailQuota
            my $mailquota_school_default=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'MAILQUOTA'}{'SCHOOLDEFAULT'};
            my $mailquota_user_display;
            my $mailquota_user_comment;
            if (defined $ref_quota->{'QUOTA'}{'USERS'}{$user}{'sophomorixMailQuota'}{'VALUE'}){
	        $mailquota_user_display=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'sophomorixMailQuota'}{'VALUE'};
	        $mailquota_user_comment=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'sophomorixMailQuota'}{'COMMENT'};
	    } else {
                $mailquota_user_display="---";
                $mailquota_user_comment="---";
	    }
            my $mailquota_class_display;
            my $mailquota_class_comment;
	    if (defined $ref_quota->{'QUOTA'}{'USERS'}{$user}{'CLASS'}{'sophomorixMailQuota'}{'VALUE'}){
	        $mailquota_class_display=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'CLASS'}{'sophomorixMailQuota'}{'VALUE'};
	        $mailquota_class_comment=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'CLASS'}{'sophomorixMailQuota'}{'COMMENT'};
	    } else {
                $mailquota_class_display="---";
                $mailquota_class_comment="comment";
	    }

            my $mailcalc_display;
            if ($ref_quota->{'QUOTA'}{'USERS'}{$user}{'MAILQUOTA'}{'ACTION'}{'UPDATE'} eq "TRUE"){
                # append asterisk
                $mailcalc_display=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'MAILQUOTA'}{'CALC'}."*";
            } else {
                # append space
                $mailcalc_display=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'MAILQUOTA'}{'CALC'}." ";
            }

            # printout
            if($Conf::log_level>=2){
                # print extensive information
                print $line2;
                printf "| %-77s|\n","MailQuota for user ".$user." in MiB (Mebibyte):";
                printf "|%10s %-67s|\n",
                    $mailquota_school_default,
                    " (A) default MailQuota for sophomorixRole \'".$role."\'";
                if ($mailquota_class_display ne "---"){
                    printf "|%10s %-67s|\n",
                        $mailquota_class_display,
                        " (B) Quota at the users class \'".
                        $ref_quota->{'QUOTA'}{'USERS'}{$user}{'CLASS'}{'sAMAccountName'}.
                        "\': Overrides (A)";
                    printf "|%10s %-67s|\n",
                        " ",
                        " Comment: \'".
                        $mailquota_class_comment.
                        "\'";
    		} else {
                    printf "|%10s %-67s|\n",$mailquota_class_display,
                                            " (B) No Quota at the users class \'".
                                            $ref_quota->{'QUOTA'}{'USERS'}{$user}{'CLASS'}{'sAMAccountName'}.
                                            "\'";
                }


                foreach my $project ( @{ $ref_quota->{'QUOTA'}{'USERS'}{$user}{'PROJECTLIST'} }) {
                    my @reason=();
                    my $membership_string="";
                    foreach my $reason (keys %{ $ref_quota->{'QUOTA'}{'USERS'}{$user}{'PROJECT'}{$project}{'REASON'} }) {
                        push @reason,$reason;
                    }
                    @reason = sort @reason;
                    $membership_string=join(",",@reason);
		    if (exists $ref_quota->{'QUOTA'}{'USERS'}{$user}{'PROJECT'}{$project}{'sophomorixAddMailQuota'}{'VALUE'}){
		        my $add=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'PROJECT'}{$project}{'sophomorixAddMailQuota'}{'VALUE'};
                        printf "|%10s %-67s|\n",
                            "+ ".
                            $add,
                            " AddMailQuota, member in project \'".
                            $project.
                            "\' (".$membership_string.")";
                        printf "|%10s %-67s|\n",
                            "",
                            " Comment: \'".
                            $ref_quota->{'QUOTA'}{'USERS'}{$user}{'PROJECT'}{$project}{'sophomorixAddMailQuota'}{'COMMENT'}.
                            "\'";
		    } else {
                        printf "|%10s %-67s|\n",
                            "0",
                            " No AddMailQuota, member in project \'".
                            $project."\' (".$membership_string.")";
		    }
                }
                if ($mailquota_user_display eq "---"){
                    printf "|%10s %-67s|\n",
                        $mailquota_user_display,
                        " (C) No MailQuota at the user Object \'".
                        $user.
                        "\'";
                } else {
                    printf "|%10s %-67s|\n",
                        $mailquota_user_display,
                        " (C) MailQuota at the user will override all above settings";
                    printf "|%10s %-67s|\n",
                        " ",
                        " Comment: \'".
                        $mailquota_user_comment.
                        "\'";
                }

                # show calc 
                if ($ref_quota->{'QUOTA'}{'USERS'}{$user}{'MAILQUOTA'}{'ACTION'}{'UPDATE'} eq "TRUE"){
                    printf "|%11s%-67s|\n",
                           $mailcalc_display,
                           " MAILCALC must be set (old MAILCALC is ".
                           $ref_quota->{'QUOTA'}{'USERS'}{$user}{'MAILQUOTA'}{'OLDCALC'}.
                           " MiB)";
                } else {
                    printf "|%11s%-67s|\n",
                           $mailcalc_display,
                           " MAILCALC was already set to ".
                           $ref_quota->{'QUOTA'}{'USERS'}{$user}{'MAILQUOTA'}{'OLDCALC'}.
                           " MiB";
                }
            } else {
                # print single line
	        printf "| %-25s| %-7s|%6s|%5s |%5s | %-18s|\n",
                       "$user($role:$mailquota_school_default)",
                       "**MQ**",
                       $mailcalc_display,
                       $mailquota_user_display,
                       $mailquota_class_display,
                       $ref_quota->{'QUOTA'}{'USERS'}{$user}{'MAILQUOTA'}{'PROJECTSTRING'};
            }
        } # end of user walk
        if($Conf::log_level==1){
            print $line;
        } else {
            print $line2;
        }
        print "* at end of CALC: quota must be updated     **MQ**: MailQuota\n";
    } # end of school
    #print Dumper($ref_quota);
    exit;
}



############################################################
# --developer-setquota <share>:<value> -user u
if($developer_setquota ne "" and $user ne ""){
    my ($share,$quota)=split(":",$developer_setquota);
    foreach my $user (@userlist){
        &AD_user_setquota({ldap=>$ldap,
                           root_dse=>$root_dse,
                           root_dns=>$root_dns,
                           user=>$user,
                           share_count=>"1",
                           max_share_count=>"1",
                           share=>$share,
                           quota=>$quota,
                           smb_admin_pass=>$smb_admin_pass, 
                           debug_level=>$debug_level,
                           json=>$json,
                           sophomorix_result=>\%sophomorix_result,
                           sophomorix_config=>\%sophomorix_config,
                         });
    }
    exit;
}



#print Dumper($ref_quota->{'QUOTA'}{'USERS'}{'blackmri23'});
#exit;

################################################################################
# continue with the calculated quota from $ref_quota
################################################################################

# --set-quota-only
if ($set_quota_only==1){
    # do not set other stuff
    $set_mailquota=0;
}


# --set-mailquota-only
if ($set_mailquota_only==1){
    # do not set other stuff
    $set_quota=0;
}

my %user_updated=(); # make sure user is not updated twice
my $user_count=0; # count the users for progression output 
my $mail_user_count=0; # count the users for progression output

&Sophomorix::SophomorixBase::print_title("Setting Quota/MailQuota of the following users:");
foreach my $school_share (@sharelist){
    &Sophomorix::SophomorixBase::print_title("Setting Quota/MailQuota for school $school_share:");
    if ($user eq ""){
        # use ALL sophomorix users
        if (not exists $ref_quota->{'LISTS'}{'USER_by_SCHOOL'}{$school_share}){
            @userlist=();
	} else {
	    # all users of school
	    @userlist = @{ $ref_quota->{'LISTS'}{'USER_by_SCHOOL'}{$school_share} };
	}
    }
    if($#userlist==-1){
        print "     0 sophomorix users in school $school_share\n";
        next;
    }


    if ($set_mailquota==1){
        ############################################################
        # Walk through users for MailQuota
        foreach my $user (@userlist){
            if (not exists $ref_quota->{'QUOTA'}{'USERS'}{$user}){
                print "  WARNING: User $user not found!\n";
                next;
            }
            print "   * User $user:\n";
            ############################################################
            # set user MailQuota
            if ($ref_quota->{'QUOTA'}{'USERS'}{$user}{'MAILQUOTA'}{'ACTION'}{'UPDATE'} eq "TRUE"){
                $mail_user_count++;
                my $mailquota_calc=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'MAILQUOTA'}{'CALC'};
                print "      * SET: sophomorixMailQuotaCalculated to $mailquota_calc MiB:\n";
                my $dn=$ref_quota->{'QUOTA'}{'LOOKUP'}{'USER'}{'DN_by_sAMAccountName'}{$user};
                &AD_user_update({ldap=>$ldap,
                                 root_dse=>$root_dse,
                                 dn=>$dn,
                                 user=>$user,
                                 mailquota_calc=>$mailquota_calc,
                                 user_count=>$mail_user_count,
                                 max_user_count=>$ref_quota->{'QUOTA'}{'UPDATE_COUNTER'}{'MAILQUOTA'},
                                 json=>$json,
                                 sophomorix_config=>\%sophomorix_config,
                                 sophomorix_result=>\%sophomorix_result,
                               });
            } else {
                print "      *  OK: sophomorixMailQuotaCalculated\n";
	    }
        }
    } # set mailquota end


    if ($set_quota==1){
        ############################################################
        # Walk through users for Quota
        foreach my $user (@userlist){
            if (not exists $ref_quota->{'QUOTA'}{'USERS'}{$user}){
                print "  WARNING: User $user not found!\n";
                next;
            }
            print "   * User $user:\n";
            ############################################################
            # Walk through all shares
            my $share_count=0;
            foreach my $share ( @{ $ref_quota->{'QUOTA'}{'USERS'}{$user}{'SHARELIST'} }){
                $share_count++;
                if ($ref_quota->{'QUOTA'}{'USERS'}{$user}{'SHARES'}{$share}{'ACTION'}{'UPDATE'} eq "TRUE"){
                    my $quota=$ref_quota->{'QUOTA'}{'USERS'}{$user}{'SHARES'}{$share}{'CALC'};
                    print "      * SET: $share to $quota MiB:\n";
                    if (not exists $user_updated{$user}){
                        $user_updated{$user}="seen";
                        $user_count++;
                    }
                    &AD_user_setquota({ldap=>$ldap,
                                       root_dse=>$root_dse,
                                       root_dns=>$root_dns,
                                       user=>$user,
                                       user_count=>$user_count,
                                       max_user_count=>$ref_quota->{'QUOTA'}{'UPDATE_COUNTER'}{'USERS'},
                                       share_count=>$share_count,
                                       max_share_count=>$ref_quota->{'QUOTA'}{'UPDATE_COUNTER'}{'SHARES'},
                                       share=>$share,
                                       quota=>$quota,
                                       smb_admin_pass=>$smb_admin_pass, 
                                       debug_level=>$debug_level,
                                       json=>$json,
                                       sophomorix_result=>\%sophomorix_result,
                                       sophomorix_config=>\%sophomorix_config,
                                     });
                    print "\n";
                } else {
                    print "      * OK:  $share\n";
                }
            }
        }
    } # set quota end
}


#    print Dumper($ref_quota);


# add result mailquota
if ($set_mailquota==1){
    &result_sophomorix_add_summary({
        NAME=>"UPDATED MAILQUOTA", 
        RESULT=>$mail_user_count, 
        RESULT_TYPE => "integer",
        DESCRIPTION_POST => "users mailquota updated", 
        DESCRIPTION_PRE => "users with updated mailquota", 
        FORMAT_TYPE => 1,
        sophomorix_result=>\%sophomorix_result,
      });
}

# add result quota
if ($set_quota==1){
    &result_sophomorix_add_summary({
        NAME=>"UPDATED QUOTA", 
        RESULT=>$user_count, 
        RESULT_TYPE => "integer",
        DESCRIPTION_POST => "users smbquota updated", 
        DESCRIPTION_PRE => "users with updated smbquota", 
        FORMAT_TYPE => 1,
        sophomorix_result=>\%sophomorix_result,
      });
}


&result_sophomorix_check_exit(\%sophomorix_result,\%sophomorix_config,$json);
# ===========================================================================
# Start
# ===========================================================================
&log_script_start(\@arguments,\%sophomorix_result);


&AD_unbind_admin($ldap);
&log_script_end(\@arguments,\%sophomorix_result,\%sophomorix_config,$json);
############################################################
# End
############################################################



############################################################
# subs
############################################################
