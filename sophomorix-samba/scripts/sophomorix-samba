#!/usr/bin/perl -w
# This script (sophomorix-samba) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# Bibliotheken
use strict;
#use Quota;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase qw(
                                 check_options
                                 read_smb_conf
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                    );
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
#    return \%master;


my @arguments = @ARGV;

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $backup_samba="";
my $restore_samba="";
my $schema_load=0;
my $restart=0;
my $stop=0;
my $start=0;

my $samba_private="/var/lib/samba/private";
my $samba_private_d="/var/lib/samba/private/sam.ldb.d";

my %smb_conf=();
&read_smb_conf(\%smb_conf);
#print Dumper( \%smb_conf );

# Parsen der Optionen
my $testopt=GetOptions(
           "info|i" => \$info,
           "help|h" => \$help,
           "backup-samba=s" => \$backup_samba,
           "restore-samba=s" => \$restore_samba,
           "schema-load" => \$schema_load,
           "start" => \$start,
           "stop" => \$stop,
           "restart" => \$restart,
          );


# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-add adds users from the file sophomorix.add to the sophomorix 
database and the authentification system.

Options
  -h  / --help
  --backup-samba suffix    (backups the database)
  --restore-samba suffix   (restores the database)
  --schema-load            (loads the sophomorix-schema)

  --restart                (restarts samba)

If you forgot the suffix look here:
# ls -l /var/lib/samba/private/*ldb*

Please see the sophomorix-add(8) man pages for full documentation
');
   print "\n";
   exit;
}


# --backup-samba
if ($backup_samba ne ""){
    print "\nBacking up samba databases with suffix -$backup_samba\n\n";
    my @ldb_files = &get_ldb_files();
    print "##### saving ldb files: #####\n";
    foreach my $ldb (@ldb_files){
        my $command="cp -v ${samba_private}/${ldb} ${samba_private}/${ldb}-${backup_samba}";
        #print "  $command\n";
        system($command);
    } 
    my @ldb_files_d = &get_ldb_d_files();
    print "##### saving ldb files: #####\n";
    foreach my $ldb_d (@ldb_files_d){
        my $command="cp -v ${samba_private_d}/${ldb_d} ${samba_private_d}/${ldb_d}-${backup_samba}";
        #print "  $command\n";
        system($command);
    } 
    exit;
}


# --restore-samba
if ($restore_samba ne ""){
    print "\nRestoring samba databases with suffix -$restore_samba\n\n";
    &samba_stop();
    my @ldb_files = &get_ldb_files();
    print "##### restoring ldb files: #####\n";
    foreach my $ldb (@ldb_files){
        my $command="cp -v ${samba_private}/${ldb}-${restore_samba} ${samba_private}/${ldb} ";
        #print "  $command\n";
        system($command);
    } 
    my @ldb_files_d = &get_ldb_d_files();
    print "##### restoring ldb files: #####\n";
    foreach my $ldb_d (@ldb_files_d){
        my $command="cp -v ${samba_private_d}/${ldb_d}-${restore_samba} ${samba_private_d}/${ldb_d} ";
        #print "  $command\n";
        system($command);
    } 
    &samba_start();
}


# --schema-load
if ($schema_load==1){
    print "\nLoading sophomorix schema into ldap\n\n";
    my $dn=$smb_conf{'samba'}{'from_smb.conf'}{'DomainDNS'};
    &samba_stop();
    my $command="cd /usr/share/sophomorix/schema; ./sophomorix_schema_add.sh $dn . -H /var/lib/samba/private/sam.ldb -writechanges";
    print "$command\n";
    system($command);
    &samba_start();
}


# --start
if ($start==1){
    print "\nStarting samba\n\n";
    &samba_start();
}


# --stop
if ($stop==1){
    print "\nStopping samba\n\n";
    &samba_stop();
}


# --restart
if ($restart==1){
    print "\nRestarting samba\n\n";
    &samba_stop();
    &samba_start();
}


############################################################
# subs
############################################################

sub samba_stop {
    system("/etc/init.d/samba stop");
}



sub samba_start {
    system("/etc/init.d/samba start");
}



sub get_ldb_files {
    my @files=();
    opendir SAMBADB, $samba_private or return;
    foreach my $file (readdir SAMBADB){
        if ($file eq "."){next};
        if ($file eq ".."){next};
        if ($file=~m/.ldb$/){
            push @files,$file;
        }
    }
    closedir SAMBADB;
    @files = sort @files;
    return @files;
}



sub get_ldb_d_files {
    my @files=();
    opendir SAMBADB, $samba_private_d or return;
    foreach my $file (readdir SAMBADB){
        if ($file eq "."){next};
        if ($file eq ".."){next};
        if ($file=~m/.ldb$/){
	    push @files,$file;
        }
    }
    closedir SAMBADB;
    @files = sort @files;
    return @files;
}
