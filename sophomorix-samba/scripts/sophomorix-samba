#!/usr/bin/perl -w
# This script (sophomorix-samba) is maintained by R端diger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# modules
use strict;
#use Quota;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase qw(
                                 check_options
                                 read_smb_conf
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                    );
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
#    return \%master;

use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_auk_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_add_summary
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_create
                                 AD_bind_admin
                                 AD_dns_get
                                 AD_unbind_admin
                                 AD_user_create
                                 AD_group_create
                                 AD_group_addmember
                                 AD_group_update
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_dn_fetch_multivalue
                                 AD_object_search
                                 AD_get_passwd
                                 get_forbidden_logins
                                    );


my @arguments = @ARGV;

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen f端r Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $json=0;
my $backup_samba="";
my $restore_samba="";
my $schema_load=0;
my $restart=0;
my $stop=0;
my $start=0;

my $edit_searchflags="";
my $editor="emacs";

my $samba_private="/var/lib/samba/private";
my $samba_private_d="/var/lib/samba/private/sam.ldb.d";

my %smb_conf=();
&read_smb_conf(\%smb_conf);
#print Dumper( \%smb_conf );

# Parsen der Optionen
my $testopt=GetOptions(
           "info|i" => \$info,
           "help|h" => \$help,
           "backup-samba=s" => \$backup_samba,
           "restore-samba=s" => \$restore_samba,
           "edit-searchflags=s" => \$edit_searchflags,
           "editor=s" => \$editor,
           "schema-load" => \$schema_load,
           "start" => \$start,
           "stop" => \$stop,
           "restart" => \$restart,
          );

my %sophomorix_result=&result_sophomorix_init("sophomorix-add");
# Pr端fen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt,\%sophomorix_result,$json);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$json);
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse,\%sophomorix_result);
my ($smb_admin_pass)=&AD_get_passwd($DevelConf::sophomorix_file_admin,
                                     $DevelConf::secret_file_sophomorix_file_admin);

# Pr端fen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-add adds users from the file sophomorix.add to the sophomorix 
database and the authentification system.

Options
  -h  / --help
  --backup-samba suffix    (backups the database)
  --restore-samba suffix   (restores the database)
  --schema-load            (loads the sophomorix-schema)

  --restart                (restarts samba)
  --stop                   (stops samba)
  --start                  (starts samba)

If you forgot the suffix look here:
# ls -l /var/lib/samba/private/*ldb*


You shold know exactly what you are doing, if you use the following options:

Editing searchFlags of <attribute> with an editor (default is emacs):
  --edit-searchflags <attribute> (--editor <nano>|<vi>) 
    (use hyphenated name for <attribute>)
  Example
    --edit-searchflags sophomorix-Comment (--editor vi)
       searchFlags: 0    -> public visible attribute
       searchFlags: 128  -> confidential attribute

Please see the sophomorix-add(8) man pages for full documentation
');
   print "\n";
   exit;
}


# --backup-samba
if ($backup_samba ne ""){
    print "\nBacking up samba databases with suffix -$backup_samba\n\n";
    my @ldb_files = &get_ldb_files();
    print "##### saving ldb files: #####\n";
    foreach my $ldb (@ldb_files){
        my $command="cp -v ${samba_private}/${ldb} ${samba_private}/${ldb}-${backup_samba}";
        #print "  $command\n";
        system($command);
    } 
    my @ldb_files_d = &get_ldb_d_files();
    print "##### saving ldb files: #####\n";
    foreach my $ldb_d (@ldb_files_d){
        my $command="cp -v ${samba_private_d}/${ldb_d} ${samba_private_d}/${ldb_d}-${backup_samba}";
        #print "  $command\n";
        system($command);
    } 
    exit;
}


# --restore-samba
if ($restore_samba ne ""){
    print "\nRestoring samba databases with suffix -$restore_samba\n\n";
    &samba_stop();
    my @ldb_files = &get_ldb_files();
    print "##### restoring ldb files: #####\n";
    foreach my $ldb (@ldb_files){
        my $command="cp -v ${samba_private}/${ldb}-${restore_samba} ${samba_private}/${ldb} ";
        #print "  $command\n";
        system($command);
    } 
    my @ldb_files_d = &get_ldb_d_files();
    print "##### restoring ldb files: #####\n";
    foreach my $ldb_d (@ldb_files_d){
        my $command="cp -v ${samba_private_d}/${ldb_d}-${restore_samba} ${samba_private_d}/${ldb_d} ";
        #print "  $command\n";
        system($command);
    } 
    &samba_start();
}


# --schema-load
if ($schema_load==1){
    print "\nLoading sophomorix schema into ldap\n\n";
    my $dn=$smb_conf{'samba'}{'from_smb.conf'}{'DomainDNS'};
    &samba_stop();
    my $command="cd /usr/share/sophomorix/schema; ./sophomorix_schema_add.sh $dn . -H /var/lib/samba/private/sam.ldb -writechanges";
    print "$command\n";
    system($command);
    &samba_start();
}


# --set-confidential / --set-nonconfidential /
if ($edit_searchflags ne ""){
    my $attribute=$edit_searchflags;

    my $command="ldbedit --editor ".$editor." -H /var/lib/samba/private/sam.ldb CN=".
                $attribute." searchflags --option=\"dsdb:schema update allowed=yes\"".
                " -b CN=schema,CN=configuration,".$root_dse;
    print "$command\n";

    system($command);

    #my $ldif="dn: CN=Sophomorix-Comment,CN=Schema,CN=Configuration,DC=linuxmuster,DC=local\n".
    #         "searchFlags: 1\n";


}


# --start
if ($start==1){
    print "\nStarting samba\n\n";
    &samba_start();
}


# --stop
if ($stop==1){
    print "\nStopping samba\n\n";
    &samba_stop();
}


# --restart
if ($restart==1){
    print "\nRestarting samba\n\n";
    &samba_stop();
    &samba_start();
}


############################################################
# subs
############################################################

sub samba_stop {
    system("/etc/init.d/samba stop");
}



sub samba_start {
    system("/etc/init.d/samba start");
}



sub get_ldb_files {
    my @files=();
    opendir SAMBADB, $samba_private or return;
    foreach my $file (readdir SAMBADB){
        if ($file eq "."){next};
        if ($file eq ".."){next};
        if ($file=~m/.ldb$/){
            push @files,$file;
        }
    }
    closedir SAMBADB;
    @files = sort @files;
    return @files;
}



sub get_ldb_d_files {
    my @files=();
    opendir SAMBADB, $samba_private_d or return;
    foreach my $file (readdir SAMBADB){
        if ($file eq "."){next};
        if ($file eq ".."){next};
        if ($file=~m/.ldb$/){
	    push @files,$file;
        }
    }
    closedir SAMBADB;
    @files = sort @files;
    return @files;
}
