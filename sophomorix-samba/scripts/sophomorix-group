#!/usr/bin/perl -w
# This script (sophomorix-group) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or jeffbeck@linuxmuster.net

# modules
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Net::LDAP;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
use JSON;use JSON;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 json_dump
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_create
                                 AD_bind_admin
                                 AD_dns_get
                                 AD_unbind_admin
                                 AD_get_name_tokened
                                 AD_group_create
                                 AD_group_update
                                 AD_group_fetch
                                 AD_group_kill
                                 AD_group_addmember
                                 AD_group_removemember
                                 AD_get_passwd
                                 AD_get_groups_v
                                 AD_get_full_groupdata
                                    );

my @arguments = @ARGV;

# ===========================================================================
# Variablen
# ==========================================================================

my $help=0;
my $info=0;
my $json=0;

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

$Conf::log_level=1;

my $school="---";

my $group="";
my $create=0;
my $kill=0;
my $addmember="";
my $removemember="";
my $creategroup="";
my $addgroup="";
my $removegroup="";

my $description;
my $addquota;
my $addmailquota;
my $mailalias;
my $maillist;

my $skiplock=0;

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "json|j+" => \$json,
           "verbose|v+" => \$Conf::log_level,
           "skiplock" => \$skiplock,
           "group|g=s" => \$group,
           "create" => \$create,
           "kill" => \$kill,
           "school=s" => \$school,
           "addmember=s" => \$addmember,
           "removemember=s" => \$removemember,
           "addgroup=s" => \$addgroup,
           "removegroup=s" => \$removegroup,
           "description=s" => \$description,
           "addquota=s" => \$addquota,
           "addmailquota=s" => \$addmailquota,
           "mailalias!" => \$mailalias,
           "maillist!" => \$maillist,
          );

my %sophomorix_result=&result_sophomorix_init("sophomorix-group");
# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt,\%sophomorix_result,$json);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$json);
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse,\%sophomorix_result);
my ($smb_admin_pass)=&AD_get_passwd($DevelConf::sophomorix_file_admin,
                                     $DevelConf::secret_file_sophomorix_file_admin);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-group adds/modifies/deletes a group in samba 4 AD

Options:
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info

  --create --group <name>
  --create --group <name>  --school <school>

  --kill --group --group <name>

  --addmember <user> --group <name>
  --removemember <user> --group <name>

  --addgroup group --group <name>
  --removegroup group --group <name>

  --description \'multiple words possible\' --group <name>

  --addquota <share1>:<quota1 in MiB>:<comment1>,<share2>:<quota2 in MiB>:<comment2>,... --group <name>
  --addmailquota <mailquota in MiB>:<Comment> --group <name>

  --mailalias --group <name>, --nomailalias --group <name>
  --maillist --group <name>, --nomaillist --group <name>

Examples:
  Add/remove a user to/from a group:
  sophomorix-group --addmember <user> --group <internet|wifi|*-internet|*-wifi>
  sophomorix-group --removemember <user> --group <internet|wifi|*-internet|*-wifi>

Please see the sophomorix-group(8) man pages for full documentation
');
   print "\n";
   exit;
}



# --info
if ($info==1 and $group eq ""){
    my $ref_group_v=&AD_get_groups_v({ldap=>$ldap,
                                   root_dse=>$root_dse,
                                   root_dns=>$root_dns,
                                   school=>$school,
                                   sophomorix_config=>\%sophomorix_config,
                                 });

    #print Dumper($ref_group_v->{'LISTS'});
    my $jsoninfo="GROUPS_OVERVIEW";
    my $jsoncomment="All Groups";
    &json_dump({json => $json,
                jsoninfo => $jsoninfo,
                jsoncomment => $jsoncomment,
                object_name => $school,
                log_level => $Conf::log_level,
                hash_ref => $ref_group_v,
                sophomorix_config => \%sophomorix_config,
               });
    exit;
}



# --info --class <name>
# list groups and exit
if ($info==1 and $group ne ""){
   my $ref_groups=&AD_get_full_groupdata({ldap=>$ldap,
                                           root_dse=>$root_dse,
                                           root_dns=>$root_dns,
                                           grouplist=>$group,
                                           sophomorix_config=>\%sophomorix_config,
                                      });
    #print Dumper($ref_groups);
    my $jsoninfo="GROUP";
    my $jsoncomment="Group";
    &json_dump({json => $json,
                jsoninfo => $jsoninfo,
                jsoncomment => $jsoncomment,
                object_name => $school,
                log_level => $Conf::log_level,
                hash_ref => $ref_groups,
                sophomorix_config => \%sophomorix_config,
               });
    exit;
}



# # exit if options are missing
# if ($group eq ""){ 
#      print "\nThe option:\n";
#      print "   --group name \n";
#      print "is mandatory.\n\n";
#      exit;
# }



&result_sophomorix_check_exit(\%sophomorix_result,\%sophomorix_config,$json);
&log_script_start(\@arguments,\%sophomorix_result,\%sophomorix_config);




# --create --group <name>
############################################################
if ($create==1 and $group ne ""){
    # avoid names beginning with p_
    if ($group =~ m/^p\_/){
        print "\n";
        print "ERROR: Not creating group $group\n";
        print "       group names beginning with p_ are reserved for projects\n";
        print "\n";
        exit 88;
    }
    &AD_school_create({ldap=>$ldap,
                       root_dse=>$root_dse,
                       root_dns=>$root_dns,
                       school=>$school,
                       smb_admin_pass=>$smb_admin_pass,
                       sophomorix_config=>\%sophomorix_config,
                       sophomorix_result=>\%sophomorix_result,
                     }); 
    my $group_token=&AD_get_name_tokened($group,$school,"sophomorix-group");
    &AD_group_create({ldap=>$ldap,
                      root_dse=>$root_dse, 
                      root_dns=>$root_dns,
                      school=>$school,
                      group=>$group_token,
                      group_basename=>$group,
                      description=>"Created by sophomorix-group",
                      type=>"sophomorix-group",
                      status=>"P",
		      sub_ou=>$sophomorix_config{'INI'}{'OU'}{'AD_project_ou'},
                      smb_admin_pass=>$smb_admin_pass,
                      sophomorix_config=>\%sophomorix_config,
                      sophomorix_result=>\%sophomorix_result,
                    });
}


# --kill --group <name>
############################################################
if ($kill==1 and $group ne ""){
  my $group_token=&AD_get_name_tokened($group,$school,"sophomorix-group");
  &AD_group_kill({ldap=>$ldap,
                  root_dse=>$root_dse,
                  root_dns=>$root_dns,
                  group=>$group_token,
                  smb_admin_pass=>$smb_admin_pass,
                  type=>"sophomorix-group",
                  sophomorix_config=>\%sophomorix_config,
                  });
}



# --removemember member
if ($removemember ne ""){
    &AD_group_removemember({ldap => $ldap, 
                            root_dse => $root_dse, 
                            group => $group,
                            removemember => $removemember,
                          });   
}


# --addmember member
if ($addmember ne ""){
    &AD_group_addmember({ldap => $ldap, 
                         root_dse => $root_dse, 
                         group => $group,
                         addmember => $addmember,
                       });   
}

# --removegroup group
if ($removegroup ne ""){
    &AD_group_removemember({ldap => $ldap, 
                            root_dse => $root_dse, 
                            group => $group,
                            removegroup => $removegroup,
                          });   
}


# --addgroup group
if ($addgroup ne ""){
    &AD_group_addmember({ldap => $ldap, 
                         root_dse => $root_dse, 
                         group => $group,
                         addgroup => $addgroup,
                       });   
}





# get dn if project exists and continue
############################################################
my ($dn_group,$count,$school_AD)=&AD_group_fetch($ldap,$root_dse,$group);

# --description <strg>
if (defined $description){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_group,
		      school=>$school_AD,
                      type=>"sophomotix-group",
                      description=>$description,
                      sophomorix_config=>\%sophomorix_config,
                    });
}


# --addquota <strg>
if (defined $addquota){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_group,
		      school=>$school_AD,
                      type=>"sophomotix-group",
                      addquota=>$addquota,
                      sophomorix_config=>\%sophomorix_config,
                    });
}


# --addmailquota <strg>
if (defined $addmailquota){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_group,
		      school=>$school_AD,
                      type=>"sophomotix-group",
                      addmailquota=>$addmailquota,
                      sophomorix_config=>\%sophomorix_config,
                    });
}


# --mailalias/nomailalias
if (defined $mailalias){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_group,
		      school=>$school_AD,
                      type=>"sophomotix-group",
                      mailalias=>$mailalias,
                      sophomorix_config=>\%sophomorix_config,
                    });
}


# --maillist/--nomaillist
if (defined $maillist){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_group,
		      school=>$school_AD,
                      type=>"sophomotix-group",
                      maillist=>$maillist,
                      sophomorix_config=>\%sophomorix_config,
                    });
}



&AD_unbind_admin($ldap);

&log_script_end(\@arguments,\%sophomorix_result,\%sophomorix_config,$json);
