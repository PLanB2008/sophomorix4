#!/usr/bin/perl -w
# This script (sophomorix-device) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# valid pxe options
# pxe==0 -> no pxe, accounts nach field 10
# pxe==alle anderen -> pxe, accounts nach field 10    (option ml)
#

# field 6, MS-Office-Key
# string: xxxxx-yyyyy-zzzzz-vvvvv-uuuuu


# field 7, MS-Windows-Key
# string: xxxxx-yyyyy-zzzzz-vvvvv-uuuuu

# field 8:
# unused, fuer linuxmuster.net reserviert [0-9a-zA-Z_-.,]

# field 9:
# permanently unused. sysadmin can use it [0-9a-zA-Z_-.,]
# 

# field 10, last bpbatch option: new: account_flag
# 0         : device ohne account, mit firewall
# 1         : device ohne account, ohne firewall
# 2-6   
# 
# 

# sophomorix-device macht
# - nicht: obsolete accounts und raeume entfernen
# - neue accounts und raume anlegen
# - Aufruf: sophomorix-device
# - Rueckgabewerte:
# - 0: alles OK
# - 1: Fehler Allgemein. import_workstations bricht ab



## ???? additional:
# remove workstation homes that have no matching account


## --print
# add this to doku and man page:
# 1. Die Ergebnisdatei entsteht in /etc/linuxmuster/

# 2. Formatieren Sie /etc/linuxmuster/workstations mit Kommentaren:
#      # Das wird eine Überschrift     (1 #-Zeichen)
#      ## Das bleibt unberücksichtigt  (2 #-Zeichen) 

# Todo für ML 6.0
# oneside/twoside konfigurierbar
# Unter 1 aufgeführte Variablen selber ermitteln
# Text in lang-Datei auslagern

# show italcrooms/teacherhosts and classrooms at --print



# ===========================================================================
# Bibliotheken
# ===========================================================================

# uncomment to suppress warnings about longer than FFFFFFFF hex values as MAC
#no warnings 'portable';  
#no warnings 'overflow';

use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Time::Local;
use Time::localtime;
use Term::ANSIColor qw(:constants); # farbiger Text RED, BLUE, ...
# nach jedem Printbefehl wieder auf Standardfarbe zurücksetzen
$Term::ANSIColor::AUTORESET = 1;
use Net::LDAP;
use Net::DNS;
use Net::MAC;
use Date::Calc qw(check_date);
use Data::Dumper;
$Data::Dumper::Indent = 6;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
use JSON;
use File::Basename qw( basename
                       dirname
                     ); 
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_auk_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 dns_query_ip
                                 json_dump
                                 filelist_fetch
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_create
                                 AD_get_passwd
                                 AD_bind_admin
                                 AD_unbind_admin
                                 AD_user_create
                                 AD_computer_create
                                 AD_group_create
                                 AD_group_kill
                                 AD_group_addmember
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_get_AD
                                 AD_object_search
                                 AD_user_kill
                                 AD_computer_kill
                                 AD_dns_get
                                 AD_dns_create
                                 AD_dns_zonecreate
                                 AD_dns_kill
                                 AD_dns_zonekill
                                 get_forbidden_logins
                                    );



my @arguments = @ARGV;

my $today=`date +%d.%m.%Y`;
chomp($today);

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
$Conf::log_level=1;
my $help=0;
my $info=0;
my $json=0;
my $list_files=0;
my $no_sync=0;
my $birthdate="1970-01-01";
my $time_stamp_AD=&time_stamp_AD();
my @passwort_zeichen=&get_passwd_charlist();
my $sophomorix_first_password="";

# schools that have been created in this script
my $role="";
my $school="";
my $prefix="";
my %school_created=();
$school_created{$school}="created";
my $dump_files=0;
my $dump_AD=0;
my $print=0;
my $pass="12345678";
my $password="";

# where data from workstation file is saved
my @domcomputers_file=(); # list ordered
my %devices_file=();
# device   -> $name     -> ACCOUNT 0/1
#                       -> FILENAME
#                       -> HWK
#                       -> IPv4
#                       -> MAC
#                       -> MS_OFFICE_KEY
#                       -> MS_WINDOWS_KEY
#                       -> OU
#                       -> PATH_ABS
#                       -> ROOM
#                       -> SCHOOL
#                       -> COMPUTER    (capitalized name)
#                       -> COMPUTER_DOLLAR (capitalized with $)
#
# room     -> $room     -> HOSTS
#                       -> IPv4
#                       -> MAC
#                       -> CLASSROOM=TRUE/FALSE 
# dnsNode  -> $dnsNode  -> $IP
# dnsZone  -> $dnsZone  -> name
# computer -> $computer -> ROOM
#                       -> OU
#                       -> SCHOOL
#                       -> COMPUTER    (capitalized name)
#                       -> COMPUTER_DOLLAR (capitalized with $)
#



# italc
# my $italc_owner="root";
# my $italc_dir="";
# my $italc_conf_dir="/etc/linuxmuster/sophomorix/italc";
# my $italc_conf=$italc_conf_dir."/italcrooms.conf";
# my $italc_key_dir=$italc_conf_dir."/private";
# my $italc_key_dir_admin=$italc_key_dir."/admin";
# my $italc_key_dir_supporter=$italc_key_dir."/supporter";
# my $italc_key_dir_teacher=$italc_key_dir."/teacher";
# # italc
# my $w_coord=169;
# my $h_coord=126;
# my $x_coord="xxxxxxxxxxxx";
# my $y_coord="yyyyyyyyyyyy";
# my @x_coord=(0,171,342,513,0,171,342,513,
#              0,171,342,513,0,171,342,513,
#              0,171,342,513,0,171,342,513,
#              0,171,342,513,0,171,342,513,
#              0,171,342,513,0,171,342,513); # max 40 hosts
# my @y_coord=(0,0,0,0,128,128,128,128,
#              256,256,256,256,384,384,384,384,
#              512,512,512,512,640,640,640,640,
#              768,768,768,768,896,896,896,896,
#              1024,1024,1024,1024,1152,1152,1152,1152); # max 40 hosts
# my %italc_rooms=();
# my @italc_rooms=();

# classrooms
my %class_rooms=();
# ?????????????ß configure classrooms from other
$class_rooms{'j1010'}="seen";
$class_rooms{'j1008'}="seen";
$class_rooms{'bsz-j1010'}="seen";
$class_rooms{'bsz-j1008'}="seen";

my $set_computer_passwords=0;
my $dns_test=0;
my $dns_show=0;
my $dns_kill=0;


my %host_seen=();
my %mac_seen=();
my %ip_seen=();

# # ExamAccounts
# my @adding_examaccounts=();
# my @killing_examaccounts=();
# my @killing_examaccount_rooms=();



# Computers
my @adding_computers=();
my @killing_computers=();
my @killing_computer_rooms=();

# dnsZones
my @adding_dnszones=();
my @killing_dnszones=();

# dnsNodes
my @adding_dnsnodes=();
my @killing_dnsnodes=();

my %pxe = qw(ml ok
            );

my %ms_key_ok = ();
$ms_key_ok{"---"}="ok";
$ms_key_ok{""}="ok";



# Parsen der Optionen
my $testopt=GetOptions(
       "help|h" => \$help,
       "i|info" => \$info,
       "json|j+" => \$json,
       "verbose|v+" => \$Conf::log_level,
       "list-files" => \$list_files,
       "p|print" => \$print,
       "dump-AD" => \$dump_AD,
       "dump-files" => \$dump_files,
       "no-sync|nosync" => \$no_sync,
       "set-computer-passwords" => \$set_computer_passwords,
       "dns-test" => \$dns_test,
       "dns-kill" => \$dns_kill,
       "dns-show" => \$dns_show,
       "password=s" => \$password,
#       "italc-dir=s" => \$italc_dir,
          );


my %sophomorix_result=&result_sophomorix_init("sophomorix-device");
# Prüfen, ob Optionen erkannt wurden
&check_options($testopt,\%sophomorix_result,$json);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$json);
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse,\%sophomorix_result);
#my $smb_pwd=&AD_get_passwd($DevelConf::sophomorix_AD_admin,$DevelConf::secret_file_sophomorix_AD_admin); # needed for using samba-tool
my ($smb_admin_pass)=&AD_get_passwd($DevelConf::sophomorix_file_admin,
                                     $DevelConf::secret_file_sophomorix_file_admin);

my @filelist=&filelist_fetch({filetype=>"devices",
                              sophomorix_config=>\%sophomorix_config,
                            });

# set linuxmuster.local as a dnsZone needed in files
$devices_file{'dnsZone'}{$root_dns}="seen";

#print Dumper(\%sophomorix_config{'FILES'});

############################################################################
# --help
############################################################################
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print('
sophomorix-device adds Devices to the system:
    DomainComputerAccount
    DNS entries 

Options:
  -h   /  --help
  -i   /  --info
  --list-files              (list processed files and exit)
  -v   /  --verbose
  -vv  /  --verbose --verbose

Synchronize the devices:
  sophomorix-device

Just show what would be done (but do not do it):
  sophomorix-device --no-sync

Managing accounts:
  --set-computer-passwords  (set computer passwords to 12345678)
  --password password       (use password instead of 12345678)

Managing DNS:
  --dns-test (do DNS queries for devices in files)
  --dns-kill (remove all DNS-Nodes and DNS-Zones shown by --dns-show)
  --dns-show (show DNS-Nodes and DNS-Zones created by sophomorix)

Dumping data:                     
  --dump-files -j                  (dump contents of user files)
  --dump-AD -j                     (dump AD data)
  --dump-matches -j                (dump matched users)

Obsolete: Managing italc:
          --italc-dir /path/to/dir  (create italc files in /path/to/dir:
                                   italcroom/globalconfig.xml)


Please see the sophomorix-device(8) man pages for full documentation
');
   print "\n";
   exit 0;
}



############################################################################
# --list-files (does not modify system)
############################################################################
if ($list_files==1){
    print "\n";
    &print_title("Reading the following device files:");
    foreach my $file (@filelist){
        print "   * $file\n";
    }
    exit;
}



############################################################################
# --dns-test     (does not modify system)
############################################################################
if ($dns_test==1){
    my $res   = Net::DNS::Resolver->new;
    &print_title("Testing if DNS works for devices in these files:");
    foreach my $device_file (@filelist){
        print "   * $device_file\n";
    }
    foreach my $device_file (@filelist){
        my $filename = basename($device_file);
        $school=$sophomorix_config{'FILES'}{'DEVICE_FILE'}{$filename}{'SCHOOL'};
       open(DEVICES,"$device_file") || 
             die "ERROR: $device_file not found!";  
        while(<DEVICES>){
            &analyze_device_line($_,$device_file,$filename,$school);
        }
        close(DEVICES);
    }
    # --dump-files
    if ($dump_files==1){
        &json_dump({json => $json,
                    jsoninfo => "DEVICES_FILE",
                    jsoncomment => "All devices read from all user files",
                    hash_ref=>\%devices_file,
                    sophomorix_config=>\%sophomorix_config,
                  });
    }
    foreach my $host (@domcomputers_file){
        my $file_ip=$devices_file{'device'}{$host}{"IPv4"};
        my $reply = $res->search($host);
        if ($reply) {
            foreach my $rr ($reply->answer) {
                next unless $rr->type eq "A";
                #print $rr->address, "\n";
                if ($file_ip eq $rr->address){
                    print "OK: $host has IP: ",$rr->address,"\n";
                } else {
                    print "ERROR $host has IP: ",
                          $rr->address," (expected was $file_ip)\n";
                }
            }
        } else {
            # no reply: query failed
             warn "    * query failed: ", 
                 $res->errorstring, 
                 " ($host has expected IP $file_ip)\n";
        }
    }
    exit;
}



############################################################################
# --dns-show / --dns-kill
############################################################################

if ($dns_show==1 or $dns_kill==1){
    my $res   = Net::DNS::Resolver->new;
    my @zonelist=();
    my %zonehash=();
    my @zone_delete=(); # samba-tool command to delete node

    # Fetch dnsZones and their DN
    my $base="DC=DomainDnsZones,".$root_dse;
    my $filter="(&(objectclass=dnsZone) (name=*))";
    my $mesg = $ldap->search(
                      base   => $base,
                      scope => 'sub',
                      filter => $filter,
                      attr => ['cn']
                            );
    my $max_zone = $mesg->count;
    for( my $index = 0 ; $index < $max_zone ; $index++) {
        my $entry = $mesg->entry($index);
        my $admin_description=$entry->get_value('adminDescription');
        my $zone_name=$entry->get_value('name');
        if (defined $admin_description and # attribute is defined
           $admin_description=~m/^$DevelConf::dns_zone_prefix_string/ and # attribute starts with prefix
           $zone_name ne $root_dns # do not add $root_dns 
           ){
            # list of sophomorix dnsZones without $root_dns
            # these Zones will be deleted
            push @zonelist, $zone_name;

        }
        my ($count,$dn_dns_zone,$cn_dns_zone,$info)=
            &AD_object_search($ldap,$root_dse,"dnsZone",$zone_name);
        $zonehash{$zone_name}{'DN'}=$dn_dns_zone;
        $zonehash{$zone_name}{'CN'}=$cn_dns_zone;
        $zonehash{$zone_name}{'count'}=$count;
        $zonehash{$zone_name}{'adminDescription'}=$info;
    }
    # add the $root_dns zone (will not be deleted later)
    unshift @zonelist, $root_dns;

    # print output starts here
    my $zone_count=1;
    foreach my $zone (@zonelist){
        &Sophomorix::SophomorixBase::print_title("dnsZone $zone_count) $zone:");
        # dnsNodes in this dnsZone
        my $base=$zonehash{$zone}{'DN'};
        my $filter="(&(objectclass=dnsNode) (name=*) (adminDescription=".
                   $DevelConf::dns_node_prefix_string.
                   "*))";
        my $mesg = $ldap->search(
                      base   => $base,
                      scope => 'sub',
                      filter => $filter,
                      attr => ['cn']
                            );
        my $max_node = $mesg->count;
        for( my $index = 0 ; $index < $max_node ; $index++) {
            my $entry = $mesg->entry($index);
            my $name=$entry->get_value('name');
            my $ipv4=&Sophomorix::SophomorixBase::dns_query_ip($res,$name);
            print "   * $name  ->  $ipv4\n";
            if ($dns_kill==1){
                &AD_dns_kill({ldap=>$ldap, 
                              root_dse=>$root_dse,
                              root_dns=>$root_dns,
                              dns_zone=>$zone,
                              dns_node=>$name,
                              dns_ipv4=>$ipv4,
                              smb_pwd=>$smb_admin_pass,
                            });
           }
        }
        if ($dns_kill==1){
            if ($zone ne $root_dns){
            &AD_dns_zonekill({ldap=>$ldap, 
                              root_dse=>$root_dse,
                              dns_zone=>$zone,
                              smb_pwd=>$smb_admin_pass,
                            });
            } else {
                print "   * Skipping killing provisioned zone $zone\n";
            }
            $zone_count++;
        }
    }
    exit;
}


# ===========================================================================
# fetching data
# ===========================================================================
&print_title("Asking the system for Computers and DNS data ...");

# fetch system data
my ($ref_AD) = &AD_get_AD({ldap=>$ldap,
                           root_dse=>$root_dse,
                           root_dns=>$root_dns,
                           computers=>"TRUE",
                           rooms=>"TRUE",
                           #examaccounts=>"TRUE",
                           dnszones=>"TRUE",
                           dnsnodes=>"TRUE",
                           sophomorix_config=>\%sophomorix_config,
             });
my %AD= %$ref_AD; 

# /etc/linuxmuster/classroom
# ?????????????????????????
#&get_classrooms();


# --dump-AD
if ($dump_AD==1){
    &json_dump({json => $json,
                jsoninfo => "SEARCH",
                jsoncomment => "AD Content",
                hash_ref=>\%AD,
                sophomorix_config=>\%sophomorix_config,
               });
}


if ($print==1){
    print "--print not working\n";
    exit;
}

# # ===========================================================================
# # --print     (does not modify system)
# # ===========================================================================
# if ($print==1){
#     if (not -e ${host_workstation}){
#         print "\n$host_workstation does not exist\n\n";
#         exit 1;
#     }

#     my $admins="";
#     if (defined $Conf::admins_print){
#         if ($Conf::admins_print ne ""){
# 	    $admins=$Conf::admins_print;
#         }
#     }

#     my $out_base="/etc/linuxmuster/workstations_formatted";
#     my $out_dir="/etc/linuxmuster";
#     my $out_file="$out_base".".tex";
#     my $out_file_dvi="$out_base".".dvi";
#     my @line=();
#     my $host=0; # counter for the hosts
#     # draw a horizontal line in the table after this many lines of text
#     my $hor_lines=5; 
#     my $line_count=1;

#     print "Writing to $out_file";
#     open(TEX, ">$out_file");

#     print TEX '\documentclass[a4paper, twoside]{article}',"\n",
#           '\usepackage{longtable}',"\n",
#           '\usepackage{ngerman}',"\n",
#           '\usepackage{layout}',"\n",
#           '\usepackage{fancyhdr}',"\n",
#           '\usepackage{lastpage}',"\n",
#           '\setlength{\oddsidemargin}{-5mm}',"\n",
#           '\setlength{\evensidemargin}{-16.8mm}',"\n",
#           '\setlength{\textwidth}{180mm}',"\n",
#           '\setlength{\textheight}{255mm}',"\n",
#           '\setlength{\topmargin}{-20mm}',"\n",
#           '\pagestyle{fancy}',"\n",
#           "\\lhead{$Conf::schul_name}","\n",
#           "\\rhead{Seite \\thepage/\\pageref{LastPage}}","\n",
#           "\\cfoot{$admins}","\n",
#           '\pagestyle{fancy}',"\n",
#           '\renewcommand{\baselinestretch}{1.2}',"\n\n",

#           '\begin{document}',"\n\n",
#           # show layout of page
#           # '\layout',"\n\n",
#           '\begin{longtable}{|r|c|c|c|c|c|} ',"\n",
#           '   \caption*{\large \bfseries Rechner und ',
#           '             Drucker ',
#           "($Conf::schul_name)",
#           '}\\\\ \\hline',"\n",
#           '   \bfseries Nr. & \bfseries DNS-Name & \bfseries Raum & ',
#           '      \bfseries HW-Klasse & \bfseries IP-Adresse & ',
#           '      \bfseries MAC-Adresse \\\\ \hline \hline',"\n",
#           '   \endhead',"\n",
#           '      \hline \multicolumn{6}{r}{Fortsetzung auf der n\"{a}chsten Seite ...}',"\n",
#           '   \endfoot',"\n",
#           '      \hline ',"\n",
#           '   \endlastfoot',"\n";

#     open(IN, "<${host_workstation}");
#     while(<IN>){
#         chomp();
#         my $line=$_;
#         if ($line eq "") {
# 	    next;
#         } elsif(/^\#\#/){
# 	    print "Comment $line \n";
#         } elsif (/^\#/){
# 	    print "Header $line \n";
#             s/^\#//g;
#             if ($line eq "") {
# 	        next;
#             }
#             $line=&latexize_string($line);
#             print TEX "\\hline \\hline  ",
#                  "\\multicolumn{6}{|l|}{\\rule{0mm}{4mm}\\bfseries $line}",
#                  " \\\\ \\hline ","\n";
#         } else {
#             @line = split(/;/);
#             $host++;
#             $host=&latexize_string($host);
#             $line[1]=&latexize_string($line[1]);
#             $line[2]=&latexize_string($line[2]);
#             $line[3]=&latexize_string($line[3]);
#             $line[4]=&latexize_string($line[4]);
#             $line="$host & $line[1] & $line[0] & $line[2]".
#                   " & $line[4] & \\texttt{$line[3]} \\\\ ";
#             print TEX $line; 
#             # Horizontal lines
#              if ($line_count==$hor_lines){
#                  print TEX ' \hline',"\n";
#                  $line_count=0;
#              } else {
#                  print TEX "\n";
#              }
#              $line_count++;
#         }
#     }
#     close(IN);

#     print TEX '\end{longtable}',"\n";
#     print TEX "\\textbf{$host Rechner/Drucker sind im p\"{a}dagogischen ",
#               "Netz ($Conf::schul_name).} \n \n";
#     print TEX "Ausdruck: \\today .",
#               "\n \n",
#               "\\textbf{Die Netzwerkadministratoren:}",
#               "\n",
#               "$admins","\n";
#     print TEX "\n",'\end{document}',"\n";
#     close(TEX);

#     # latex
#     system("cd $out_dir; latex $out_file");
#     system("cd $out_dir; latex $out_file");
#     system("cd $out_dir; dvips $out_file_dvi");
#     exit;
# }



if ($info==1){
    print "--info Not implemented\n";
    exit;
}
# # ===========================================================================
# # --info (does not modify system)
# # ===========================================================================
# if ($info==1){
#     print "\n";
#     &print_title("Reading the following device files:");
#     foreach my $file (@filelist){
#         print "   * $file\n";
#     }

#     # fetch and sort rooms
#     my @rooms=();
#     while (my ($room,$v) = each %rooms_system){
#         push @rooms, $room;
#     }
#     @rooms = sort @rooms;

#     foreach my $room (@rooms){
#         my $classroom="";
#         my $italcroom="";
#         if (exists $class_rooms{$room}){
#             $classroom="(CLASSROOM) ";
#         }
#         if (exists $italc_rooms{$room}){
#             $italcroom="(ITALC ROOM) ";
#         }
# 	print "ROOM: $room ${classroom}${italcroom}\n";
#         # fetch and sort examaccounts
#         my @examaccounts=();
#         while (my ($account,$room_entry) = each %examaccounts_system){
#             #print $account , " ", $roomentry, "\n";
#             if ($room_entry eq $room){
#                 push @examaccounts,$account;
#             }
#         }
#         @examaccounts = sort @examaccounts;
#         foreach my $account (@examaccounts){
#             print "    HOST: $account\n";
#         }
#     }
#     exit 0;
# }




############################################################################
# reading and checking files
############################################################################
# reading and checking all device files
foreach my $device_file (@filelist){
    my $filename = basename($device_file);
    $school=$sophomorix_config{'FILES'}{'DEVICE_FILE'}{$filename}{'SCHOOL'};
    &print_title("Reading $device_file");
    open(DEVICES,"$device_file") || 
         die "ERROR: $device_file not found!";  
    while(<DEVICES>){
        &analyze_device_line($_,$device_file,$filename,$school);
    }
    close(DEVICES);
}


############################################################################
# Decide what must be done
############################################################################

# # ExamAccounts to kill
# foreach my $examaccount (keys %{$AD{'objectclass'}{'user'}{'examaccount'}}) {
#     if (not exists $devices_file{'device'}{$examaccount}){
#         # host is not in file anymore
#         &push_kill_examaccount($examaccount);
#     }
# }


# # ExamAccounts to add
# foreach my $examaccount (keys %{$devices_file{'device'}}) {
#     if (not exists $AD{'objectclass'}{'user'}{'examaccount'}{$examaccount}){
#         # host is not in system
#         # examaccounts only for classroom devices and 
#         my $room=$devices_file{'device'}{$examaccount}{'ROOM'};
#         if (exists $class_rooms{$room} and $devices_file{'device'}{$examaccount}{'ACCOUNT'} eq "TRUE"){
#             &push_add_examaccount($examaccount);
#         } else {
#             # not adding
#         }
#     } else {
#         # device is not in correct room -> update (kill and add)
#         if ($AD{'objectclass'}{'user'}{'examaccount'}{$examaccount}{'room'} ne 
#             $devices_file{'device'}{$examaccount}{'ROOM'}){
#             if($Conf::log_level>=2){
# 	        print "$examaccount: Changed room from ",
#                       "$AD{'objectclass'}{'user'}{'examaccount'}{$examaccount}{'room'}",
#                       " to $devices_file{'device'}{$examaccount}{'ROOM'}\n";
#             }
#             &push_kill_examaccount($examaccount);
#             &push_add_examaccount($examaccount);
#         }
#         # sophomorixAdminFile ist not correct
#         if ($AD{'objectclass'}{'user'}{'examaccount'}{$examaccount}{'sophomorixAdminFile'} ne 
#             $devices_file{'device'}{$examaccount}{'FILENAME'}){
#             if($Conf::log_level>=2){
# 	        print "$examaccount: Was moved from file ",
#                       "$AD{'objectclass'}{'user'}{'examaccount'}{$examaccount}{'sophomorixAdminFile'}",
#                       " to $devices_file{'device'}{$examaccount}{'FILENAME'}\n";
#             }
#             &push_kill_examaccount($examaccount);
#             &push_add_examaccount($examaccount);
#         }


#     }
# }


# # ExamAccount rooms to kill
# foreach my $room (keys %{$AD{'objectclass'}{'group'}{'room'}}) {
#     if (not exists $devices_file{'room'}{$room}){
#         # host is not in file anymore
#         &push_kill_examaccount_room($room);
#     }
# }


# computer rooms to kill
foreach my $room (keys %{$AD{'objectclass'}{'group'}{'room'}}) {
    if (not exists $devices_file{'room'}{$room}){
        # host is not in file anymore
        &push_kill_computer_room($room);
    }
}


# computers to kill
foreach my $computer (keys %{$AD{'objectclass'}{'computer'}{'computer'}}) {
    if (not exists $devices_file{'computer'}{$computer}){
        # host is not in file anymore
        &push_kill_computer($computer);
    }
}


# computers to add
foreach my $computer (keys %{$devices_file{'computer'}}) {
    if (not exists $AD{'objectclass'}{'computer'}{'computer'}{$computer} ){
        # nonexisting --> add account
        &push_add_computer($computer);
    }
}


# dnsNodes to kill
foreach my $dnsnode (keys %{$AD{'objectclass'}{'dnsNode'}{$DevelConf::dns_node_prefix_string}}) {
    if (not exists $devices_file{'dnsNode'}{$dnsnode}){
        # host is not in file anymore
        &push_kill_dnsnode($dnsnode);
    }
}



# dnsNodes to add
foreach my $dnsnode (keys %{$devices_file{'dnsNode'}}) {
    if (not exists $AD{'objectclass'}{'dnsNode'}{$DevelConf::dns_node_prefix_string}{$dnsnode} ){
        # nonexisting --> add account
        &push_add_dnsnode($dnsnode);
    } elsif (exists $AD{'objectclass'}{'dnsNode'}{$DevelConf::dns_node_prefix_string}{$dnsnode} ){
        my $ip_system=$AD{'objectclass'}{'dnsNode'}{$DevelConf::dns_node_prefix_string}{$dnsnode}{'IPv4'};
        my $ip_file=$devices_file{'dnsNode'}{$dnsnode};
        if ($ip_system ne $ip_file){
            # recreate dns entry
            print "WARNING: $dnsnode exists with $ip_system, but should be $ip_file\n";
            &push_kill_dnsnode($dnsnode);
            &push_add_dnsnode($dnsnode);
        } else {
            if($Conf::log_level>=3){
                print "   OK: $dnsnode exists with $ip_system",
                      " (= $ip_file from file)\n";
            }
        }
    }
}


# dnsZones to kill
foreach my $dnszone (keys %{$AD{'objectclass'}{'dnsZone'}{$DevelConf::dns_zone_prefix_string}}) {
    if (not exists $devices_file{'dnsZone'}{$dnszone}){
        # dns node is not needed anymore, no host
        &push_kill_dnszone($dnszone);
    }
}



# dnsZones to add
foreach my $dnszone (keys %{$devices_file{'dnsZone'}}) {
    if (not exists $AD{'objectclass'}{'dnsZone'}{$DevelConf::dns_zone_prefix_string}{$dnszone} ){
        # nonexisting --> add dnszone
        &push_add_dnszone($dnszone);
    }
}




# --dump-files
if ($dump_files==1){
    &json_dump({json => $json,
                jsoninfo => "DEVICES_FILE",
                jsoncomment => "All devices read from all user files",
                hash_ref=>\%devices_file,
                sophomorix_config=>\%sophomorix_config,
              });
}


############################################################################
if($no_sync==1){
    # show info about what will be done
    my $count=0;
    # # ExamAccounts
    # print "\n";
    # $count=$#killing_examaccounts+1;
    # &print_title("ExamAccounts that must be killed ($count):");
    # foreach my $ws (@killing_examaccounts){
    #     print "KILL: $ws\n";
    # }
    # print "\n";
    # $count=$#adding_examaccounts+1;
    # &print_title("ExamAccounts that must be added ($count):");
    # foreach my $ws (@adding_examaccounts){
    #     print "ADD: $ws\n";
    # }
    # print "\n";
    # $count=$#killing_examaccount_rooms+1;
    # &print_title("ExamAccounts rooms that must be killed ($count):");
    # foreach my $room (@killing_examaccount_rooms){
    #     print "KILL: $room\n";
    # }


    # computer rooms
    print "\n";
    $count=$#killing_computer_rooms+1;
    &print_title("Computer rooms that must be killed ($count):");
    foreach my $room (@killing_computer_rooms){
        print "KILL: $room\n";
    }

    # Computers
    print "\n";
    $count=$#killing_computers+1;
    &print_title("Computers that must be killed: ($count)");
    foreach my $ws (@killing_computers){
        print "KILL: $ws\n";
    }
    print "\n";
    $count=$#adding_computers+1;
    &print_title("Computers that must be added: ($count)");
    foreach my $ws (@adding_computers){
        print "ADD: $ws\n";
    }

    # dnsZones
    print "\n";
    $count=$#killing_dnszones+1;
    &print_title("DNS-Zones that must be killed: ($count)");
    foreach my $dns_zone (@killing_dnszones){
        print "KILL: $dns_zone\n";
    }
    print "\n";
    $count=$#adding_dnszones+1;
    &print_title("DNS-Zones that must be added: ($count)");
    foreach my $dns_zone (@adding_dnszones){
        print "ADD: $dns_zone\n";
    }

    # dnsNodes
    print "\n";
    $count=$#killing_dnsnodes+1;
    &print_title("DNS-Nodes that must be killed: ($count)");
    foreach my $dns_node (@killing_dnsnodes){
        print "KILL: $dns_node\n";
    }
    print "\n";
    $count=$#adding_dnsnodes+1;
    &print_title("DNS-Nodes that must be added: ($count)");
    foreach my $dns_node (@adding_dnsnodes){
        print "ADD: $dns_node\n";
    }

    print "\n--no-sync  finished. Nothing changed!\n";
    exit;
} 



&result_sophomorix_check_exit(\%sophomorix_result,$json);
# ===========================================================================
# Modifying System
# ===========================================================================
&log_script_start(\@arguments,\%sophomorix_result);
#&get_italcrooms();


# ===========================================================================
# Synchronizing ExamAccounts and Workstations
# ===========================================================================

if ($no_sync==0){ # $no_sync==0 -> SYNC
    ############################################################
    # # kill examaccounts
    # &print_title("ExamAccounts to be killed:");
    # my $kill_count=1;
    # foreach my $exam_account (@killing_examaccounts){
    #     print "   * Killing ExamAccount $exam_account ...\n";
    #     &AD_user_kill({ldap=>$ldap,
    #                    root_dse=>$root_dse,
    #                    login=>$exam_account,
    #                    user_count=>$kill_count,
    #                    sophomorix_config=>\%sophomorix_config,
    #                  });
    #     #system("/usr/sbin/sophomorix-kill --killuser $exam_account");
    # }

    ############################################################
    # # add examaccounts
    # &print_title("ExamAccounts to be added:");
    # my $add_count=1;
    # foreach my $exam_account (@adding_examaccounts){
    #     my $role="examaccount";
    #     my $school=$devices_file{'device'}{$exam_account}{'SCHOOL'};
    #     my $filename=$devices_file{'device'}{$exam_account}{'FILENAME'};
    #     $sophomorix_first_password=&get_plain_password($role,$file,$random,$length,@passwort_zeichen);
    #     if (not exists $school_created{$school}){
    #         # create ou
    #         &AD_school_create({ldap=>$ldap,
    #                     root_dse=>$root_dse,
    #                     root_dns=>$root_dns,
    #                     school=>$school,
    #                     creationdate=>$time_stamp_AD,
    #                     sophomorix_config=>\%sophomorix_config,
    #                     sophomorix_result=>\%sophomorix_result,
    #                  });
    #         # remember ou
    #         $school_created{$school}="already created";
    #     }
    #     &AD_user_create({ldap=>$ldap, 
    #                      root_dse=>$root_dse,
    #                      user_count=>$add_count,
    #                      login=>$exam_account,
    #                      group=>$devices_file{'device'}{$exam_account}{'ROOM'},
    #                      group_basename=>$devices_file{'device'}{$exam_account}{'ROOM'},
    #                      firstname_ascii=>"Exam",
    #                      surname_ascii=>"Account",
    #                      firstname_utf8=>"Exam",
    #                      surname_utf8=>"Account",
    #                      birthdate=>$birthdate,
    #                      sophomorix_first_password=>$sophomorix_first_password,
    #                      role=>"examaccount",
    #                      type=>"room",
    #                      school=>$school,
    #                      creationdate=>$time_stamp_AD,
    #                      tolerationdate=>"---",
    #                      deactivationdate=>"---",
    #                      status=>"P",
    #                      file=>$filename,
    #                    });
    #     $add_count++;
    #     # make sure that the room exists
    #     # use the saved, tokened value
    #     my $room_saved=$devices_file{'device'}{$exam_account}{'ROOM'};
    #     my $examaccount_token=$school."-".$DevelConf::examaccount;
    #     &AD_group_create({ldap=>$ldap,
    #                       root_dse=>$root_dse,
    #                       group=>$room_saved,
    #                       group_basename=>$room_saved,
    #                       description=>$room_saved,
    #                       school=>$school,
    #                       status=>"P",
    #                       type=>"room",
    #                       creationdate=>$time_stamp_AD,
    #                      });
    #     # add examaccount to its room
    #     &AD_group_addmember({ldap => $ldap,
    #                          root_dse => $root_dse, 
    #                          group => $room_saved,
    #                          addmember => $exam_account,
    #                         });   
    # }

    ############################################################
    # # Kill the rooms of examaccounts
    # &print_title("Rooms to be killed:");
    # my $kill_room_count=1;
    # foreach my $room (@killing_examaccount_rooms){
    #     print "   * Killing ExamAccount Room $room ...\n";
    #     &AD_group_kill({ldap=>$ldap,
    #                     root_dse=>$root_dse,
    #                     group=>$room,
    #                     type=>"room",
    #                     group_count=>$kill_room_count,
    #                     sophomorix_config=>\%sophomorix_config,
    #               });
    # }

    ############################################################
    # Kill the rooms of computers
    print "\n";
    &print_title("Computer rooms to be killed:");
    my $kill_computer_room_count=1;
    foreach my $room (@killing_computer_rooms){
        print "   * Killing Computer Room $room ...\n";
        &AD_group_kill({ldap=>$ldap,
                        root_dse=>$root_dse,
                        root_dns=>$root_dns,
                        group=>$room,
                        type=>"room",
                        group_count=>$kill_computer_room_count,
                        sophomorix_config=>\%sophomorix_config,
                  });
    }

    ############################################################
    # Kill computers
    print "\n";
    &print_title("Computers to be killed:");
    my $count=1;
    foreach my $computer (@killing_computers){
        &AD_computer_kill({ldap=>$ldap,
                           root_dse=>$root_dse,
                           workstation=>$computer,
                           count=>$count,
                         });
        $count++;
    }

    ############################################################
    # Add computers
    print "\n";
    &print_title("Computers to be added:");
    my $ws_count=1;
    foreach my $computer (@adding_computers){
        my $school=$devices_file{'computer'}{$computer}{'SCHOOL'};
        my $room_saved=$devices_file{'computer'}{$computer}{'ROOM'};
        my $room_basename=$devices_file{'computer'}{$computer}{'ROOM_BASENAME'};
        my $ws_saved=$devices_file{'computer'}{$computer}{'COMPUTER'};
        my $filename=$devices_file{'computer'}{$computer}{'FILENAME'};
        if (not exists $school_created{$school}){
            # create ou
            &AD_school_create({ldap=>$ldap,
                               root_dse=>$root_dse,
                               root_dns=>$root_dns,
                               school=>$school,
                               creationdate=>$time_stamp_AD,
                               smb_admin_pass=>$smb_admin_pass,
                               sophomorix_config=>\%sophomorix_config,
                               sophomorix_result=>\%sophomorix_result,
                             });
            # remember ou
            $school_created{$school}="already created";
        } else {
            print "   * OU $school already created\n";
        }
        &AD_computer_create({ldap=>$ldap, 
                             root_dse=>$root_dse,
                             ws_count=>$ws_count,
                             name=>$ws_saved,
                             room=>$room_saved,
                             room_basename=>$room_basename,
                             role=>$sophomorix_config{'FILES'}{'DEVICE_FILE'}{$filename}{'sophomorixRole'},
		             type=>$sophomorix_config{'FILES'}{'DEVICE_FILE'}{$filename}{'sophomorixType'},
                             school=>$school,
                             filename=>$filename,
                             creationdate=>$time_stamp_AD,
                             sophomorix_config=>\%sophomorix_config,
                           });
        $ws_count++;
        # make sure that the room exists
        my $room_description=$room_basename." in ".$school;
        &AD_group_create({ldap=>$ldap,
                          root_dse=>$root_dse,
                          root_dns=>$root_dns,
                          group=>$room_saved,
                          group_basename=>$room_basename,
                          description=>$room_description,
                          school=>$school,
                          status=>"P",
                          type=>$sophomorix_config{'FILES'}{'DEVICE_FILE'}{$filename}{'sophomorixType'},
                          creationdate=>$time_stamp_AD,
			  sub_ou=>"OU=".$room_basename.",".$sophomorix_config{'INI'}{'OU'}{'AD_devices_ou'},
                          smb_admin_pass=>$smb_admin_pass,
                          sophomorix_config=>\%sophomorix_config,
                          sophomorix_result=>\%sophomorix_result,
                         });
        # add computer to its room
        &AD_group_addmember({ldap => $ldap,
                             root_dse => $root_dse, 
                             group => $room_saved,
                             addmember => $ws_saved,
                            });   
    }

    ############################################################
    # Kill dnsNodes
    print "\n";
    &print_title("dnsNodes to be killed:");
    my $dns_node_count=1;
    foreach my $dns_node (@killing_dnsnodes){
        &AD_dns_kill({ldap=>$ldap, 
                      root_dse=>$root_dse,
                      root_dns=>$root_dns,
                      dns_zone=>$AD{'objectclass'}{'dnsNode'}{$DevelConf::dns_node_prefix_string}{$dns_node}{'dnsZone'},
                      dns_node=>$dns_node,
                      dns_ipv4=>$AD{'objectclass'}{'dnsNode'}{$DevelConf::dns_node_prefix_string}{$dns_node}{'IPv4'},
                      smb_pwd=>$smb_admin_pass,
                    });
        $dns_node_count++;
    }


    ############################################################
    # Kill dnsZones
    print "\n";
    &print_title("dnsZones to be killed:");
    my $dns_zone_count=1;
    foreach my $dns_zone (@killing_dnszones){
	print "        $dns_zone\n";
        &AD_dns_zonekill({ldap=>$ldap, 
                          root_dse=>$root_dse,
                          dns_server=>"localhost",
                          dns_zone=>$dns_zone,
                          smb_pwd=>$smb_admin_pass,
                        });
        $dns_zone_count++;
    }


    ############################################################
    # Add dnsZones
    print "\n";
    &print_title("dnsZones to be added:");
    $dns_zone_count=1;
    foreach my $dns_zone (@adding_dnszones){
        #my $filename="";
        my $filename=$devices_file{'dnsZone'}{$dns_zone};
        &AD_dns_zonecreate({ldap=>$ldap, 
                            root_dse=>$root_dse,
                            filename=>$filename,
                            dns_server=>$root_dns,
                            dns_zone=>$dns_zone,
                            smb_pwd=>$smb_admin_pass,
                          });
        $dns_zone_count++;
    }


    ############################################################
    # Add dnsNodes
    print "\n";
    &print_title("dnsNodes to be added:");
    $dns_node_count=1;
    foreach my $dns_node (@adding_dnsnodes){
        my $filename=$devices_file{'device'}{$dns_node}{'FILENAME'};
        &AD_dns_create({ldap=>$ldap, 
                        root_dse=>$root_dse,
                        root_dns=>$root_dns,
                        filename=>$filename,
                        dns_node=>$dns_node,
                        dns_ipv4=>$devices_file{'device'}{$dns_node}{'IPv4'},
                        smb_pwd=>$smb_admin_pass,
                           });
        $dns_node_count++;
    }

    &log_script_exit("",0,1,0,\@arguments,\%sophomorix_result,$json);
}


# ===========================================================================
# --set-computer-passwords (setting computer passwords)
# ===========================================================================
if ($set_computer_passwords==1){
    print "Setting password for all Computer accounts:\n";
    my ($ref_AD) = &AD_get_AD({ldap=>$ldap,
                           root_dse=>$root_dse,
                           root_dns=>$root_dns,
                           computers=>"TRUE",
                           #rooms=>"TRUE",
                           #examaccounts=>"TRUE",
                           dnszones=>"TRUE",
                           dnsnodes=>"TRUE",
                           sophomorix_config=>\%sophomorix_config,
             });

    my $count=1;
    foreach my $comp (keys %{$AD{'objectclass'}{'computer'}{'computer'}}) {
        my $pw;
        if ($password ne ""){
            # password by option
            $pw=$password;
        } else {
            # default password
            $pw=$pass;
        }
        print "\n*** $count: $comp  --> $pw\n";
        system("/usr/sbin/sophomorix-passwd --force -u $comp --pass $pw");
        $count++;
    }
    &log_script_exit("",0,1,0,\@arguments,\%sophomorix_result,$json);
}



# # ===========================================================================
# # --italc-dir  (create config files for italc)
# # ===========================================================================
# if ($italc_dir ne ""){
#     print "Creating italc files in $italc_dir\n";
#     system("mkdir -p $italc_dir");
#     system("chown $italc_owner.${DevelConf::teacher} $italc_dir");
#     system("chmod 0755 $italc_dir");

#     my $file_global="globalconfig.xml";
#     my $file_personal="personalconfig.xml";
#     my $dir_snapshots="snapshots";

#     foreach my $room (@italc_rooms){
#         my @teacher_hosts=();
#         my $classroom_name=$italc_rooms{$room}{'NAME'};
#         my $master_host=$italc_rooms{$room}{'MASTER'};

#         my $italc_parent=$italc_dir."/".$room;
#         my $italc_file_global=$italc_parent."/".$file_global;
#         my $italc_file_personal=$italc_parent."/".$file_personal;
#         my $italc_snapshots_dir=$italc_parent."/".$dir_snapshots;

#         system("mkdir -p $italc_parent");
#         system("chown $italc_owner.${DevelConf::teacher} $italc_parent");
#         system("chmod 0755 $italc_parent");

#         system("mkdir -p $italc_snapshots_dir");
#         system("chmod 0777 $italc_snapshots_dir");

#         print "Creating $italc_file_global for italcroom $room ...\n";
#         open(ITALCGLOBAL, ">$italc_file_global");
#         print ITALCGLOBAL '<?xml version="1.0"?>'."\n";
#         print ITALCGLOBAL '<!DOCTYPE italc-config-file>'."\n";
#         print ITALCGLOBAL '<globalclientconfig version="1.0.7" >'."\n";
#         print ITALCGLOBAL '  <body>'."\n";
#         print ITALCGLOBAL '    <classroom name="'.$classroom_name.'" >'."\n";

#         print "Creating $italc_file_personal for italcroom $room ...\n";
#         open(ITALCPERSONAL, ">$italc_file_personal");
#         print ITALCPERSONAL '<?xml version="1.0"?>'."\n";
#         print ITALCPERSONAL '<!DOCTYPE italc-config-file>'."\n";
#         print ITALCPERSONAL '<personalconfig version="1.0.7" >'."\n";
#         print ITALCPERSONAL '  <head>'."\n";

#         my @host_list_global=();
#         my @host_list_personal=();
#         my %host_lines_global=();
#         my %host_lines_personal=();
#         for my $host ( keys %{ $rooms_file{$room}{"HOSTS"} } ) {
#             my $ip=$domcomputers_file{$host}{"IP"};
#             my $mac=$domcomputers_file{$host}{"MAC"};
#             my $account_flag=$domcomputers_file{$host}{"ACCOUNT"};
#             # type? 0/1 
#             my $type=0;
#             if (exists $italc_rooms{$room}{"$host"}{'TYPE'}){
#                if ($italc_rooms{$room}{"$host"}{'TYPE'} eq "teacher host"){
# 		    $type=1;
#                     # remember teacher hosts
#                     push @teacher_hosts, $host;
#                 }
#             }

#             # visible? yes/no
#             my $visible="yes";
#             if (exists $italc_rooms{$room}{"$host"}{'INVISIBLE'}){
#                if ($italc_rooms{$room}{"$host"}{'INVISIBLE'} eq "yes"){
#                     $visible="no";
#                 }
#             }

#             # id is 6 digits of MAC-address converted to decimal
#             # more digits are not suppoorted bay italc 1.0.7
#             # perl can calculate lager hex numbers.
#             # warnings must be be disabled if you need more 
#             # -> see beginning of script: no warnings ....
#             my $hex_mac=$mac;
#             $hex_mac=~s/://g;
#             $hex_mac=substr($hex_mac,6,6);
# 	    my $dec_mac =  hex($hex_mac);
#             my $id=$dec_mac;

#             my $line_global="      <client localip=\"".$ip."\" ".
#                                               "mac=\"".$mac."\" ".
#                                              "type=\"".$type."\" ".
#                                                "id=\"".$id."\" ".
#                                              "name=\"".$host."\" ".
#                             "/>\n";
#             my $line_personal="      <client w=\"".$w_coord."\" ".
#                                             "x=\"".$x_coord."\" ".
#                                             "y=\"".$y_coord."\" ".
#                                             "h=\"".$h_coord."\" ".
#                                       "visible=\"".$visible."\" ".
#                                            "id=\"".$id."\" ".
#                               "/> <!-- $host -->\n";
#             if ($account_flag eq "1"){
#                 # for sorting
#                 push @host_list_global, $host;
#                 push @host_list_personal, $host;
#                 # save lines for later use
#                 $host_lines_global{$host}=$line_global;
#                 $host_lines_personal{$host}=$line_personal;
#             } else {
#                 # no account flag -> no italc account 
#             }
#         }

#         @host_list_global = sort @host_list_global;
#         @host_list_personal = sort @host_list_personal;

#         foreach my $host (@host_list_global){
# 		print ITALCGLOBAL "$host_lines_global{$host}";
#         }
        
#         # italc global file
#         print ITALCGLOBAL '    </classroom>'."\n";
#         print ITALCGLOBAL '  </body>'."\n";
#         print ITALCGLOBAL '</globalclientconfig>'."\n";
#         close(ITALCGLOBAL);
#         system("chown $italc_owner.${DevelConf::teacher} $italc_file_global");
#         system("chmod 0755 $italc_file_global");

#         # italc personal file
#         my $master_ip=$domcomputers_file{$master_host}{"IP"};
#         print ITALCPERSONAL '  <globalsettings '.
#                             "demo-master-ip=\"".$master_ip."\" ".
#                             'opened-tab="5" '.
#                             'demoquality="0" '.
#                             'defaultdomain="" '.
#                             'role="1" '.
#                             'demo-net-iface="eth0" '.
#                             'client-update-interval="1" '.
#                             'wincfg="AAAA/wAAAAD9AAAAAAAABAAAAAJfAAAABAAAAAQAAAAIAAAACPwAAAABAAAAAgAAAAEAAAAWAG0AYQBpAG4AdABvAG8AbABiAGEAcgEAAAAAAAAEAAAAAAAAAAAA" '.
#                             'notooltips="0" '.
#                             'win-height="663" '.
#                             'win-x="0" '.
#                             'ismaximized="1" '.
#                             'win-y="0" '.
#                             'clientdoubleclickaction="0" '.
#                             'win-width="1024" '.
#                             'showUserColumn="0" />'."\n";
#         print ITALCPERSONAL '  </head>'."\n";
#         print ITALCPERSONAL '  <body>'."\n";
#         print ITALCPERSONAL '    <classroom name="'.$classroom_name.'" >'."\n";
#         my $host_index=0; # index for array: index=0 --> first element
#         foreach my $host (@host_list_personal){
# 	    my $line_to_print=$host_lines_personal{$host};
#             # replace coordinates
#             $line_to_print=~s/$x_coord/$x_coord[$host_index]/g;
#             $line_to_print=~s/$y_coord/$y_coord[$host_index]/g;
#             print ITALCPERSONAL "$line_to_print";
#             # old: print unmodified
# 	    #print ITALCPERSONAL "$host_lines_personal{$host}";
#             $host_index++;
#         }
#         print ITALCPERSONAL '    </classroom>'."\n";
#         print ITALCPERSONAL '  </body>'."\n";
#         print ITALCPERSONAL '</personalconfig>'."\n";
#         close(ITALCPERSONAL);
#         system("chown $italc_owner.${DevelConf::teacher} $italc_file_personal");
#         system("chmod 0755 $italc_file_personal");

#         foreach my $teacher_host (@teacher_hosts){
#             # create links for teacher hosts
#             system("cd $italc_dir; ln -s $room $teacher_host");
#         }
#     }

#     # copying the keys
#     print "* Copying italc keys to $italc_dir\n";
#     system("cp -r $italc_key_dir $italc_dir");
#     system("chown -R $italc_owner.${DevelConf::teacher} $italc_dir");
#     if (-e "${italc_key_dir_admin}/key"){
#         system("chmod 440 ${italc_key_dir_admin}/key");
#     } else {
#         print "\nPlease add a key ${italc_key_dir_admin}/key!\n\n";
#     }
#     if (-e "${italc_key_dir_supporter}/key"){
#         system("chmod 440 ${italc_key_dir_supporter}/key");
#     } else {
#         print "\nPlease add a key ${italc_key_dir_supporter}/key!\n\n";
#     }
#     if (-e "${italc_key_dir_teacher}/key"){
#         system("chmod 440 ${italc_key_dir_teacher}/key");
#     } else {
#         print "\nPlease add a key ${italc_key_dir_teacher}/key!\n\n";
#     }
#     &log_script_end(\@arguments,\%sophomorix_result,$json);
# }



&AD_unbind_admin($ldap);

# syntax was OK
#&log_script_end(\@arguments,\%sophomorix_result,$json);
exit 0;






# ===========================================================================
# subs
# ===========================================================================
sub analyze_device_line {
    my ($line,$device_file,$filename,$school) = @_;
    if (/^#/ or /^\s*$/){
        return 0;
    } else {
        chomp($line);
        my ($room,
            $host,
            $hwk,
            $mac,
            $ip,
            $ms_office_key,
            $ms_windows_key,
            $unused,
            $sysadmin_field,
            $account_flag,
            $pxe,
            $option)=split(/;/,$line);

        $room=&check_room($room);
        $host=&check_host($host);
        $hwk=&check_hwk($hwk);
        $mac=&check_mac($mac);
        $ip=&check_ip($ip);
        $ms_office_key=&check_ms_software_key($ms_office_key,"MS-OFFICE-KEY",$host);
        $ms_windows_key=&check_ms_software_key($ms_windows_key,"MS-WINDOWS-KEY",$host);
#        print "   UNUSED:  $unused\n";
#        print "   SYSADM:  $sysadmin_field\n";
        $account_flag=&check_account_flag($account_flag);
        $pxe=&check_pxe($pxe);
        $option=&check_option($option);

        # use tokened names 
        my $host_token=&AD_get_name_tokened($host,$school,"examaccount");

        my $room_token=&AD_get_name_tokened($room,$school,"roomws");
        my $ws_token=&AD_get_name_tokened($host,$school,"computer");
        my $ws_token_account=$ws_token."\$";
        if($Conf::log_level>=3){
            print "\n$line\n";
            print "ExamAccount: $host  -->  $host_token\n";
            print "Room:        $room  -->  $room_token\n";
            print "Computer:    $host  -->  $ws_token\n";
            print "Computer\$:  $host  -->  $ws_token_account\n";
            print "\n";
	}

        # save data into hash for reuse
        push @domcomputers_file, $host_token;
        $devices_file{'device'}{$host_token}{'HWK'}=$hwk;
        $devices_file{'device'}{$host_token}{'MAC'}=$mac;
        $devices_file{'device'}{$host_token}{'IPv4'}=$ip;
        $devices_file{'device'}{$host_token}{'MS_OFFICE_KEY'}=$ms_office_key;
        $devices_file{'device'}{$host_token}{'MS_WINDOWS_KEY'}=$ms_windows_key;
        $devices_file{'device'}{$host_token}{'ROOM_BASENAME'}=$room;
        $devices_file{'device'}{$host_token}{'ROOM'}=$room_token;
        if ($account_flag==1){
            $devices_file{'device'}{$host_token}{'ACCOUNT'}="TRUE";
        } else {
            $devices_file{'device'}{$host_token}{'ACCOUNT'}="FALSE";
        }
        $devices_file{'device'}{$host_token}{'COMPUTER'}=$ws_token;
        $devices_file{'device'}{$host_token}{'COMPUTER_DOLLAR'}=$ws_token_account;
        $devices_file{'device'}{$host_token}{'SCHOOL'}=$school;
        $devices_file{'device'}{$host_token}{'PATH_ABS'}=$device_file;
        $devices_file{'device'}{$host_token}{'FILENAME'}=$filename;

        # dnsZone
        my @octets=split(/\./,$ip);
        my $dns_zone=$octets[2].".".$octets[1].".".$octets[0].".in-addr.arpa";
        $devices_file{'dnsZone'}{$dns_zone}=$filename;

	print "   * Zone: $dns_zone needed\n";

        # dnsNode
        $devices_file{'dnsNode'}{$host_token}=$ip;

        $devices_file{'room'}{$room_token}{'HOSTS'}{$host_token}="seen";
        $devices_file{'room'}{$room_token}{'MAC'}{$mac}="seen";
        $devices_file{'room'}{$room_token}{'IPv4'}{$ip}="seen";

        # field 10 decides 
        # $account_flag==0 (no account)
        # $account_flag==1 (create account) 1and all other values
        if ($account_flag==1){
            $devices_file{'computer'}{$ws_token_account}{'SCHOOL'}=$school;
            $devices_file{'computer'}{$ws_token_account}{'ROOM'}=$room_token;
            $devices_file{'computer'}{$ws_token_account}{'ROOM_BASENAME'}=$room;
            $devices_file{'computer'}{$ws_token_account}{'COMPUTER'}=$ws_token;
            $devices_file{'computer'}{$ws_token_account}{'COMPUTER_DOLLAR'}=$ws_token_account;
            $devices_file{'computer'}{$ws_token_account}{'FILENAME'}=$filename;
        }
    }
}



sub check_room {
    my ($room) = @_;
    if($Conf::log_level>=3){
        print "   ROOM:    $room\n";
    }
    # allow a-z0-9-_ lowercase
    if ( $room=~/[^A-Za-z0-9\-]/ ) {
        print "\nERROR: $room contains invalid characters\n\n";
        exit 1;
    } else {

    }
    return $room;
}



sub check_host {
    my ($host) = @_;
    if($Conf::log_level>=3){
        print "   HOST:    $host\n";
    }
    # allow a-z0-9-  , convert to lowercase later
    if ( $host=~/[^A-Za-z0-9\-]/ ) {
        print "\nERROR: $host contains invalid characters\n\n";
        exit 1;
    } else {
        $host=~tr/A-Z/a-z/; # in Kleinbuchstaben umwandeln
        # correct
        $host_seen{$host}="seen";
    }
    return $host;
}



sub check_hwk {
    my ($hwk) = @_;
    if($Conf::log_level>=3){
        print "   HWK:     $hwk\n";
    }
    # allow A-Za-z0-9   
    if ( $hwk=~/[^A-Za-z0-9\-_]/ ) {
        print "\nERROR: $hwk contains invalid characters\n\n";
        exit 1;
    } else {

    }
    return $hwk;
}



sub check_mac {
    my ($old_mac) = @_;
    if($Conf::log_level>=3){
       print "   MAC:     $old_mac\n";
    }
    my $mac = Net::MAC->new('mac' => $old_mac , base => 16); 
    my $new_mac = $mac->convert(
          'base'      => 16,   # convert to base 16, if necessary
          'bit_group' => 8,    # 16 bit grouping
          'delimiter' => ':',  # dot-delimited
          'die'       => 1     # die if conversion fails
	);
    # should die when mac is wrong

    # convert to uppercase
    $new_mac=~tr/a-z/A-Z/; # in Grossbuchstaben umwandeln

    # correct
    if (exists $mac_seen{$new_mac}){
        print "\nERROR: MAC $new_mac is double!\n\n";
        exit 1;
    } else {
        $mac_seen{$new_mac}="seen";
    }
    if($Conf::log_level>=3){
        print "      OLD: $old_mac\n";
        print "      NEW: $new_mac\n";
    }
    return $new_mac;
}



sub check_ip {
    my ($ip) = @_;
    if($Conf::log_level>=3){
        print "   IP:      $ip";
    }
    # check for 3 .
    my $dots_in_string=$ip=~tr/\.//;
    if($Conf::log_level>=3){
        print " ($dots_in_string dots)\n";
    }
    if ($dots_in_string!=3){
        print "\nERROR: ->$ip<- does not contain 3 dots\n\n";
        exit 1;        
    }
    
    # check for correct octets    
    my @octets = split(/\./,$ip);
    foreach my $octet (@octets){
        if($Conf::log_level>=3){
            print "      Octet:    $octet\n";
        }
        if ( int($octet) < 0 or int($octet) > 255) {
            print "\nERROR: ->$ip<- is invalid Option in ip octet\n\n";
            exit 1;
        } else {

        }
    }

    # check for double ip
    if (exists $ip_seen{$ip}){
        print "\nERROR: IP $ip is double!\n\n";
        exit 1;
    } else {
        $ip_seen{$ip}="seen";
    }
    return $ip;
}



sub check_ms_software_key {
    my ($ms_software_key,$name,$host) = @_;
    if (exists $ms_key_ok{$ms_software_key}){
        # skip tests, when tagged as 'no key'
        return $ms_software_key;
    }
    if($Conf::log_level>=3){
        print "   $name: $ms_software_key";
    }

    my $minus_in_string=$ms_software_key=~tr/-//;
    if($Conf::log_level>=3){
        print " ($minus_in_string minus signs)\n";
    }
    if ($minus_in_string!=4){
        if($Conf::log_level>=2){
            print "\nWARNING $host: <$ms_software_key> $name: Not containing 4 minus signs\n\n";
        }
    }

    my @parts = split(/-/,$ms_software_key);
    foreach my $part (@parts){
        if($Conf::log_level>=3){
            print "      Part: <$part> (Length ".length($part).")\n";
        }
        if (length($part)!=5 ) {
            if($Conf::log_level>=2){
                print "\nWARNING $host: <$ms_software_key> Not a $name:\n";
                print "   * Part: $part (Length ".length($part)." : Not 5 chacters long)\n\n";
            }
        } 
    }
    return $ms_software_key;
}



sub check_account_flag {
    my ($account_flag) = @_;
    if ($account_flag eq 0){
        # ok
        $account_flag="0";
    } else {
        $account_flag="1";
    }
    if($Conf::log_level>=3){
        print "   ACCOUNT FLAG:     $account_flag\n";
    }
    return $account_flag;
}



sub check_pxe {
    my ($pxe) = @_;
    if($Conf::log_level>=3){
        print "   PXE:     $pxe\n";
    }
    if ( $pxe=~/[0-9]/ ) {
        # this is correct
        return $pxe;
    }
    if ( not exists $pxe{$pxe} ) {
        print "\nERROR: ->$pxe<- is invalid Option in pxe field\n\n";
        exit 1;
    }
    return $pxe;
}



sub check_option {
    my ($option) = @_;
    if (not defined $option){
        $option="";
        # ??? warning ???
    }
    if($Conf::log_level>=3){
        print "   OPTION:     $option\n";
    }
    return $option;
}



# sub push_add_examaccount {
#     my ($add) = @_;
#     push @adding_examaccounts, $add;
# }



# sub push_kill_examaccount {
#     my ($kill) = @_;
#     push @killing_examaccounts, $kill;
# }



# sub push_kill_examaccount_room {
#     my ($kill) = @_;
#     push @killing_examaccount_rooms, $kill;
# }


sub push_kill_computer_room {
    my ($kill) = @_;
    push @killing_computer_rooms, $kill;
}



sub push_add_computer {
    my ($add) = @_;
    push @adding_computers, $add;
}



sub push_kill_computer {
    my ($kill) = @_;
    push @killing_computers, $kill;
}



sub push_add_dnsnode {
    my ($add) = @_;
    push @adding_dnsnodes, $add;
}



sub push_kill_dnsnode {
    my ($kill) = @_;
    push @killing_dnsnodes, $kill;
}



sub push_add_dnszone {
    my ($add) = @_;
    push @adding_dnszones, $add;
}



sub push_kill_dnszone {
    my ($kill) = @_;
    push @killing_dnszones, $kill;
}



# sub get_classrooms {
#     &print_title("Fetching classrooms from $host_classrooms:");
#     if (not -e $host_classrooms){
#         print "   * File $host_classrooms does not exist!\n";
#         return;
#     } else {
#         print "   * File $host_classrooms exists\n";
#     }
#     open(CLASSROOM, "<$host_classrooms");
#     while(<CLASSROOM>){
#         chomp();
#         s/ //g;
#         if(/^\#/){ # # am Anfang bedeutet Kommentarzeile
#             next;
#         }
#         my $line=$_;
#         if($Conf::log_level>=2){
#             print "   * $line\n";
#         }
# 	print "CLASS <$line>\n";
#         push @class_rooms, $line;
#         $class_rooms{$line}="seen";
#     }
#     close(CLASSROOM);
# }



# sub get_italcrooms {
#     print "* Fetching italc rooms from $italc_conf:\n";
#     #if (not -e $italc_conf_dir){
#     #    system("mkdir -p $italc_conf_dir");
#     #}
#     if (not -e $italc_conf){
#         &log_script_exit("$italc_conf is missing",1,1,0,\@arguments,\%sophomorix_result,$json);
#         exit;
#     } 
#     if (not -e $italc_key_dir_admin){
#         system("mkdir -p $italc_key_dir_admin");
#     }
#     if (not -e $italc_key_dir_supporter){
#         system("mkdir -p $italc_key_dir_supporter");
#     }
#     if (not -e $italc_key_dir_teacher){
#         system("mkdir -p $italc_key_dir_teacher");
#     }
#     open(ITALCROOM, "<$italc_conf");
#     while(<ITALCROOM>){
#         chomp();
#         s/ //g;
#         if(/^\#/){ # # am Anfang bedeutet Kommentarzeile
#             next;
#         }
#         if($_ eq ""){ 
#             next;
#         }

#         my $line=$_;
#         my ($room,$italc_classroom_name,
#             $host_string,$invisible_host_string) = split(/:/,$line);
#         if($Conf::log_level>=2){
#             print "   * $room\n";
#         }

#         # room
#         push @italc_rooms, $room;

#         # classroom name
#         if ($italc_classroom_name eq ""){
#             $italc_classroom_name=$room;
#         } 
#         $italc_rooms{$room}{'NAME'}=$italc_classroom_name;

#         # hosts that can use italc
#         if (not defined $host_string or $host_string eq ""){
#             $italc_rooms{$room}="seen";
#             # ERROR: italc rooms must have a master
#             &log_script_exit("$room without master (italc)",1,1,0,\@arguments,\%sophomorix_result,$json);
#         } else {
#             my @teacher_hosts = split(/,/,$host_string);
#             my $i=1;
#             foreach my $host (@teacher_hosts){
#                 if($Conf::log_level>=2){
#                     print "      * $host is teacher host (type=1)\n";
#                 }
#                 $italc_rooms{$room}{"$host"}{'TYPE'}="teacher host";
#                 if ($i==1){
#                     #remember first entry
#                     $italc_rooms{$room}{'MASTER'}="$host";
#                 }
#                 $i++;
#             }
#         }

#         # invisible hosts
#         if (not defined $invisible_host_string or 
#                         $invisible_host_string eq ""){
#             # do nothing
#         } else {
#             my @invisible_hosts = split(/,/,$invisible_host_string);
#             foreach my $host (@invisible_hosts){
#                 if($Conf::log_level>=2){
#                     print "      * $host is an invisible host (visible=no)\n";
#                 }
#                 $italc_rooms{$room}{"$host"}{'INVISIBLE'}="yes";
#             }
#         }
#     }
#     close(ITALCROOM);
# }

