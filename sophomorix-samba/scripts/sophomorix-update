#!/usr/bin/perl -w
# This script (sophomorix-update) is maintained by R端diger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net


# modules
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Net::LDAP;
use JSON;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 lock_sophomorix
                                 unlock_sophomorix
                                 backup_auk_file
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_add_summary
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 );

use Sophomorix::SophomorixSambaAD qw(
                                 AD_user_move
                                 AD_bind_admin
                                 AD_dns_get
                                 AD_unbind_admin
                                 AD_user_update
                                 AD_get_passwd
                                 AD_object_search
                                 AD_get_name_tokened
                                    );
my @arguments = @ARGV;

my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();
my $user_count=0;

my $alte_klasse;
my $neue_klasse;
my $login;
my $old_status;

my $identifier;
my $alte_zeile="";
my $neue_zeile="";
my $new_home="";
my $new_homedir_above="";
my $old_home="";

my $altes_www="";
my $neues_www="";
my $www_link="";


my @users_for_quota=();

my $k;
my $v;
my $key;


# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen f端r Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $json=0;
my $lock=0;
my $unlock=0;

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,           
           "json|j+" => \$json,
           "verbose|v+" => \$Conf::log_level,
           "lock" => \$lock,
           "unlock" => \$unlock,
          );

my %sophomorix_result=&result_sophomorix_init("sophomorix-update");
# Pr端fen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt,\%sophomorix_result,$json);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$json);
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse,\%sophomorix_result);
my ($smb_admin_pass)=&AD_get_passwd($DevelConf::sophomorix_file_admin,
                                     $DevelConf::secret_file_sophomorix_file_admin);
my $update_file=$sophomorix_config{'INI'}{'PATHS'}{'CHECK_RESULT'}."/sophomorix.update";
my $update_file_new=$sophomorix_config{'INI'}{'PATHS'}{'CHECK_RESULT'}."/sophomorix.update.new";



# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-update updates the ldap entry of a user

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info

Please see the sophomorix-update(8) man pages for full documentation
');
   print "\n";
   exit;
}



# --unlock
if ($unlock==1) {
    &unlock_sophomorix();
    exit;
}



# --lock
if ($lock==1) {
    &lock_sophomorix("lock",0,\@arguments);
    exit;
}



# --info
if ($info==1) {
    my $count=0;
   if (not -e "$update_file"){
       print "$update_file does not exist!\n"; 
       print "Nothing to update: sophomorix.update does not exist!\n"; 
       exit;
   }
    open(USERUPDATE,"$update_file") 
            || die "ERROR: $!";
    print "\nThe following users can be updated:\n";
#    printf "%-10s %-21s %-21s %-12s %-10s %-1s\n",
#           "Login","NewNameUTF8","NewNameASCII","Newunid","NBirthdate","S";
    &print_line;

    my @lines=();
    while(<USERUPDATE>){
       if(/^\#/){ # # am Anfang bedeutet Kommentarzeile
	   next;
       }
       push @lines, $_;
    }
    close(USERUPDATE);

    my @sorted_lines = sort {
        my @a_fields = split /::/, $a;
        my @b_fields = split /::/, $b;
 
        $a_fields[1] cmp $b_fields[1]  # string sort on 1st field, then
          ||
        $a_fields[0] cmp $b_fields[0]  # string sort on 2nd field
    } @lines;

    foreach my $line (@sorted_lines){
       chomp($line);
       $count++;
       my ($login,
           $unid_old,
           $unid_new,
           $surname_ascii_old,
           $surname_ascii_new,
           $firstname_ascii_old,
           $firstname_ascii_new,
           $birthdate_old,
           $birthdate_new,
           $surname_utf8_old,
           $surname_utf8_new,
           $firstname_utf8_old,
           $firstname_utf8_new,
           $filename_old,
           $filename_new,
           $status_old,
           $status_new,
           $role_old,
           $role_new,
           $class_old,
           $class_new,
           $school_old,
           $school_new,
          )=split(/::/,$line);
    my $name_ascii_new=$surname_ascii_new.", ".$firstname_ascii_new;
    my $name_utf8_new=$surname_utf8_new.", ".$firstname_utf8_new;
    # Printout
    print "Update user $count: $login\n";
    if ($unid_new ne "---"){
        print " $login.sophomorixUnid:           $unid_old  --> $unid_new:\n";
    }
    if ($surname_ascii_new ne "---"){
        print " $login.sophomorixSurnameASCII:   $surname_ascii_old  --> $surname_ascii_new\n";
    }
    if ($firstname_ascii_new ne "---"){
        print " $login.sophomorixFirstnameASCII: $firstname_ascii_old  --> $firstname_ascii_new\n";
    }
    if ($birthdate_new ne "---"){
        print " $login.sophomorixBirthdate:      $birthdate_old  --> $birthdate_new\n";
    }
    if ($surname_utf8_new ne "---"){
        print " $login.sn:                       $surname_utf8_old  --> $surname_utf8_new\n";
    }
    if ($firstname_utf8_new ne "---"){
        print " $login.givenName:                $firstname_utf8_old  --> $firstname_utf8_new\n";
    }
    if ($filename_new ne "---"){
        print " $login.sophomorixAdminFile:      $filename_old  --> $filename_new\n";
    }
    if ($status_new ne "---"){
        print " $login.sophomorixStatus:         $status_old  --> $status_new\n";
    }
    if ($role_new ne "---"){
        print " $login.sophomorixRole:           $role_old  --> $role_new\n";
    }
    if ($class_new ne "---"){
        print " $login.sophomorixAdminClass:     $class_old  --> $class_new\n";
    }
    if ($school_new ne "---"){
        print " $login.sophomorixSchoolname:     $school_old  --> $school_new\n";
    }
    &print_line;
    }
    print "$count users can be updated\n";
    exit;
}


&result_sophomorix_check_exit(\%sophomorix_result,\%sophomorix_config,$json);
# ===========================================================================
# start
# ===========================================================================
&log_script_start(\@arguments,\%sophomorix_result);


# sophomorix.update mitloggen
&backup_auk_file($time_stamp_file,"update","before",\%sophomorix_config);

# calulate users to update
my $max_user_count=`cat $sophomorix_config{'INI'}{'PATHS'}{'CHECK_RESULT'}/sophomorix.update | wc -l`;
chomp($max_user_count);


# Datei mit den Sch端lern, die nicht versetzt wurden
open(NOCHUPDATE,">$update_file_new") 
     || die "ERROR: $!";

open(USERUPDATE,"$update_file") 
     || die "ERROR: $!";
while(<USERUPDATE>){
    if(/^\#/){ # # am Anfang bedeutet Kommentarzeile
        next;
    }
    chomp();
    $user_count++;
       my ($user,
           $unid_old,
           $unid_new,
           $surname_ascii_old,
           $surname_ascii_new,
           $firstname_ascii_old,
           $firstname_ascii_new,
           $birthdate_old,
           $birthdate_new,
           $surname_utf8_old,
           $surname_utf8_new,
           $firstname_utf8_old,
           $firstname_utf8_new,
           $filename_old,
           $filename_new,
           $status_old,
           $status_new,
           $role_old,
           $role_new,
           $class_old,
           $class_new,
           $school_old,
           $school_new,
          )=split(/::/);
    my ($count,$dn,$cn)=&AD_object_search($ldap,$root_dse,"user",$user);

    if ($unid_new ne "---" or 
        $surname_ascii_new ne "---" or 
        $firstname_ascii_new ne "---" or 
        $birthdate_new ne "---" or 
        $surname_utf8_new ne "---" or
        $firstname_utf8_new ne "---"  or
        $filename_new ne "---" or
        $status_new ne "---"  
       ){
        # do NOT update move stuff: class,role,school 
        # leave it to AD_user_move
        &AD_user_update({ldap=>$ldap,
                         root_dse=>$root_dse,
                         dn=>$dn,
                         user=>$user,
                         birthdate=>$birthdate_new,
                         surname_ascii=>$surname_ascii_new,
                         surname_utf8=>$surname_utf8_new,
                         firstname_ascii=>$firstname_ascii_new,
                         firstname_utf8=>$firstname_utf8_new,
                         filename=>$filename_new,
                         status=>$status_new,
                         unid=>$unid_new,
                         user_count=>$user_count,
                         max_user_count=>$max_user_count,
                         time_stamp_AD=> $time_stamp_AD,
                         json=>$json,
                         sophomorix_config=>\%sophomorix_config,
                         sophomorix_result=>\%sophomorix_result,
                       });
    }

    # test if user mustbe moved
    if ($school_new ne "---" or $class_new ne "---" or $role_new ne "---"){
        if ($school_new eq "---"){
            $school_new=$school_old;
        }
        if ($class_new eq "---"){
            $class_new=$class_old;
        }
        if ($role_new eq "---"){
            $role_new=$role_old;
        }

        my $group_token_old=&AD_get_name_tokened($class_old,$school_old,"adminclass");
        my $group_token_new=&AD_get_name_tokened($class_new,$school_new,"adminclass");
        # move the user
        &AD_user_move({ldap=>$ldap,
                       root_dse=>$root_dse,
                       root_dns=>$root_dns,
                       user=>$user,
                       user_count=>$user_count,
                       group_old_basename=>$class_old,
                       group_new_basename=>$class_new,
                       group_old=>$group_token_old,
                       group_new=>$group_token_new,
                       school_old=>$school_old,
                       school_new=>$school_new,
                       role_old=>$role_old,
                       role_new=>$role_new,
                       filename_old=>$filename_old,
                       filename_new=>$filename_new,
                       creationdate=>$time_stamp_AD, 
                       smb_admin_pass=>$smb_admin_pass,
                       sophomorix_config=>\%sophomorix_config,
                       sophomorix_result=>\%sophomorix_result,
                      });
    }
}



close(USERUPDATE);
close(NOCHUPDATE);


# sophomorix.update mitloggen
&backup_auk_file($time_stamp_file,"update","after",\%sophomorix_config);



# ===========================================================================
# Nicht verarbeitete User nach sophomorix.update kopieren
# ===========================================================================
rename("$update_file_new","$update_file");

&result_sophomorix_add_summary({
                     NAME=>"UPDATED", 
                     RESULT=>$user_count, 
                     RESULT_TYPE => "integer",
                     DESCRIPTION_POST => "users updated", 
                     DESCRIPTION_PRE => "updated users", 
                     FORMAT_TYPE => 1,
                     sophomorix_result=>\%sophomorix_result,
			       });


&AD_unbind_admin($ldap);

&log_script_end(\@arguments,\%sophomorix_result,\%sophomorix_config,$json);
