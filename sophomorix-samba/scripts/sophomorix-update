#!/usr/bin/perl -w
# This script (sophomorix-update) is maintained by R端diger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net


# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use Sophomorix::SophomorixBase;
use Net::LDAP;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_amku_file
                                 check_options
                                 config_sophomorix_read
                                 );

use Sophomorix::SophomorixSambaAD qw(
                                 AD_user_move
                                 AD_bind_admin
                                 AD_unbind_admin
                                 AD_user_update
                                 AD_object_search
                                 AD_get_name_tokened
                                    );
my @arguments = @ARGV;

my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();
my $user_count=0;

my $alte_klasse;
my $neue_klasse;
my $login;
my $old_status;

my $identifier;
my $alte_zeile="";
my $neue_zeile="";
my $new_home="";
my $new_homedir_above="";
my $old_home="";

my $altes_www="";
my $neues_www="";
my $www_link="";


my @users_for_quota=();

my $k;
my $v;
my $key;

my $update_file=${DevelConf::path_result}."/sophomorix.update";
my $update_file_new=${DevelConf::path_result}."/sophomorix.update.new";

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen f端r Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $lock=0;
my $unlock=0;

# Parsen der Optionen
my $testopt=GetOptions(
           "verbose|v+" => \$Conf::log_level,
           "lock" => \$lock,
           "unlock" => \$unlock,
           "info|i" => \$info,           
           "help|h" => \$help
          );

# Pr端fen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin();
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-update updates the ldap entry of a user

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info

Please see the sophomorix-update(8) man pages for full documentation
');
   print "\n";
   exit;
}


# --unlock
if ($unlock==1) {
    &unlock_sophomorix();
    exit;
}


# --lock
if ($lock==1) {
    &lock_sophomorix("lock",0,@arguments);
    exit;
}


# --info
if ($info==1) {
    my $count=0;
   if (not -e "$update_file"){
       print "$update_file does not exist!\n"; 
       print "Nothing to update: sophomorix.update does not exist!\n"; 
       exit;
   }
    open(USERUPDATE,"$update_file") 
            || die "ERROR: $!";
    print "\nThe following users can be updated:\n";
#    printf "%-10s %-21s %-21s %-12s %-10s %-1s\n",
#           "Login","NewNameUTF8","NewNameASCII","Newunid","NBirthdate","S";
    &print_line;

    my @lines=();
    while(<USERUPDATE>){
       if(/^\#/){ # # am Anfang bedeutet Kommentarzeile
	   next;
       }
       push @lines, $_;
    }
    close(USERUPDATE);

    my @sorted_lines = sort {
        my @a_fields = split /::/, $a;
        my @b_fields = split /::/, $b;
 
        $a_fields[1] cmp $b_fields[1]  # string sort on 1st field, then
          ||
        $a_fields[0] cmp $b_fields[0]  # string sort on 2nd field
    } @lines;

    foreach my $line (@sorted_lines){
       chomp($line);
       $count++;
#       my ($login,
#           $unid,
#           $surname_ascii,
#           $firstname_ascii,
#           $birthdate,
#           $surname_utf8,
#           $firstname_utf8,
#           $filename,
#           $status,
#           $school,
#           $role,
#          )=split(/::/,$line);
       my ($login,
           $unid_old,
           $unid_new,
           $surname_ascii_old,
           $surname_ascii_new,
           $firstname_ascii_old,
           $firstname_ascii_new,
           $birthdate_old,
           $birthdate_new,
           $surname_utf8_old,
           $surname_utf8_new,
           $firstname_utf8_old,
           $firstname_utf8_new,
           $filename_old,
           $filename_new,
           $status_old,
           $status_new,
           $role_old,
           $role_new,
           $class_old,
           $class_new,
           $school_old,
           $school_new,
          )=split(/::/,$line);
    my $name_ascii_new=$surname_ascii_new.", ".$firstname_ascii_new;
    my $name_utf8_new=$surname_utf8_new.", ".$firstname_utf8_new;
    # Ausgabe
    if ($unid_new ne "---"){
        print "$login.sophomorixUnid:           $unid_old  --> $unid_new:\n";
    }
    if ($surname_ascii_new ne "---"){
        print "$login.sophomorixSurnameASCII:   $surname_ascii_old  --> $surname_ascii_new\n";
    }
    if ($firstname_ascii_new ne "---"){
        print "$login.sophomorixFirstnameASCII: $firstname_ascii_old  --> $firstname_ascii_new\n";
    }
    if ($birthdate_new ne "---"){
        print "$login.sophomorixBirthdate:      $birthdate_old  --> $birthdate_new\n";
    }
    if ($surname_utf8_new ne "---"){
        print "$login.sn:                       $surname_utf8_old  --> $surname_utf8_new\n";
    }
    if ($firstname_utf8_new ne "---"){
        print "$login.givenName:                $firstname_utf8_old  --> $firstname_utf8_new\n";
    }
    if ($filename_new ne "---"){
        print "$login.sophomorixAdminFile:      $filename_old  --> $filename_new\n";
    }
    if ($status_new ne "---"){
        print "$login.sophomorixStatus:         $status_old  --> $status_new\n";
    }
    if ($role_new ne "---"){
        print "$login.sophomorixRole:           $role_old  --> $role_new\n";
    }
    if ($class_new ne "---"){
        print "$login.sophomorixAdminClass:     $class_old  --> $class_new\n";
    }
    if ($school_new ne "---"){
        print "$login.sophomorixSchoolname:     $school_old  --> $school_new\n";
    }
#    printf "%-10s %-21s %-21s %-12s %-10s %-1s\n",
#           $login,
#           $name_utf8, 
#           $name_ascii, 
#           $unid, 
#           $birthdate,
#           $status; 
    &print_line;
    }
    print "$count users can be updated\n";
    &log_script_exit("",1,1,0,@arguments);
}




# ===========================================================================
# start
# ===========================================================================

&log_script_start(@arguments);


# sophomorix.update mitloggen
&backup_amku_file($time_stamp_file,"update","before");


# Datei mit den Sch端lern, die nicht versetzt wurden
open(NOCHUPDATE,">$update_file_new") 
     || die "ERROR: $!";

open(USERUPDATE,"$update_file") 
     || die "ERROR: $!";
while(<USERUPDATE>){
    if(/^\#/){ # # am Anfang bedeutet Kommentarzeile
        next;
    }
    chomp();
    $user_count++;
    # my ($user,
    #     $unid,
    #     $surname_ascii,
    #     $firstname_ascii,
    #     $birthdate,
    #     $surname_utf8,
    #     $firstname_utf8,
    #     $filename,
    #     $status,
    #     $school,
    #     $role,
    #    )=split(/::/);
       my ($user,
           $unid_old,
           $unid_new,
           $surname_ascii_old,
           $surname_ascii_new,
           $firstname_ascii_old,
           $firstname_ascii_new,
           $birthdate_old,
           $birthdate_new,
           $surname_utf8_old,
           $surname_utf8_new,
           $firstname_utf8_old,
           $firstname_utf8_new,
           $filename_old,
           $filename_new,
           $status_old,
           $status_new,
           $role_old,
           $role_new,
           $class_old,
           $class_new,
           $school_old,
           $school_new,
          )=split(/::/);
    my ($count,$dn,$cn)=&AD_object_search($ldap,$root_dse,"user",$user);

    &AD_user_update({ldap=>$ldap,
                     root_dse=>$root_dse,
                     dn=>$dn,
                     user=>$user,
                     birthdate=>$birthdate_new,
                     surname_ascii=>$surname_ascii_new,
                     surname_utf8=>$surname_utf8_new,
                     firstname_ascii=>$firstname_ascii_new,
                     firstname_utf8=>$firstname_utf8_new,
                     filename=>$filename_new,
                     status=>$status_new,
                     school=>$school_new,
                     role=>$role_new,
                     unid=>$unid_new,
                     user_count=>$user_count,
                     date_now=> $time_stamp_AD,
                   });
}



close(USERUPDATE);
close(NOCHUPDATE);


# sophomorix.update mitloggen
&backup_amku_file($time_stamp_file,"update","after");



# ===========================================================================
# Nicht verarbeitete User nach sophomorix.update kopieren
# ===========================================================================
rename("$update_file_new","$update_file");


&AD_unbind_admin($ldap);

&log_script_end(@arguments);
