#!/usr/bin/perl -w
# This script (sophomorix-passwd) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net


# # Bibliotheken
# use strict;
# use Getopt::Long;
# Getopt::Long::Configure ("bundling");
# use Sophomorix::SophomorixConfig;
# use Sophomorix::SophomorixBase;
# use Sophomorix::SophomorixAPI;
# use DBI;
# use Net::LDAP;
# use Sophomorix::SophomorixPgLdap qw(show_modulename
#                                     check_connections
#                                     get_first_password
#                                     update_user_db_entry
#                                     check_sophomorix_user
#                                     set_sophomorix_passwd
#                                    );



# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);
use Net::LDAP;
use JSON;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_amku_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_create
                                 AD_bind_admin
                                 AD_unbind_admin
                                 AD_user_create
                                 AD_user_update
                                 AD_group_create
                                 AD_group_addmember
                                 AD_group_update
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_dn_fetch_multivalue
                                 AD_object_search
                                 AD_login_test
                                 AD_debug_logdump
                                 AD_dns_get
                                 get_forbidden_logins
                                    );

my @arguments = @ARGV;
my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();

# ===========================================================================
# Variablen
# ==========================================================================

my @users=();

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $json=0;

my $school="";
my $test_firstpassword=0;
my $set_firstpassword=0;

my $user="";
my $classes="";
my $projects="";
my $student=0;
my $teacher=0;
my $rooms="";
my $ws=0;

my $password="";
my $config=0;
my $reset=0;
my $common=0;
my $random=0;
my $all_characters=0;

my $smb_pw_m_change=2;

my $shell="";
my $show_help=0;

my $interactive=0;
my $nofirstpassupdate=0;
my $char_num=0;

my $hide=0;
my $force=0;

# flag, if (1) user has specified ONE password for all (-p or --common)  , 
#    or if (2) password must be calculated for each user
my $password_given=0;

my $password_lehrer="";
my $password_other="";

my $info_line="";

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "json|j+" => \$json,
           "verbose|v+" => \$Conf::log_level,
           "users|user|u=s" => \$user,
           "class|classes|c=s" => \$classes,
           "project|projects=s" => \$projects,
           "student|students|s" => \$student,
           "teacher|teachers|t" => \$teacher,
           "room|rooms|r=s" => \$rooms,
           "workstations|workstation|w" => \$ws,
           "password|passwd|pass=s" => \$password,
           "config" => \$config,
           "reset" => \$reset,
           "common" => \$common,
           "random" => \$random,
           "interactive" => \$interactive,
           "all-characters" => \$all_characters,
           "nofirstpassupdate" => \$nofirstpassupdate,
           "plength=i" => \$char_num,
           "hide" => \$hide,
           "samba-pwd-must-change!" => \$smb_pw_m_change,
           "shell|loginshell=s" => \$shell,
           "force" => \$force,
           "test-firstpassword" => \$test_firstpassword,
           "set-firstpassword" => \$set_firstpassword,
          );

my %sophomorix_result=&result_sophomorix_init("sophomorix-passwd");
# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt,\%sophomorix_result,$json);

# Setting the filters

# school_filter
my $school_filter="";
if ($school ne ""){
    $school_filter="(sophomorixSchoolPrefix=$school)";
}

# user filter
my $user_filter="";
if ($user ne ""){
    $user_filter="(sAMAccountName=$user)";
}



# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-passwd modifies users in the sophomorix database and the authentification system (see also sophomorix-usermod)

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info

Create a password:
  --config  (use sophomorix.conf)
  --pass password, --password password
  --common
  --interactive
  --nofirstpassupdate
  --reset
  --random
  --plength number
  --hide

Password change:
  --samba-pwd-must-change/nosamba-pwd-must-change
  --all-characters    (allow all characters in passwords,
                       only for developers, be careful!)

Shell:
  --shell /bin/bash

Create userlist:
  -s / --students
  -t / --teachers
  -w / --workstations (ExamAccouts)
  -u user1,user2,...   /  --users  user1,user2,...
  -c class1,class2,... /  --class class1,class2,... 
  --project project1,project2,... 
  -r room1,room2,...   /  --rooms room1,room2,...


Testing stuff:
  --set-firstpassword 
  --set-firstpassword -u user

  --test-firstpassword 
  --test-firstpassword -u user

Please see the sophomorix-passwd(8) man pages for full documentation
');
   print "\n";
   exit;
}


my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$json);
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse);


# # add teachers to classes if option is given
# if ($teacher==1){
#     if ($classes eq ""){
#         $classes=${DevelConf::teacher};
#     } else {
#         $classes=$classes.",".${DevelConf::teacher};
#     }
# }


# if ($user eq "domadmin"){

# }


# # create the list of users
# if ($user eq "domadmin"){
#    @users=("domadmin");
# } elsif ($force==1){
#    @users=&create_userlist($user,$classes,0,$projects,0,$student,
#                            $rooms,$ws,0,0);
# } else {
#    # check the users
#    if($Conf::log_level>=2){
#       &titel("Checking login names ...");
#    }
#    @users=&create_userlist($user,$classes,0,$projects,0,$student,
#                            $rooms,$ws,0,1);
# }

################################################################################
# Exit
################################################################################

# # exit if no users specified
# if ($#users+1==0){
#     print "ERROR: No users specified. \n";
#     exit;
# }


# # limit plength to 1 to 25
# if ($char_num >=26 or $char_num < 0){
#     print "Error: $char_num characters is too long/short for a password\n";
#     exit;
# }

# if ($password ne "" and $char_num!=0){
#     print "Error: What do you need --plength for? \n";  
#     exit;
# }

# if ($char_num!=0 and($common==0 and $random==0)){
#     print "Error: Options make no sense: add  --random or --common\n";  
#     exit;
# }

################################################################################
# Start
################################################################################

# --info, show only the users
if ($info==1) {
   &print_list_column(6,"Passwörter setzen für user ",@users);
   print "INFO: $info_line  \n";
   exit;
}

&log_script_start(\@arguments,\%sophomorix_result);


# --test-firstpassword
if ($test_firstpassword==1){
    my $count_tested=0;
    my $count_success=0;
    my $count_fail=0;
    my $count_nofirstpass=0;
    my @success=();
    my @fail=();
    my @nofirst=();
    print "Testing if firstpassword works in the following Accounts\n";
    # search for all users
    my $filter="( &(objectclass=user) (cn=*) (sophomorixRole=*) $school_filter $user_filter)"; 
    if($Conf::log_level>=2){
        print "Filter to find users: $filter\n";
    }
    my $mesg = $ldap->search(
                      base   => $root_dse,
                      scope => 'sub',
                      filter => $filter,
                      attr => ['cn']
                            );
    &AD_debug_logdump($mesg,2,(caller(0))[3]);
    my $max = $mesg->count;
    for( my $index = 0 ; $index < $max ; $index++) {
        my $entry = $mesg->entry($index);
        my $dn=$entry->dn();
        my $samaccount=$entry->get_value ('sAMAccountName');
        $count_tested++;
        print "* $count_tested) $samaccount: $dn\n";
        my $res=&AD_login_test($ldap,$root_dse,$dn);
        if ($res==0){
            print "   * Login with firstpassword OK!\n";
            $count_success++;
            push @success, "OK: $dn\n";
        } elsif ( $res==-1) {
            print "   * No firstpassword found!\n";
            $count_nofirstpass++;
            push @nofirst, "No Password: $dn\n";
        } else {
            print "   * ERROR logging in with firstpassword: $res\n";
            $count_fail++;
            push @fail, "Failed: $dn\n";
        }
    }
    &print_title("Test result:");
    if($Conf::log_level>=2){
        @success = sort @success;
	@fail = sort @fail;
	@nofirst = sort @nofirst;
        foreach my $line (@success,@fail,@nofirst){
            print "$line";
        } 
	&print_line;
    }
    print "$count_tested tested:  $count_success OK,",
          "  $count_fail Failed Logins,",
          " $count_nofirstpass Without Firstpassword Attribute\n";
}



############################################################
# --set-firstpassword
if ($set_firstpassword==1){
    # search for all users
    my $filter="( &(objectclass=user) (cn=*) (sophomorixRole=*) $school_filter $user_filter)"; 
    if($Conf::log_level>=2){
        print "Filter to find users: $filter\n";
    }
    my $mesg = $ldap->search(
                      base   => $root_dse,
                      scope => 'sub',
                      filter => $filter,
                      attr => ['sAMAccountName','cn','sophomorixFirstPassword']
                            );
    &AD_debug_logdump($mesg,2,(caller(0))[3]);
    my $max = $mesg->count;
    for( my $index = 0 ; $index < $max ; $index++) {
        my $entry = $mesg->entry($index);
        my $dn=$entry->dn();
        my $samaccount=$entry->get_value ('sAMAccountName');
        my $firstpassword=$entry->get_value ('sophomorixFirstPassword');
        my $user_count=$index+1;
        &AD_user_update({ldap=>$ldap,
                     root_dse=>$root_dse,
                     dn=>$dn,
                     user=>$samaccount,
                     user_count=>$user_count,
                     firstpassword=>$firstpassword,
                     plain_password=>$firstpassword,
                     date_now=> $time_stamp_AD,
                   });
    }
}


# # use the charlist of SophomorixBase
# my @chars=&get_passwd_charlist();


# #
# # Create a password
# #

# # --password
# if ($password ne ""){
#    $info_line="Password will be '$password'";
#    $password_given=1;
# }

# # --common
# if ($common==1){
#    if ($char_num==0){
#       $password_lehrer=&get_plain_password(${DevelConf::teacher},$file,$random,$length,@chars);
#       $password_other=&get_plain_password("",$file,$random,$length,@chars);
#    } else {
#       $password_lehrer=&get_random_password($char_num,${DevelConf::teacher},@chars);
#       $password_other=&get_random_password($char_num,"",@chars);
#    }
#    $info_line="Passwords will be :\n".
#               "   '$password_lehrer'  (for teachers) \n".
#               "   '$password_other'  (for others) ";

# }

# # --reset
# if ($reset==1){
#    $info_line="Passwords will be looked up in the sophomorix database";
# }

# # --random
# if ($random==1){
#    $info_line="Every user will have its own a random password";
# }



# # Setting passwords interacive
# if ($interactive==1){
#     my $count_users=$#users+1;
#     if ($count_users==1){
#         # ask for password
#         use Term::ReadKey;
#         ReadMode('noecho');

#         # ask once
#         print "New password : ";
#         my $password_1 = ReadLine(0);
#         print "\n";
#         chomp($password_1);

#         # ask again
#         print "Retype new password : ";
#         my $password_2 = ReadLine(0);
#         print "\n";
#         chomp($password_2);

#         # reset to echo
#         ReadMode('normal');

#         # Look if they match
#         if ($password_1 eq $password_2){
#             # check for invalid characters
#             &validate_password($password_1);
#             # Passwort für user setzen
#             &set_sophomorix_passwd($users[0],$password_1);
#             # do NOT set password in the Database as FirstPassword
#             &nscd_start();
#             exit 0;
#         } else {
#             print "New passwords don't match!\n";
#             &nscd_start();
#             exit 10;
#         }
#     } else {
#         print "ERROR: I can set password interactively only for one user\n";
#         print "Unable to change password\n";
#         # smbldap-passwd returns 0 (10 should be better)
#         &nscd_start();
#         exit 0;
#     }

# }



# # without option
# # Setting the passwords noninteractive
# foreach my $user (@users){
#     # gruppe ermitteln
#     my ($home,$type,$gecos,$group)=
#         &Sophomorix::SophomorixPgLdap::fetchdata_from_account($user);

#     # --shell
#     if ($shell ne ""){
#        print "  Setting shell of $user in $group ($type) to $shell\n";
#        &update_user_db_entry($user,"LoginShell=$shell");
#     } else {
#        if($Conf::log_level>=2){
#           print "  Not changing shell for $user in $group ($type)\n";
#        }
#     }

#     # --samba-pwd-must-change/samba-pwd-must-change
#     if ($smb_pw_m_change==1){
#        # Must change
#        print "  Setting user $user to sambaPwdMustChange=Yes\n";
#        &update_user_db_entry($user,"sambaPwdMustChange=Yes");
#     } elsif ($smb_pw_m_change==0){
#        # NOT Must change
#        print "  Setting user $user to sambaPwdMustChange=No\n";
#        &update_user_db_entry($user,"sambaPwdMustChange=No");
#     } else {
#        if($Conf::log_level>=2){
#           print "  Not changing sambaPwdMustChange for $user in $group ($type)\n";
#        }
#     }

#     # which password to set
#     if ($password_given==1){
#         # use $password, do nothing
#     } elsif ($reset==1){
#         # lookup old password
#         $password=&get_first_password($user);
#     } elsif ($common==1){
#        # set password
#        if ($group eq ${DevelConf::teacher}){ 
#            $password=$password_lehrer;
#        } else {
# 	   $password=$password_other;
#        }
#     } elsif ($random==1){
#        # set password randomly
#        $password=&get_random_password($char_num,$group,@chars);
#     } elsif ($config==1){
#        # nothing specified: use sophomorix.conf
#        $password=&get_plain_password($group,$file,$random,$length,@chars)
#     } elsif ($shell eq "" and $smb_pw_m_change==2){
#        $show_help=1;
#        if($Conf::log_level>=2){
#           print "  Not setting password for $user in $group ($type)\n";
#        }
#        next;
#     } else {
#        # no options at all
#        next;
#     }

#     if ($hide==1){
#        print "  Setting password for user $user in ".
#              "$group ($type) to xxxxxxxx\n";
#     } else {
#        print "  Setting password for user $user in ".
#              "$group ($type) to $password\n";
#     }
#     # check for invalid characters
#     &validate_password($password);
#     # Passwort für user setzen
#     &set_sophomorix_passwd($user,$password);
#     # updating the database
#     if ($nofirstpassupdate==0){
#         &update_user_db_entry($user,"FirstPass=$password");
#     }
# }

# show mor help when no password could be generated
# and no --shell option was given
#if ($no_shell_no_pass==1 and $no_pw_m_change_no_pass=1){
# if ($show_help==1){
#     print "\nUse one of the following options:\n";
#     print "   A) one of the password options\n";
#     print "   B) the --shell option\n";
#     print "   C) the --samba-pwd-must-change/nosamba-pwd-must-change option\n";
#     print "\n";
# }


&log_script_end(\@arguments,\%sophomorix_result,$json);



# sub validate_password {
#     my ($password) = @_;
#     # - and $ escaped
#     if ($password=~/[^0-9A-Za-z@!\$%&?_\-:;.,]/ and $all_characters==0){
#         print "New password contains unallowed characters!\n";
#         &nscd_start();
#         exit 5;
#     }
# }
