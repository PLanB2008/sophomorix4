#!/usr/bin/perl -w
# This script (sophomorix-newfile) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);
use Net::LDAP;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
use JSON;
use File::Basename qw( basename
                       dirname
                     ); 
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_amku_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 filelist_fetch
                                 remove_whitespace
                                 json_dump
                                 recode_utf8_to_ascii
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_add
                                 AD_bind_admin
                                 AD_unbind_admin
                                 AD_user_create
                                 AD_group_create
                                 AD_group_addmember
                                 AD_group_update
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_dn_fetch_multivalue
                                 AD_get_AD
                                 AD_dns_get
                                 AD_object_search
                                 get_forbidden_logins
                                    );

my @arguments = @ARGV;

my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();
$Conf::log_level=1;
my $help=0;
my $info=0;
my $filter_only=0;

# Parsen der Optionen
my $testopt=GetOptions(
           "verbose|v+" => \$Conf::log_level,
           "info|i" => \$info,
           "help|h" => \$help,
           "filter-only" => \$filter_only,
          );


# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt);

my $newfile=$ARGV[0];



# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-newfile registers new user export files to the correct location in /etc/linuxmuster/sophomorix.

- New files are deleted after registration
  (option --filteronly keeps the files)
- New files and overwritten files are logged
- a filter is applied if configured
  (check with --filteronly)
- (later: encoding is analyzed and written to extemded attributes)

Options:
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info

Examples:
    sophomorix-newfile students.csv                         (target according to given file)
    sophomorix-newfile /path/to/students.csv                (target according to given file)
    sophomorix-newfile somefile.csv --target students.csv   (target as specified)

    sophomorix-newfile /path/to/students.csv --filter-only   (filtering to stdout)
  

 
Please see the sophomorix-newfile(8) man pages for full documentation
');
   print "\n";
   exit;
}

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin();
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse);
my @filelist=&filelist_fetch({filetype=>"users",
                              sophomorix_config=>\%sophomorix_config,
                            });



# --info
if ($info==1) {
    print "to be done where to log\n";
    exit;
}

&log_script_start(@arguments);


################################################################################
# Start
################################################################################

if (not defined $newfile){
    print "\n ERROR: You need to specify a file\n\n";
    exit;
}

if (not -e  $newfile){
    print "\n ERROR: $newfile does not exist\n\n";
    exit;
}

if (not -f  $newfile){
    print "\n ERROR: $newfile must be a file\n\n";
    exit;
}


&print_title("Registering $newfile:");

my $pwd=`pwd`;
chomp($pwd);
my $basename = basename($newfile);
my $parent_dir = dirname($newfile);
$parent_dir=~s/^\./$pwd/;
my $newfile_abs=$parent_dir."/".$basename;

my $target="";

if (exists $sophomorix_config{'FILES'}{'USER_FILE'}{$basename}){
    $target=$sophomorix_config{'FILES'}{'USER_FILE'}{$basename}{'PATH_ABS'};
} else {
    print "\nERROR: Your filename $basename is not a valid filename on this server\n\n";
    print "   * Please rename the file accordingly so I can find out where to copy it.\n\n";
    exit;
}

my $newfile_log=$DevelConf::path_log_newfiles."/".$time_stamp_file."_".$basename;
my $etcfile_log=$DevelConf::path_log_etcfiles."/".$time_stamp_file."_".$basename;
my $filter_script=$sophomorix_config{'FILES'}{'USER_FILE'}{$basename}{'FILTERSCRIPT'};


print "   * Option:          $newfile\n";
print "   * Newfile:         $basename\n";
print "   * Pwd:             $pwd\n";
print "   * Dir of newfile:  $parent_dir\n";
print "   * Newfile_abs:     $newfile_abs\n";
print "   * Target in /etc:  $target\n";
print "   * Log new file to: $newfile_log\n";
print "   * Log etc file to: $etcfile_log\n";
print "   * Filter:          $filter_script\n";


# to do:

# list valid filenames on error



## --filter-only
if ($filter_only==1){



    exit;
}



# do it
print "\n";
my $mkdir_command_1="mkdir -p $DevelConf::path_log_newfiles";
print "   $mkdir_command_1\n";
system($mkdir_command_1);

my $mkdir_command_2="mkdir -p $DevelConf::path_log_etcfiles";
print "   $mkdir_command_2\n";
system($mkdir_command_2);

    if ($filter_script eq "---"){
	my $command_1="cp $target $etcfile_log";
        print "   $command_1\n";
        system($command_1);

	my $command_2="cp $newfile_abs $target";
        print "   $command_2\n";
        system($command_2);

	my $command_3="mv $newfile_abs $newfile_log";
        print "   $command_3\n";
        system($command_3);

 
#            print "   cp $target\n     ---> $etcfile_log\n";
#            print "   cp $newfile_abs\n     ---> $target\n";
#            print "   mv $newfile_abs\n     ---> $newfile_log\n";
    } elsif ($filter_script eq "ERROR_FILTERSCRIPT"){
        print "\nERROR: The configured Filter is not an executable script:\n";
        print "   $sophomorix_config{'FILES'}{'USER_FILE'}{$basename}{FILTERSCRIPT_CONFIGURED}\n";
        print "\n";
        exit;
    } else {

        # filter script is executable, when in config hash -> run it
        #my $filter_script_filename = basename($filter_script);
        #my $filter_log_file=$DevelConf::path_conf_tmp."/".$filename."_".$filter_script_filename.".log";
        #print "   * Filtering $filename: $filter_script\n";
        #print "     * Logging to: $filter_log_file\n";
        #print "     * Logging to: $filter_log_file\n";
        #system("$filter_script > $filter_log_file  2>&1");
    } 






&AD_unbind_admin($ldap);

&log_script_end(@arguments);



################################################################################
# Sub
################################################################################
