#!/usr/bin/perl -w
# This script (sophomorix-newfile) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# Bibliotheken
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);
use Net::LDAP;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
use JSON;
use File::Basename qw( basename
                       dirname
                     ); 
use Cwd 'abs_path';
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_auk_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 filelist_fetch
                                 remove_whitespace
                                 json_dump
                                 recode_utf8_to_ascii
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_create
                                 AD_bind_admin
                                 AD_unbind_admin
                                 AD_user_create
                                 AD_group_create
                                 AD_group_addmember
                                 AD_group_update
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_dn_fetch_multivalue
                                 AD_get_AD
                                 AD_dns_get
                                 AD_object_search
                                 get_forbidden_logins
                                    );

my @arguments = @ARGV;

my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();
$Conf::log_level=1;
my $help=0;
my $info=0;
my $json=0;
my $filter_only=0;
my $name="";

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "json|j+" => \$json,
           "verbose|v+" => \$Conf::log_level,
           "name=s" => \$name,
           "filter-only" => \$filter_only,
          );


my %sophomorix_result=&result_sophomorix_init("sophomorix-newfile");
# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt,\%sophomorix_result,$json);

my $newfile=$ARGV[0];



# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-newfile registers new user export files to the correct location in /etc/linuxmuster/sophomorix.

- New files are deleted after registration
  (option --filteronly keeps the files)
- New files and overwritten files are logged
- a filter is applied if configured
  (check with --filteronly)
- (later: encoding is analyzed and written to extemded attributes)

Options:
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info

Examples:
    sophomorix-newfile students.csv                         (target according to given file)
    sophomorix-newfile /path/to/students.csv                (target according to given file)
    sophomorix-newfile somefile.csv --name students.csv     (target according to given name)

    sophomorix-newfile /path/to/students.csv --filter-only   (filtering to stdout)
  

 
Please see the sophomorix-newfile(8) man pages for full documentation
');
   print "\n";
   exit;
}

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$json);
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse,\%sophomorix_result);
my @filelist=&filelist_fetch({filetype=>"users",
                              sophomorix_config=>\%sophomorix_config,
                            });



# --info
if ($info==1) {
    print "to be done where to log\n";
    exit;
}


&result_sophomorix_check_exit(\%sophomorix_result,\%sophomorix_config,$json);
################################################################################
# Start
################################################################################
&log_script_start(\@arguments,\%sophomorix_result);


if (not defined $newfile){
    print "\n ERROR: You need to specify a file\n\n";
    exit;
}

if (not -e  $newfile){
    print "\n ERROR: $newfile does not exist\n\n";
    exit;
}

if (not -f  $newfile){
    print "\n ERROR: $newfile must be a file\n\n";
    exit;
}


&print_title("Registering $newfile:");

my $basename = basename($newfile);
my $newfile_abs = abs_path($newfile);
my $target="";
my $newfile_log;
my $newfile_log_filter;
my $etcfile_log;
my $filter_script;

if ($name ne ""){
    # option --name ....
    if (exists $sophomorix_config{'FILES'}{'USER_FILE'}{$name}){
        $target=$sophomorix_config{'FILES'}{'USER_FILE'}{$name}{'PATH_ABS'};
        $newfile_log=$DevelConf::path_log_newfiles."/".$time_stamp_file."_".$name;
        $newfile_log_filter=$DevelConf::path_log_newfiles."/".$time_stamp_file."_".$name.".filter";
        $etcfile_log=$DevelConf::path_log_etcfiles."/".$time_stamp_file."_".$name;
        $filter_script=$sophomorix_config{'FILES'}{'USER_FILE'}{$name}{'FILTERSCRIPT'};
    } else {
        # --name with wrong filename
        print "\nERROR: Your --name $name is not a valid filename on this server\n\n";
        print "   * Please use a valid filename so I can find out where to copy it.\n\n";
        &print_valid_filenames;
        exit;
    }
} elsif (exists $sophomorix_config{'FILES'}{'USER_FILE'}{$basename}){
    # valid filename
    $target=$sophomorix_config{'FILES'}{'USER_FILE'}{$basename}{'PATH_ABS'};
    $newfile_log=$DevelConf::path_log_newfiles."/".$time_stamp_file."_".$basename;
    $newfile_log_filter=$DevelConf::path_log_newfiles."/".$time_stamp_file."_".$basename.".filter";
    $etcfile_log=$DevelConf::path_log_etcfiles."/".$time_stamp_file."_".$basename;
    $filter_script=$sophomorix_config{'FILES'}{'USER_FILE'}{$basename}{'FILTERSCRIPT'};
} else {
    # not valid filename
    print "\nERROR: Your filename $basename is not a valid filename on this server\n\n";
    print "   * Please rename the file accordingly so I can find out where to copy it.\n\n";
    &print_valid_filenames;
    exit;
}



print "   * Option:           $newfile\n";
print "   * Newfile:          $basename\n";
print "     * Renamed to:       $name\n";
print "     * Newfile_abs:      $newfile_abs\n";
print "   * Target in /etc:   $target\n";
print "   * Log new file to:  $newfile_log\n";
print "     * filtered:       $newfile_log_filter\n";
print "   * Log etc file to:  $etcfile_log\n";
print "   * Filter:           $filter_script\n";

## --filter-only
if ($filter_only==1 and $filter_script ne "---"){
    my $command="$filter_script --filter --short $newfile_abs $target";
    print "   $command\n";
    system($command);
    exit;
} elsif ($filter_only==1) {
    print "\nERROR: No filter script defined\n\n";
    exit;
}



# do it
print "\n";
my $mkdir_command_1="mkdir -p $DevelConf::path_log_newfiles";
print "   $mkdir_command_1\n";
system($mkdir_command_1);

my $mkdir_command_2="mkdir -p $DevelConf::path_log_etcfiles";
print "   $mkdir_command_2\n";
system($mkdir_command_2);

if ($filter_script eq "---"){
    # no filter script
    # backup
    if (-e $target){
        my $command_1="cp $target $etcfile_log";
        print "   $command_1\n";
        system($command_1);
    }

    # newfile to /etc
    my $command_2="cp $newfile_abs $target";
    print "   $command_2\n";
    system($command_2);

    # newfile to log
    my $command_3="mv $newfile_abs $newfile_log";
    print "   $command_3\n";
    system($command_3);
} elsif ($filter_script eq "ERROR_FILTERSCRIPT"){
    print "\nERROR: The configured Filter is not an executable script:\n";
    print "   $sophomorix_config{'FILES'}{'USER_FILE'}{$basename}{FILTERSCRIPT_CONFIGURED}\n";
    print "\n";
    exit;
} else {
    # filter script is executable, when in config hash -> run it
    # backup
    if (-e $target){
        my $command_1="cp $target $etcfile_log";
        print "   $command_1\n";
        system($command_1);
    }

    # newfile to /etc, using filter
    my $command_2="$filter_script $newfile_abs $target";
    print "   $command_2\n";
    system($command_2);

    # filtered newfile to log
    if (-e $target){
        my $command_3="cp $target $newfile_log_filter";
        print "   $command_3\n";
        system($command_3);
    }

    # unfiltered newfile to log
    my $command_4="mv $newfile_abs $newfile_log";
    print "   $command_4\n";
    system($command_4);

} 






&AD_unbind_admin($ldap);

&log_script_end(\@arguments,\%sophomorix_result,\%sophomorix_config,$json);



################################################################################
# Sub
################################################################################

sub print_valid_filenames{
    my @list=();
    foreach my $key (keys %{$sophomorix_config{'FILES'}{'USER_FILE'}}) {
	push @list, $key;
    }
    @list=sort @list;
    print "   * Valid files/names are:\n";
    foreach my $file (@list){
        print "      * $file\n";
    }
}

