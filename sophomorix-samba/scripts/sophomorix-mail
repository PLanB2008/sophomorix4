#!/usr/bin/perl -w
# This script (sophomorix-mail) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# modules
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
use Net::LDAP;
use JSON;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_auk_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_add_summary
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 remove_from_list    
                                 json_dump
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_create
                                 AD_bind_admin
                                 AD_dns_get
                                 AD_get_user
                                 AD_get_quota
                                 AD_user_kill
                                 AD_unbind_admin
                                 AD_object_search
                                 AD_user_create
                                 AD_user_update
                                 AD_user_setquota
                                 AD_group_create
                                 AD_group_kill
                                 AD_group_addmember
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_group_update
                                 AD_project_sync_members
                                 AD_dn_fetch_multivalue
                                 AD_get_passwd
                                 get_forbidden_logins
                                    );
my @arguments = @ARGV;

my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
# Variablen für Optionen
$Conf::log_level=1;

my $help=0;
my $info=0;
my $json=0;
my $school="";
my $user="";
$Conf::log_level=1;

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "json|j+" => \$json,
           "verbose|v+" => \$Conf::log_level,
           "school|share|s=s" => \$school,
           "user|u=s" => \$user,
          );

my %sophomorix_result=&result_sophomorix_init("sophomorix-mail");
# Prüfen, ob Optionen erkannt wurden
&check_options($testopt,\%sophomorix_result,$json);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$json);
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse,\%sophomorix_result);
my ($smb_admin_pass)=&AD_get_passwd($DevelConf::sophomorix_file_admin,
                                     $DevelConf::secret_file_sophomorix_file_admin);


# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print('
sophomorix-mail calcultes mailinglist and does  ... nothing so fal

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose


Show the mailaccounts and maillists that should be created 
  -i  / --info

Please see the sophomorix-mail(8) man pages for full documentation
');
   print "\n";
   exit;
}




# create sharelist from options
# --school <school>/--share <share>
my @sharelist=();
if ($school ne ""){
    if (exists $sophomorix_config{'samba'}{'net_conf_list'}{$school}){
	push @sharelist,$school;
    } else {
        print "\nERROR: $school is not a SMB-share!\n\n";
	exit;
    }
} else {
    # without option use only school shares
    @sharelist=@{ $sophomorix_config{'LISTS'}{'SCHOOLS'} };
}




# --user user1,user2
my @userlist=();
if ($user ne ""){
    @userlist=split(/,/,$user);
}



my $ref_mail=&AD_get_quota({ldap=>$ldap,
                             root_dse=>$root_dse,
                             root_dns=>$root_dns,
                             sophomorix_config=>\%sophomorix_config,
                           });



# print Dumper($ref_mail);
# print Dumper($ref_mail->{'QUOTA'}{'USERS'}{'blackmri42'});
# print Dumper($ref_mail->{'QUOTA'}{'USERS'}{'lordjo42'});


############################################################
# --info --json
if ($info==1 and $json>0){
    &json_dump({json => $json,
                jsoninfo => "MAIL",
                jsoncomment => "sophomorix mail",
                log_level => $Conf::log_level,
                hash_ref=>$ref_mail,
                sophomorix_config=>\%sophomorix_config,
              });
    exit;
############################################################
# --info 
} elsif ($info==1 and $json==0){
    my $line="+--------------------------+--------+------+".
             "------+------+-------------------+\n";
    my $line2="+------------------------------------------".
              "------------------------------------+\n";
    foreach my $school (@sharelist){
        ############################################################
        # HEADER for SCHOOL
        print "\n";
        &Sophomorix::SophomorixBase::print_title("Mailaccounts/Maillists of school $school:");
        # there are 0 users
        if($#{ $ref_mail->{'LISTS'}{'USER_by_SCHOOL'}{$school} }==-1){
            print "     0 sophomorix users in school $school\n";
            next;
        }
        # there are users
        ############################################################
        # Walk through users
        print "Mailaccounts:\n";
        foreach my $user (@{ $ref_mail->{'LISTS'}{'USER_by_SCHOOL'}{$school} }){
            my $alias="Alias: FALSE";
            if ($ref_mail->{'QUOTA'}{'USERS'}{$user}{'MAIL'}{'ALIAS'} eq "TRUE"){
                $alias=$ref_mail->{'QUOTA'}{'USERS'}{$user}{'MAIL'}{'ALIASNAME'};
            }
            my $user_string="  * ".
                            $ref_mail->{'QUOTA'}{'USERS'}{$user}{'MAIL'}{'mail'}.
                            " (".
                            $ref_mail->{'QUOTA'}{'USERS'}{$user}{'MAIL'}{'displayName'}.
                            ") ".
                            $ref_mail->{'QUOTA'}{'USERS'}{$user}{'MAILQUOTA'}{'CALC'}.
                            " MiB, ".
                            $alias.
                            ")\n";
  
	    print $user_string;
        }


        ############################################################
        # Walk through mailists
        foreach my $maillist ( @{ $ref_mail->{'LISTS'}{'MAILLISTS_by_SCHOOL'}{$school} } ){
	    print "Maillist $maillist ($ref_mail->{'MAILLIST'}{$maillist}{'mail'}):\n";
            foreach my $member ( @{ $ref_mail->{'MAILLIST'}{$maillist}{'LIST'} } ){
	        print "  * $member\n";
            }
        }
    } # end of school
    #print Dumper($ref_mail);
    exit;
}



#print Dumper($ref_mail->{'QUOTA'}{'USERS'}{'blackmri23'});
#exit;

################################################################################
# continue with the calculated mail from $ref_mail
################################################################################

# ???? todo



&result_sophomorix_check_exit(\%sophomorix_result,\%sophomorix_config,$json);
# ===========================================================================
# Start
# ===========================================================================
&log_script_start(\@arguments,\%sophomorix_result);


&AD_unbind_admin($ldap);
&log_script_end(\@arguments,\%sophomorix_result,\%sophomorix_config,$json);
############################################################
# End
############################################################



############################################################
# subs
############################################################
