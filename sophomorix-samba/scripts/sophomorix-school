#!/usr/bin/perl -w
# This script (sophomorix-school) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# modules
use strict;
#use Quota;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);
use Net::LDAP;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
use JSON;
use File::Basename qw( basename
                       dirname
                     ); 
use Text::Iconv;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 mount_school
                                 umount_school
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_auk_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 filelist_fetch
                                 remove_whitespace
                                 json_dump
                                 recode_utf8_to_ascii
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_create
                                 AD_bind_admin
                                 AD_unbind_admin
                                 AD_user_create
                                 AD_group_create
                                 AD_group_addmember
                                 AD_group_update
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_dn_fetch_multivalue
                                 AD_get_AD
                                 AD_dns_get
                                 AD_get_passwd
                                 AD_object_search
                                 get_forbidden_logins
                                    );

my @arguments = @ARGV;

my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();

my $lock=0;
my $unlock=0;

my $school="";
my $create=0;
my $recreate_all_schools=0;
my $kill=0;
my $test_schools=0;

my $mount="";
my $umount="";

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================

# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $json=0;

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "json|j+" => \$json,
           "verbose|v+" => \$Conf::log_level,
           "create|c" => \$create,
           "recreate-all-schools" => \$recreate_all_schools,
           "kill" => \$kill,
           "test-schools" => \$test_schools,
           "school=s" => \$school,
           "mount=s" => \$mount,
           "umount=s" => \$umount,
          );

my %sophomorix_result=&result_sophomorix_init("sophomorix-school");
# Prüfen, ob Optionen erkannt wurden, sonst Abbruch
&check_options($testopt,\%sophomorix_result,$json);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$json);
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse,\%sophomorix_result);
my ($smb_admin_pass)=&AD_get_passwd($DevelConf::sophomorix_file_admin,
                                     $DevelConf::secret_file_sophomorix_file_admin);

# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlsbeschreibung
   print('
sophomorix-school lists,adds and removes schools


Options:
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose
  -i  / --info

  --school <schoolname>
  --create --school <schoolname>
  --kill --school <schoolname>

  --recreate-all-schools   (recreates all configured schools from sophomorix.conf)

  --mount <school>
  --umount <school>

Dumping data:                     
  -ij / --info --json              (dump configuration)
  -j / --json                      (dump as a nice json object)
  -jj / --json --json              (dump as a compact json object)
  -jjj / --json --json --json      (dump as a perl hash)


 
Please see the sophomorix-school(8) man pages for full documentation
');
   print "\n";
   exit;
}


# --unlock
if ($unlock==1) {
    &unlock_sophomorix();
    exit;
}


# --lock
if ($lock==1) {
    &lock_sophomorix("lock",0,\@arguments);
    exit;
}


&result_sophomorix_check_exit(\%sophomorix_result,\%sophomorix_config,$json);
################################################################################
# Start
################################################################################
&log_script_start(\@arguments,\%sophomorix_result);


# ============================================================
# listing schools
# ============================================================
# --info
if ($info==1){
    print "The following schools exist:\n";
    foreach my $school (keys %{$sophomorix_config{'SCHOOLS'}}) {
        print "   * $school\n";
    }
    exit;
}


# ============================================================
# testing schools
# ============================================================
# --test-schools
if ($test_schools==1){
    print "\n";
    &print_title("Testing schools");
    my @schools= ($sophomorix_config{'INI'}{'VARS'}{'GLOBALSHARENAME'},
                  @{ $sophomorix_config{'LISTS'}{'SCHOOLS'} });
    foreach my $school (@schools) {
        print "\n";
        print "   * Testing school $school\n";
	# share test
	if (exists $sophomorix_config{'samba'}{'net_conf_list'}{$school}){
	    print "         OK: SMB-share $school exists\n ";
            &_smb_msdfs($school);
            # write acces test

	    # delete access test

            # aquota.user test
            &_smbclient_testfile($school,"aquota.user");
	    # quotainfo test
	    &_smbcquotas_testshare($school);

	    # quota set test

	    # quota unset test
	
        } else {
	    print "     NOT OK: SMB-share $school is missing\n ";
        }
    }
    print "\n";
    &print_title("Testing shares that are not schools");
    foreach my $share ( @{ $sophomorix_config{'LISTS'}{'SHARES'} } ) {
        if (exists $sophomorix_config{'SCHOOLS'}{$share} ) {
            # skip
        } else {
	    print "   * Testing share $share\n";
            # show msdfs
            &_smb_msdfs($share);
            # aquota.user test
            &_smbclient_testfile($share,"aquota.user");
  	    # quotainfo test
	    &_smbcquotas_testshare($share);
	}
    }
    exit;
}



# ============================================================
# creating a school
# ============================================================
# --create --school <name>
if ($school ne "" and $create==1){
    if (not exists $sophomorix_config{'SCHOOLS'}{$school}){
        print "\n";
        print "WARNING: You must add the school in\n";
        print "         $DevelConf::file_conf_sophomorix\n";
        print "         before you can create it!\n\n";
    } else {
        # create new school
        &AD_school_create({ldap=>$ldap,
                           root_dse=>$root_dse,
                           root_dns=>$root_dns,
                           school=>$school,
                           creationdate=>$time_stamp_AD,
                           smb_admin_pass=>$smb_admin_pass,
                           sophomorix_config=>\%sophomorix_config,
                           sophomorix_result=>\%sophomorix_result,
                         });
    }
    exit;
}



# ============================================================
# mounting/umounting a school
# ============================================================
if ($mount ne ""){
    &mount_school($mount,$root_dns,$smb_admin_pass,\%sophomorix_config);
    exit;
}



if ($umount ne ""){
    &umount_school($umount,$root_dns,$smb_admin_pass,\%sophomorix_config);
    exit;
}



# ============================================================
# recreating all schools
# ============================================================
# --recreate-all-schools
if ($recreate_all_schools==1){
    foreach my $school (keys %{$sophomorix_config{'SCHOOLS'}}) {
        # create new ou
        &AD_school_create({ldap=>$ldap,
                           root_dse=>$root_dse,
                           root_dns=>$root_dns,
                           school=>$school,
                           creationdate=>$time_stamp_AD,
                           smb_admin_pass=>$smb_admin_pass,
                           sophomorix_config=>\%sophomorix_config,
                           sophomorix_result=>\%sophomorix_result,
                         });
    }
    exit;
}



# ============================================================
# killing a school
# ============================================================
# --kill --school <name>
if ($school ne "" and $kill==1){
    print "\nNot implemented\n\n";
}



# ============================================================
# listing schools
# ============================================================




&AD_unbind_admin($ldap);

&log_script_end(\@arguments,\%sophomorix_result,\%sophomorix_config,$json);



################################################################################
# Sub
################################################################################

# 
################################################################################


sub _smbclient_testfile {
    my ($share,$testfile)=@_;
    my $file_exists=0;
    my $smbclient_command=$sophomorix_config{'INI'}{'EXECUTABLES'}{'SMBCLIENT'}.
        " -U ".$DevelConf::sophomorix_file_admin."%'".$smb_admin_pass."'".
        " //$root_dns/$share -c 'ls'";
    my $stdout=`$smbclient_command 2> /dev/null`;
    my $return=${^CHILD_ERROR_NATIVE}; # return of value of last command
    my @lines=split(/\n/,$stdout);
    foreach my $line (@lines){
        my ($unused,$file,@unused)=split(/\s+/,$line);
	if (defined $file){
	    if ($file eq $testfile){
		$file_exists=1;
		last;
	    }
	}
    }
    if ($file_exists==1){
        print "      OK: File $testfile exists on share $share\n ";
    }  else {
        print "  NOT OK: File $testfile does NOT exist on share $share\n ";
    }
}

sub _smbcquotas_testshare {
    my ($share)=@_;
    my $smbcquotas_command=
        $sophomorix_config{'INI'}{'EXECUTABLES'}{'SMBCQUOTAS'}.
        " -U ".$DevelConf::sophomorix_file_admin."%'".
        $smb_admin_pass."'".
        " -F //$root_dns/$share";
        #print "$smbcquotas_command\n";
        my $return_quota=system("$smbcquotas_command > /dev/null");
        if ($return_quota==0){
	    print "      OK: smbcquotas -F returned $return_quota\n ";
	}  else {
	    print "    NOT OK: smbcquotas -F failed with $return_quota\n ";
	}
}


sub _smb_msdfs {
    my ($share)=@_;
    if (exists $sophomorix_config{'samba'}{'net_conf_list'}{$share}{'msdfs root'}){
	print "      OK: msdfs root = ".
              $sophomorix_config{'samba'}{'net_conf_list'}{$share}{'msdfs root'}.
              "\n ";
    } else {
        print "    NOT OK: msdfs root option on ".$share." NOT set to yes/no\n";
    }
}
