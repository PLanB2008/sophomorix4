#!/usr/bin/perl -w
# This script (sophomorix-class) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# modules
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);
use Net::LDAP;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
use JSON;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_auk_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 remove_from_list
                                 json_dump
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_create
                                 AD_bind_admin
                                 AD_dns_get
                                 AD_unbind_admin
                                 AD_user_create
                                 AD_group_create
                                 AD_group_kill
                                 AD_group_addmember
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_class_fetch
                                 AD_group_update
                                 AD_project_sync_members
                                 AD_dn_fetch_multivalue
                                 AD_get_passwd
                                 AD_get_groups_v
                                 AD_get_full_groupdata
                                    );
my @arguments = @ARGV;

# classtype
my $class_type="adminclass"; # default is adminclass

############################################################
# Option handling
############################################################
my %options=();
# define possible action in a script and what OBJECT they need
$options{'CONFIG'}{'ACTION'}{'GROUP'}="create,".
                                      "kill",
                                      "description,".
                                      "quota,".
                                      "mailquota,".
                                      "status,".
                                      "maxmembers,".
                                      "creationdate,".
                                      "set-gidnumber,".
                                      "mailalias,".
                                      "maillist,".
                                      "join,".
                                      "hide,".
                                      "admins,".
                                      "addadmins,".
                                      "removeadmins,".
                                      "members,".
                                      "addmembers,".
                                      "removemembers";
# define which options deliver which object
$options{'CONFIG'}{'ONE_OF'}{'GROUP'}="class";
# define option that can modify which object
$options{'CONFIG'}{'MAYBE'}{'GROUP'}="all,".
                                     "teacherclass,".
                                     "adminclass,".
                                     "extraclass,";
# define more dependencies
$options{'CONFIG'}{'DEPENDS'}{'set-gidnumber'}="create";

my $testopt=GetOptions(\%options, 
                       "help|h",
                       "info|i",
                       "json|j+",
                       "verbose|v+",
                       "class|c=s",
                       "all",
                       "adminclass",
                       "teacherclass",
                       "extraclass",
                       "create",
                       "gidnumber=i",
                       "kill",
                       "school=s",
                       "description=s",
                       "quota=s",
                       "mailquota=s",
                       "status=s",
                       "maxmembers=s",
                       "creationdate=s",
                       "set-gidnumber=i",
                       "mailalias!",
                       "maillist!",
                       "join!",
                       "hide!",
                       "admins=s",
                       "addadmins=s",
                       "removeadmins=s",
                       "members=s",
                       "addmembers=s",
                       "removemembers=s",
                      );    

my %sophomorix_result=&result_sophomorix_init("sophomorix-class");
# Prüfen, ob Optionen erkannt wurden
&check_options($testopt,\%sophomorix_result,$options{'json'},\%options);

# defaults
if (not defined $options{'gidnumber_wish'}){
    $options{'gidnumber_wish'}="---";
}
if (not defined $options{'school'}){
    $options{'school'}="---";
}

print Dumper (\%options);


# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$options{'json'});
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse,\%sophomorix_result);
my ($smb_admin_pass)=&AD_get_passwd($DevelConf::sophomorix_file_admin,
                                     $DevelConf::secret_file_sophomorix_file_admin);

# calculate $class_type
if (defined $options{'teacherclass'}){
    $class_type="teacherclass";
}
if (defined $options{'extraclass'}){
    $class_type="extraclass";
}
if (defined $options{'adminclass'}){
    $class_type="adminclass";
}
if (defined $options{'all'}){
    $class_type="class";
}



# --help
#if ($help==1) {
if (defined $options{'help'}) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print('
sophomorix-class sets properties of a class in the database

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose

  -i  / --info          (Default: displays adminclass only)
  -i --adminclass       (displays adminclass)
  -i --teacherclass     (displays teacherclass)
  -i --extraclass       (displays extraclass)
  -i --all              (displays adminclass/teacherclass/extraclass)

Changing an admin-/extra-/teacherclass:
  -c <class>, / --class <class> 
  (can set values also for the group teachers with --class teachers)
    --description \'multiple words possible\'
    --quota <share1>:<quota1 in MiB>:<comment1>,<share2>:<quota2 in MiB>:<comment2>,...
    --mailquota <mailquota in MiB>:<Comment>
    --mailalias, --nomailalias
    --maillist, --nomaillist 
    --status <letter>
    --join,  --nojoin
    --hide,  --nohide
    --maxmembers number

    --admins user1,user2,user3, ... 
    --addadmins user1,user2,user3, ...
    --removeadmins user1,user2,user3, ...

This is for migration/testing/fixing only:
  --create --class <class> --gidnumber <num>
  --creationdate <20150529093330.0Z> (only for migration)
  --set-gidnumber <num>
  --members user1,user2,user3, ... 
  --addmembers user1,user2,user3, ...
  --removemembers user1,user2,user3, ...

Be careful with this command:
  --kill --class <class>


Please see the sophomorix-class(8) man pages for full documentation
');
   print "\n";
   exit;
}


############################################################
# config values
############################################################

# --info
# show all class when no specific class is given
if ($options{'info'}==1 and not defined $options{'class'}){
    my $ref_group_v=&AD_get_groups_v({ldap=>$ldap,
                                   root_dse=>$root_dse,
                                   root_dns=>$root_dns,
                                   school=>$options{'school'},
                                   sophomorix_config=>\%sophomorix_config,
                                 });

    #print Dumper($ref_group_v->{'LISTS'});
    my $jsoninfo="CLASSES_OVERVIEW";
    my $jsoncomment="All Groups";
    &json_dump({json => $options{'json'},
                jsoninfo => $jsoninfo,
                jsoncomment => $jsoncomment,
                object_name => $options{'school'},
                type => $class_type,
                log_level => $options{'verbose'},
                hash_ref => $ref_group_v,
                sophomorix_config => \%sophomorix_config,
               });
   exit;
}



# --info --class <name>
# list class(es) and exit
if ($options{'info'}==1 and defined $options{'class'}){
   my $ref_groups=&AD_get_full_groupdata({ldap=>$ldap,
                                           root_dse=>$root_dse,
                                           root_dns=>$root_dns,
                                           grouplist=>$options{'class'},
                                           sophomorix_config=>\%sophomorix_config,
                                      });
    #print Dumper($ref_groups);
    my $jsoninfo="CLASS";
    my $jsoncomment="Class";
    &json_dump({json => $options{'json'},
                jsoninfo => $jsoninfo,
                jsoncomment => $jsoncomment,
                object_name => $options{'school'},
                log_level => $options{'verbose'},
                hash_ref => $ref_groups,
                sophomorix_config => \%sophomorix_config,
               });
    exit;
}


&result_sophomorix_check_exit(\%sophomorix_result,\%sophomorix_config,$options{'json'});
# ===========================================================================
# Programmbeginn
# ===========================================================================

&log_script_start(\@arguments,\%sophomorix_result,\%sophomorix_config);



# --create --class <name>
############################################################
if (defined $options{'create'} and defined $options{'class'}){
   &AD_school_create({ldap=>$ldap,
                      root_dse=>$root_dse,
                      root_dns=>$root_dns,
                      school=>$options{'school'},
                      smb_admin_pass=>$smb_admin_pass,
                      sophomorix_config=>\%sophomorix_config,
                      sophomorix_result=>\%sophomorix_result,
                    });
   my $group_token=&AD_get_name_tokened($options{'class'},$options{'school'},$class_type);
   &AD_group_create({ldap=>$ldap,
                     root_dse=>$root_dse,
                     root_dns=>$root_dns,
                     school=>$options{'school'},
                     group=>$group_token,
                     group_basename=>$options{'class'},
                     description=>$group_token,
                     type=>$class_type,
                     status=>"P",
		     sub_ou=>"OU=".$options{'class'}.",".$sophomorix_config{'INI'}{'OU'}{'AD_student_ou'},
                     joinable=>"TRUE",
                     hidden=>"FALSE",
                     gidnumber_wish=>$options{'gidnumber'},
                     smb_admin_pass=>$smb_admin_pass,
                     sophomorix_config=>\%sophomorix_config,
                     sophomorix_result=>\%sophomorix_result,
                  });
}



# --kill --class <name>
############################################################
if (defined $options{'kill'} and defined $options{'class'}){
    my $group_token=&AD_get_name_tokened($options{'class'},$options{'school'},$class_type);
    &AD_group_kill({ldap=>$ldap,
                    root_dse=>$root_dse,
                    root_dns=>$root_dns,
                    group=>$group_token,
                    group=>$options{'class'},
                    smb_admin_pass=>$smb_admin_pass,
                    type=>$class_type,
                    sophomorix_config=>\%sophomorix_config,
                  });
    &log_script_end(\@arguments,\%sophomorix_result,\%sophomorix_config,$options{'json'});
}



# get dn if class exists and continue ($info=0)
############################################################
my ($dn_class,
    $count,
    $school_AD)=&AD_class_fetch($ldap,
                                $root_dse,
                                $options{'class'},
                                $options{'school'},
                                $class_type,
                                \%sophomorix_config,
                               );

if ($count>1){
    print "\n$count classes found.\n";
    print "Specify the school-token to choose a project\n\n";
    &log_script_exit("Specify the school-token to choose a class",$count,1,0,
                     \@arguments,\%sophomorix_result,\%sophomorix_config,$options{'json'});
} elsif ($count==0){
    print "\nERROR retrieving class $options{'class'}: $count class found.\n\n";
    &log_script_exit("ERROR retrieving class $options{'class'}: $count class found.",$count,1,0,
                     \@arguments,\%sophomorix_result,\%sophomorix_config,$options{'json'});
}

##################################################
# ??? --sync_all_memberships for classes? ???

# --description <strg>
if (defined $options{'description'}){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      description=>$options{'description'},
                      sophomorix_config=>\%sophomorix_config,
                    });
}



# --quota <strg>
if (defined $options{'quota'}){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      quota=>$options{'quota'},
                      sophomorix_config=>\%sophomorix_config,
                    });
}



# --mailquota <strg>
if (defined $options{'mailquota'}){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      mailquota=>$options{'mailquota'},
                      sophomorix_config=>\%sophomorix_config,
                    });
}



# --mailalias/nomailalias
if (defined $options{'mailalias'}){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      mailalias=>$options{'mailalias'},
                      sophomorix_config=>\%sophomorix_config,
                    });
}



# --maillist/--nomaillist
if (defined $options{'maillist'}){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      maillist=>$options{'maillist'},
                      sophomorix_config=>\%sophomorix_config,
                    });
}



# --status <P>
if (defined $options{'status'}){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      status=>$options{'status'},
                      sophomorix_config=>\%sophomorix_config,
                    });
}



# --join/--nojoin
if (defined $options{'join'}){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      join=>$options{'join'},
                      sophomorix_config=>\%sophomorix_config,
                    });
}



# --hide/--nohide
if (defined $options{'hide'}){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      hide=>$options{'hide'},
                      sophomorix_config=>\%sophomorix_config,
                    });
}



# --maxmembers <strg>
if (defined $options{'maxmembers'}){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      maxmembers=>$options{'maxmembers'},
                      sophomorix_config=>\%sophomorix_config,
                    });
}



# --creationdate <strg>
if (defined $options{'creationdate'}){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      creationdate=>$options{'creationdate'},
                      sophomorix_config=>\%sophomorix_config,
                    });
}



# --set-gidnumber <num>
if (defined $options{'set-gidnumber'}){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      gidnumber=>$options{'set-gidnumber'},
                      sophomorix_config=>\%sophomorix_config,
                    });
}



##################################################
# members
# --members <user1,user2>
if (defined $options{'members'}){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      members=>$options{'members'},
                      sophomorix_config=>\%sophomorix_config,
                    });
}



# --addmembers <user1,user2>
if (defined $options{'addmembers'}){
    my @addmembers=split(/,/,$options{'addmembers'});
    my @old_members = &AD_dn_fetch_multivalue($ldap,$root_dse,$dn_class,"sophomorixMembers");
    my @members = uniq(@old_members,@addmembers); 
    my $members=join(",",@members);
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      members=>$members,
                      sophomorix_config=>\%sophomorix_config,
                    });
}


 
# --removemembers <user1,user2>
if (defined $options{'removemembers'}){
    my @old_members = &AD_dn_fetch_multivalue($ldap,$root_dse,$dn_class,"sophomorixMembers");
    my @members = &remove_from_list($options{'removemembers'},@old_members);
    my $members=join(",",@members);
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      members=>$members,
                      sophomorix_config=>\%sophomorix_config,
                    });
}




##################################################
# admins

# --admins <user1,user2>
if (defined $options{'admins'}){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      admins=>$options{'admins'},
                      sophomorix_config=>\%sophomorix_config,
                    });
}



# --addadmins <user1,user2>
if (defined $options{'addadmins'}){
    my @addadmins=split(/,/,$options{'addadmins'});
    my @old_admins = &AD_dn_fetch_multivalue($ldap,$root_dse,$dn_class,"sophomorixAdmins");
    my @admins = uniq(@old_admins,@addadmins); 
    my $admins=join(",",@admins);
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      admins=>$admins,
                      sophomorix_config=>\%sophomorix_config,
                    });
}

# --removeadmins <user1,user2>
if (defined $options{'removeadmins'}){
    my @old_admins = &AD_dn_fetch_multivalue($ldap,$root_dse,$dn_class,"sophomorixAdmins");
    my @admins = &remove_from_list($options{'removeadmins'},@old_admins);
    my $admins=join(",",@admins);
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      admins=>$admins,
                      sophomorix_config=>\%sophomorix_config,
                    });
}


# # --reset-class
# if ($reset_class ne ""){
#     if ($reset_class eq ${DevelConf::teacher}){
#         &log_script_exit("ERROR: This option cannot be used with $reset_class",
#                          1,1,0,\@arguments,\%sophomorix_result,$options{'json'});
#     }

#     my ($group_type)=&pg_get_group_type($reset_class);

#     if ($group_type ne $class_type
#         and $group_type ne "hiddenclass"){
#         print "\nWARNING: Type of ${reset_class}: $group_type\n";
#         print   "         The option --reset-class can only be used\n",
#                 "         with type adminclass/hiddenclass\n\n";
#         &log_script_exit("ERROR: option works only with admin/hiddenclass",
#                          1,1,0,\@arguments,\%sophomorix_result,$options{'json'});
#     }

#     print "Type: $group_type\n";

#     my @students=&fetchstudents_from_adminclass($reset_class);

#     # repair.directories einlesen
#     &get_alle_verzeichnis_rechte();
#     # fetch permission for all homes
#     &fetch_repairhome();

#     # remove data from __vorlagen ($tasks_rooms)
#     my $command_1="rm -rf ${DevelConf::tasks_classes}/${reset_class}/*";
#     my $command_2="rm -rf ${DevelConf::share_classes}/${reset_class}/*";

#     if ($info==0){
#         print "Removing common stuff:\n";
#         print "   $command_1\n";
#         system("$command_1");
#         print "   $command_2\n";
#         system("$command_2");
#     } else {
#         print "   I would: $command_1\n";
#         print "   I would: $command_2\n";
#     }

#     print "Resetting all users of class $reset_class:\n";
#     foreach my $user (@students){
#         if ($info==0){
#             &reset_user($user);
#         } else {
#             print "   I would reset $user\n";
#         }
#     }
#     if ($info==1){
#         print "\nWARNING: To actually reset a class remove the --info/-i\n\n";
#     }
# }

# # Setting Quota if necessary
# if ($Conf::use_quota eq "yes" 
#     and $class ne "" 
#     and (defined $options{'quota'} or defined $options{'mailquota'})
#     ) {
#     system("${DevelConf::path_sbin}/sophomorix-quota --class $class  --noninteractive");
#     &nscd_stop();
# } else {
#     &titel("NOT setting quota (nothing quota related changed)");
# }

# # Creating Mailing Aliases and Lists
# if ($class ne ""
#     and (defined $mailalias or defined $maillist)
#    ) {
#     system("${DevelConf::path_sbin}/sophomorix-mail");
#     &nscd_stop();
# } else {
#     &titel("NOT creating mailaliases/lists (nothing mail related changed)");
# }

# ===========================================================================
# Ende des Scripts
# ===========================================================================
&AD_unbind_admin($ldap);
&log_script_end(\@arguments,\%sophomorix_result,\%sophomorix_config,$options{'json'});







