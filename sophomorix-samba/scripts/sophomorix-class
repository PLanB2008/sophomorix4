#!/usr/bin/perl -w
# This script (sophomorix-class) is maintained by Rüdiger Beck
# It is Free Software (License GPLv3)
# If you find errors, contact the author
# jeffbeck@web.de  or  jeffbeck@linuxmuster.net

# modules
use strict;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use Sophomorix::SophomorixConfig;
use List::MoreUtils qw(uniq);

#use Sophomorix::SophomorixConfig;
#use Sophomorix::SophomorixBase;
#use Sophomorix::SophomorixAPI;
#use Sophomorix::SophomorixPgLdap;
#use DBI;
#use Net::LDAP;
use Net::LDAP;
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Terse = 1; 
use JSON;
use Sophomorix::SophomorixBase qw(
                                 print_line
                                 print_title
                                 time_stamp_AD
                                 time_stamp_file
                                 unlock_sophomorix
                                 lock_sophomorix
                                 log_script_start
                                 log_script_end
                                 log_script_exit
                                 backup_auk_file
                                 get_passwd_charlist
                                 get_plain_password
                                 check_options
                                 config_sophomorix_read
                                 result_sophomorix_init
                                 result_sophomorix_add
                                 result_sophomorix_check_exit
                                 result_sophomorix_print
                                 remove_from_list
                                 json_dump
                                 );
use Sophomorix::SophomorixSambaAD qw(
                                 AD_school_create
                                 AD_bind_admin
                                 AD_dns_get
                                 AD_unbind_admin
                                 AD_user_create
                                 AD_group_create
                                 AD_group_kill
                                 AD_group_addmember
                                 AD_get_schoolname
                                 AD_get_name_tokened
                                 AD_class_fetch
                                 AD_group_update
                                 AD_project_sync_members
                                 AD_dn_fetch_multivalue
                                 AD_get_passwd
                                 AD_get_groups_v
                                 AD_get_full_groupdata
                                    );
my @arguments = @ARGV;

my $time_stamp_file=&time_stamp_file();
my $time_stamp_AD=&time_stamp_AD();

# ===========================================================================
# Optionen verarbeiten
# ==========================================================================
# Variablen für Optionen
$Conf::log_level=1;
my $help=0;
my $info=0;
my $json=0;
my $class="";

# classtype
my $class_type="adminclass"; # default is adminclass
my $adminclass=0;
my $teacherclass=0;
my $extraclass=0;
my $all=0;

my $create=0;
my $gidnumber_wish="---"; # used on creation of class
my $set_gidnumber; # used on update
my $kill=0;
my $school="---";

my $description;
my $quota;
my $mailquota;
my $mailalias;
my $maillist;
my $status;
my $join;
my $hide;
my $maxmembers;
my $creationdate;

my $members;
my $addmembers;
my $removemembers;

my $admins;
my $addadmins;
my $removeadmins;

my $reset_class="";
$Conf::log_level=1;

# Parsen der Optionen
my $testopt=GetOptions(
           "help|h" => \$help,
           "info|i" => \$info,
           "json|j+" => \$json,
           "verbose|v+" => \$Conf::log_level,
           "class|c=s" => \$class,
           "all" => \$all,
           "adminclass" => \$adminclass,
           "teacherclass" => \$teacherclass,
           "extraclass" => \$extraclass,
           "create" => \$create,
           "gidnumber=i" => \$gidnumber_wish,
           "kill" => \$kill,
           "school=s" => \$school,
           "description=s" => \$description,
           "quota=s" => \$quota,
           "mailquota=s" => \$mailquota,
           "status=s" => \$status,
           "maxmembers=s" => \$maxmembers,
           "creationdate=s" => \$creationdate,
           "set-gidnumber=i" => \$set_gidnumber,
           "mailalias!" => \$mailalias,
           "maillist!" => \$maillist,
           "join!" => \$join,
           "hide!" => \$hide,
           "admins=s" => \$admins,
           "addadmins=s" => \$addadmins,
           "removeadmins=s" => \$removeadmins,
          "members=s" => \$members,
           "addmembers=s" => \$addmembers,
           "removemembers=s" => \$removemembers,
#           "reset-class=s" => \$reset_class,
#           "hide!" => \$hide,
          );

my %sophomorix_result=&result_sophomorix_init("sophomorix-class");
# Prüfen, ob Optionen erkannt wurden
&check_options($testopt,\%sophomorix_result,$json);

# Reading Configuration
my ($ldap,$root_dse) = &AD_bind_admin(\@arguments,\%sophomorix_result,$json);
my $root_dns=&AD_dns_get($root_dse);
my %sophomorix_config=&config_sophomorix_read($ldap,$root_dse,\%sophomorix_result);
my ($smb_admin_pass)=&AD_get_passwd($DevelConf::sophomorix_file_admin,
                                     $DevelConf::secret_file_sophomorix_file_admin);


# calculate $class_type
if ($teacherclass==1){
    $class_type="teacherclass";
}
if ($extraclass==1){
    $class_type="extraclass";
}
if ($adminclass==1){
    $class_type="adminclass";
}
if ($all==1){
    $class_type="class";
}



# --help
if ($help==1) {
   # Scriptname ermitteln
   my @list = split(/\//,$0);
   my $scriptname = pop @list;
   # Befehlbeschreibung
   print('
sophomorix-class sets properties of a class in the database

Options
  -h  / --help
  -v  / --verbose
  -vv / --verbose --verbose

  -i  / --info          (Default: displays adminclass only)
  -i --teacherclass     (displays teacherclass)
  -i -extraclass        (displays extraclass)
  -i all                (displays adminclass/teacherclass/extraclass)

Changing an admin-/extra-/teacherclass:
  -c <class>, / --class <class> 
  (can set values also for the group teachers with --class teachers)
    --description \'multiple words possible\'
    --quota <share1>:<quota1 in MiB>:<comment1>,<share2>:<quota2 in MiB>:<comment2>,...
    --mailquota <mailquota in MiB>:<Comment>
    --mailalias, --nomailalias
    --maillist, --nomaillist 
    --status <letter>
    --join,  --nojoin
    --hide,  --nohide
    --maxmembers number

    --admins user1,user2,user3, ... 
    --addadmins user1,user2,user3, ...
    --removeadmins user1,user2,user3, ...

This is for migration/testing/fixing only:
  --create --class <class> --gidnumber <num>
  --creationdate <20150529093330.0Z> (only for migration)
  --set-gidnumber <num>
  --members user1,user2,user3, ... 
  --addmembers user1,user2,user3, ...
  --removemembers user1,user2,user3, ...

Be careful with this command:
  --kill --class <class>


Please see the sophomorix-class(8) man pages for full documentation
');
   print "\n";
   exit;
}


############################################################
# config values
############################################################

# --info
# show all class when no specific class is given
if ($info==1 and $class eq ""){
    my $ref_group_v=&AD_get_groups_v({ldap=>$ldap,
                                   root_dse=>$root_dse,
                                   root_dns=>$root_dns,
                                   school=>$school,
                                   sophomorix_config=>\%sophomorix_config,
                                 });

    #print Dumper($ref_group_v->{'LISTS'});
    my $jsoninfo="CLASSES_OVERVIEW";
    my $jsoncomment="All Groups";
    &json_dump({json => $json,
                jsoninfo => $jsoninfo,
                jsoncomment => $jsoncomment,
                object_name => $school,
                type => $class_type,
                log_level => $Conf::log_level,
                hash_ref => $ref_group_v,
                sophomorix_config => \%sophomorix_config,
               });
   exit;
}

# --info --class <name>
# list class(es) and exit
if ($info==1 and $class ne ""){
   my $ref_groups=&AD_get_full_groupdata({ldap=>$ldap,
                                           root_dse=>$root_dse,
                                           root_dns=>$root_dns,
                                           grouplist=>$class,
                                           sophomorix_config=>\%sophomorix_config,
                                      });
    #print Dumper($ref_groups);
    my $jsoninfo="CLASS";
    my $jsoncomment="Class";
    &json_dump({json => $json,
                jsoninfo => $jsoninfo,
                jsoncomment => $jsoncomment,
                object_name => $school,
                log_level => $Conf::log_level,
                hash_ref => $ref_groups,
                sophomorix_config => \%sophomorix_config,
               });
    exit;
}


&result_sophomorix_check_exit(\%sophomorix_result,\%sophomorix_config,$json);
# ===========================================================================
# Programmbeginn
# ===========================================================================



&log_script_start(\@arguments,\%sophomorix_result);




# --create --class <name>
############################################################
if ($create==1 and $class ne ""){
   &AD_school_create({ldap=>$ldap,
                      root_dse=>$root_dse,
                      root_dns=>$root_dns,
                      school=>$school,
                      creationdate=>$time_stamp_AD,
                      smb_admin_pass=>$smb_admin_pass,
                      sophomorix_config=>\%sophomorix_config,
                      sophomorix_result=>\%sophomorix_result,
                    });
   my $group_token=&AD_get_name_tokened($class,$school,$class_type);
   &AD_group_create({ldap=>$ldap,
                     root_dse=>$root_dse,
                     root_dns=>$root_dns,
                     school=>$school,
                     group=>$group_token,
                     group_basename=>$class,
                     description=>$group_token,
                     type=>$class_type,
                     status=>"P",
                     creationdate=>$time_stamp_AD,
		     sub_ou=>"OU=".$class.",".$sophomorix_config{'INI'}{'OU'}{'AD_student_ou'},
                     joinable=>"TRUE",
                     hidden=>"FALSE",
                     gidnumber_wish=>$gidnumber_wish,
                     smb_admin_pass=>$smb_admin_pass,
                     sophomorix_config=>\%sophomorix_config,
                     sophomorix_result=>\%sophomorix_result,
                  });
}

# --kill --class <name>
############################################################
if ($kill==1 and $class ne ""){
    my $group_token=&AD_get_name_tokened($class,$school,$class_type);
    &AD_group_kill({ldap=>$ldap,
                    root_dse=>$root_dse,
                    root_dns=>$root_dns,
                    group=>$group_token,
                    group=>$class,
                    smb_admin_pass=>$smb_admin_pass,
                    type=>$class_type,
                    sophomorix_config=>\%sophomorix_config,
                  });
    &log_script_end(\@arguments,\%sophomorix_result,\%sophomorix_config,$json);
}


# get dn if class exists and continue ($info=0)
############################################################
my ($dn_class,$count,$school_AD)=&AD_class_fetch($ldap,$root_dse,$class,$school,$info);

if ($count>1){
    print "\n$count classes found.\n";
    print "Specify the school-token to choose a project\n\n";
    &log_script_exit("Specify the school-token to choose a class",$count,1,0,\@arguments,\%sophomorix_result,\%sophomorix_config,$json);
} elsif ($count==0){
    print "\nERROR retrieving class $class: $count class found.\n\n";
    &log_script_exit("ERROR retrieving class $class: $count class found.",$count,1,0,\@arguments,\%sophomorix_result,\%sophomorix_config,$json);
}

##################################################
# ??? --sync_all_memberships for classes? ???

# --description <strg>
if (defined $description){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      description=>$description,
                      sophomorix_config=>\%sophomorix_config,
                    });
}

# --quota <strg>
if (defined $quota){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      quota=>$quota,
                      sophomorix_config=>\%sophomorix_config,
                    });
}

# --mailquota <strg>
if (defined $mailquota){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      mailquota=>$mailquota,
                      sophomorix_config=>\%sophomorix_config,
                    });
}

# --mailalias/nomailalias
if (defined $mailalias){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      mailalias=>$mailalias,
                      sophomorix_config=>\%sophomorix_config,
                    });
}

# --maillist/--nomaillist
if (defined $maillist){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      maillist=>$maillist,
                      sophomorix_config=>\%sophomorix_config,
                    });
}

# --status <P>
if (defined $status){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      status=>$status,
                      sophomorix_config=>\%sophomorix_config,
                    });
}

# --join/--nojoin
if (defined $join){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      join=>$join,
                      sophomorix_config=>\%sophomorix_config,
                    });
}

# --hide/--nohide
if (defined $hide){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      hide=>$hide,
                      sophomorix_config=>\%sophomorix_config,
                    });
}

# --maxmembers <strg>
if (defined $maxmembers){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      maxmembers=>$maxmembers,
                      sophomorix_config=>\%sophomorix_config,
                    });
}

# --creationdate <strg>
if (defined $creationdate){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      creationdate=>$creationdate,
                      sophomorix_config=>\%sophomorix_config,
                    });
}

# --set-gidnumber <num>
if (defined $set_gidnumber){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      gidnumber=>$set_gidnumber,
                      sophomorix_config=>\%sophomorix_config,
                    });
}

# # --hide
# if ($hide ne "" and $class ne ""){
#     if ($hide==0){
#         print "Unhiding class $class\n";
#         &update_class_db_entry($class,"Type=adminclass");
#     }
#     if ($hide==1){
#         print "Hiding class $class\n";
#         &update_class_db_entry($class,"Type=hiddenclass");
#     }
# }

##################################################
# members
# --members <user1,user2>
if (defined $members){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      members=>$members,
                      sophomorix_config=>\%sophomorix_config,
                    });
}

# --addmembers <user1,user2>
if (defined $addmembers){
    my @addmembers=split(/,/,$addmembers);
    my @old_members = &AD_dn_fetch_multivalue($ldap,$root_dse,$dn_class,"sophomorixMembers");
    my @members = uniq(@old_members,@addmembers); 
    my $members=join(",",@members);
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      members=>$members,
                      sophomorix_config=>\%sophomorix_config,
                    });
}
 
# --removemembers <user1,user2>
if (defined $removemembers){
    my @old_members = &AD_dn_fetch_multivalue($ldap,$root_dse,$dn_class,"sophomorixMembers");
    my @members = &remove_from_list($removemembers,@old_members);
    my $members=join(",",@members);
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      members=>$members,
                      sophomorix_config=>\%sophomorix_config,
                    });
}




##################################################
# admins

# --admins <user1,user2>
if (defined $admins){
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      admins=>$admins,
                      sophomorix_config=>\%sophomorix_config,
                    });
}

# --addadmins <user1,user2>
if (defined $addadmins){
    my @addadmins=split(/,/,$addadmins);
    my @old_admins = &AD_dn_fetch_multivalue($ldap,$root_dse,$dn_class,"sophomorixAdmins");
    my @admins = uniq(@old_admins,@addadmins); 
    my $admins=join(",",@admins);
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      admins=>$admins,
                      sophomorix_config=>\%sophomorix_config,
                    });
}

# --removeadmins <user1,user2>
if (defined $removeadmins){
    my @old_admins = &AD_dn_fetch_multivalue($ldap,$root_dse,$dn_class,"sophomorixAdmins");
    my @admins = &remove_from_list($removeadmins,@old_admins);
    my $admins=join(",",@admins);
    &AD_group_update({ldap=>$ldap,
                      root_dse=>$root_dse,
                      dn=>$dn_class,
		      school=>$school_AD,
                      type=>$class_type,
                      admins=>$admins,
                      sophomorix_config=>\%sophomorix_config,
                    });
}


# # --reset-class
# if ($reset_class ne ""){
#     if ($reset_class eq ${DevelConf::teacher}){
#         &log_script_exit("ERROR: This option cannot be used with $reset_class",
#                          1,1,0,\@arguments,\%sophomorix_result,$json);
#     }

#     my ($group_type)=&pg_get_group_type($reset_class);

#     if ($group_type ne $class_type
#         and $group_type ne "hiddenclass"){
#         print "\nWARNING: Type of ${reset_class}: $group_type\n";
#         print   "         The option --reset-class can only be used\n",
#                 "         with type adminclass/hiddenclass\n\n";
#         &log_script_exit("ERROR: option works only with admin/hiddenclass",
#                          1,1,0,\@arguments,\%sophomorix_result,$json);
#     }

#     print "Type: $group_type\n";

#     my @students=&fetchstudents_from_adminclass($reset_class);

#     # repair.directories einlesen
#     &get_alle_verzeichnis_rechte();
#     # fetch permission for all homes
#     &fetch_repairhome();

#     # remove data from __vorlagen ($tasks_rooms)
#     my $command_1="rm -rf ${DevelConf::tasks_classes}/${reset_class}/*";
#     my $command_2="rm -rf ${DevelConf::share_classes}/${reset_class}/*";

#     if ($info==0){
#         print "Removing common stuff:\n";
#         print "   $command_1\n";
#         system("$command_1");
#         print "   $command_2\n";
#         system("$command_2");
#     } else {
#         print "   I would: $command_1\n";
#         print "   I would: $command_2\n";
#     }

#     print "Resetting all users of class $reset_class:\n";
#     foreach my $user (@students){
#         if ($info==0){
#             &reset_user($user);
#         } else {
#             print "   I would reset $user\n";
#         }
#     }
#     if ($info==1){
#         print "\nWARNING: To actually reset a class remove the --info/-i\n\n";
#     }
# }

# # Setting Quota if necessary
# if ($Conf::use_quota eq "yes" 
#     and $class ne "" 
#     and (defined $quota or defined $mailquota)
#     ) {
#     system("${DevelConf::path_sbin}/sophomorix-quota --class $class  --noninteractive");
#     &nscd_stop();
# } else {
#     &titel("NOT setting quota (nothing quota related changed)");
# }

# # Creating Mailing Aliases and Lists
# if ($class ne ""
#     and (defined $mailalias or defined $maillist)
#    ) {
#     system("${DevelConf::path_sbin}/sophomorix-mail");
#     &nscd_stop();
# } else {
#     &titel("NOT creating mailaliases/lists (nothing mail related changed)");
# }

# ===========================================================================
# Ende des Scripts
# ===========================================================================
&AD_unbind_admin($ldap);
&log_script_end(\@arguments,\%sophomorix_result,\%sophomorix_config,$json);







